import type { QueryKey, QueryObserverOptions } from 'react-query';
import type { WritableAtom } from 'jotai';
import type { CreateQueryOptions, GetQueryClient } from './types';
export interface AtomWithQueryAction {
    type: 'refetch';
}
export interface AtomWithQueryOptions<TQueryFnData, TError, TData, TQueryData> extends QueryObserverOptions<TQueryFnData, TError, TData, TQueryData> {
    queryKey: QueryKey;
}
export interface AtomWithQueryOptionsWithEnabled<TQueryFnData, TError, TData, TQueryData> extends Omit<AtomWithQueryOptions<TQueryFnData, TError, TData, TQueryData>, 'enabled'> {
    enabled: boolean;
}
export declare function atomWithQuery<TQueryFnData, TError, TData = TQueryFnData, TQueryData = TQueryFnData>(createQuery: CreateQueryOptions<AtomWithQueryOptionsWithEnabled<TQueryFnData, TError, TData, TQueryData>>, getQueryClient?: GetQueryClient): WritableAtom<TData | TQueryData | undefined, AtomWithQueryAction, Promise<void>>;
export declare function atomWithQuery<TQueryFnData, TError, TData = TQueryFnData, TQueryData = TQueryFnData>(createQuery: CreateQueryOptions<AtomWithQueryOptions<TQueryFnData, TError, TData, TQueryData>>, getQueryClient?: GetQueryClient): WritableAtom<TData | TQueryData, AtomWithQueryAction, Promise<void>>;
