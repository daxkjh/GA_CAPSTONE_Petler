
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.0.0
 * Query Engine version: da41d2bb3406da22087b849f0e911199ba4fbf11
 */
Prisma.prismaVersion = {
  client: "4.0.0",
  engine: "da41d2bb3406da22087b849f0e911199ba4fbf11"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.VendorScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  password: 'password'
});

exports.Prisma.ProfileScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  address: 'address',
  description: 'description',
  type: 'type',
  profilePic: 'profilePic',
  start: 'start',
  end: 'end'
});

exports.Prisma.DetailsScalarFieldEnum = makeEnum({
  id: 'id',
  description: 'description',
  petType: 'petType',
  profileId: 'profileId',
  areaId: 'areaId'
});

exports.Prisma.DetailsOnAreaScalarFieldEnum = makeEnum({
  assignedAt: 'assignedAt',
  assignedBy: 'assignedBy',
  detailsId: 'detailsId',
  areaId: 'areaId'
});

exports.Prisma.PetSizeScalarFieldEnum = makeEnum({
  id: 'id',
  weight: 'weight',
  detailsId: 'detailsId'
});

exports.Prisma.AreaScalarFieldEnum = makeEnum({
  id: 'id',
  north: 'north',
  south: 'south',
  east: 'east',
  west: 'west'
});

exports.Prisma.ReviewsScalarFieldEnum = makeEnum({
  id: 'id',
  paws: 'paws',
  comment: 'comment',
  profileId: 'profileId',
  userProfileId: 'userProfileId'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email'
});

exports.Prisma.UserProfileScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  address: 'address',
  description: 'description',
  image: 'image',
  userId: 'userId'
});

exports.Prisma.PetsScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  type: 'type',
  breed: 'breed',
  birth: 'birth',
  image: 'image',
  sterilized: 'sterilized',
  userProfileId: 'userProfileId'
});

exports.Prisma.PostScalarFieldEnum = makeEnum({
  id: 'id',
  image: 'image',
  message: 'message',
  profileId: 'profileId'
});

exports.Prisma.BookingScalarFieldEnum = makeEnum({
  id: 'id',
  dateTime: 'dateTime',
  status: 'status',
  profileId: 'profileId',
  userProfileId: 'userProfileId',
  serviceId: 'serviceId'
});

exports.Prisma.ServiceScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  price: 'price',
  profileId: 'profileId'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});


exports.Prisma.ModelName = makeEnum({
  Vendor: 'Vendor',
  Profile: 'Profile',
  Details: 'Details',
  DetailsOnArea: 'DetailsOnArea',
  PetSize: 'PetSize',
  Area: 'Area',
  Reviews: 'Reviews',
  User: 'User',
  UserProfile: 'UserProfile',
  Pets: 'Pets',
  Post: 'Post',
  Booking: 'Booking',
  Service: 'Service'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
