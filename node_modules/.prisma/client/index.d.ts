
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Vendor
 * 
 */
export type Vendor = {
  id: number
  email: string
  password: string
}

/**
 * Model Profile
 * 
 */
export type Profile = {
  id: number
  name: string
  address: string
  description: string
  type: string
  profilePic: string
  start: string
  end: string
}

/**
 * Model Details
 * 
 */
export type Details = {
  id: number
  description: string
  petType: string
  profileId: number
  areaId: number
}

/**
 * Model DetailsOnArea
 * 
 */
export type DetailsOnArea = {
  assignedAt: Date
  assignedBy: string
  detailsId: number
  areaId: number
}

/**
 * Model PetSize
 * 
 */
export type PetSize = {
  id: number
  weight: string
  detailsId: number
}

/**
 * Model Area
 * 
 */
export type Area = {
  id: number
  north: boolean
  south: boolean
  east: boolean
  west: boolean
}

/**
 * Model Reviews
 * 
 */
export type Reviews = {
  id: number
  paws: number
  comment: string
  profileId: number
  userProfileId: number
}

/**
 * Model User
 * 
 */
export type User = {
  id: number
  email: string
}

/**
 * Model UserProfile
 * 
 */
export type UserProfile = {
  id: number
  name: string
  address: string
  description: string
  image: string
  userId: number
}

/**
 * Model Pets
 * 
 */
export type Pets = {
  id: number
  name: string
  type: string
  breed: string
  birth: Date
  image: string
  sterilized: boolean
  userProfileId: number
}

/**
 * Model Post
 * 
 */
export type Post = {
  id: number
  image: string
  message: string
  profileId: number
}

/**
 * Model Booking
 * 
 */
export type Booking = {
  id: number
  dateTime: Date
  status: string
  profileId: number
  userProfileId: number
  serviceId: number
}

/**
 * Model Service
 * 
 */
export type Service = {
  id: number
  title: string
  price: number
  profileId: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Vendors
 * const vendors = await prisma.vendor.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Vendors
   * const vendors = await prisma.vendor.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.vendor`: Exposes CRUD operations for the **Vendor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vendors
    * const vendors = await prisma.vendor.findMany()
    * ```
    */
  get vendor(): Prisma.VendorDelegate<GlobalReject>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<GlobalReject>;

  /**
   * `prisma.details`: Exposes CRUD operations for the **Details** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Details
    * const details = await prisma.details.findMany()
    * ```
    */
  get details(): Prisma.DetailsDelegate<GlobalReject>;

  /**
   * `prisma.detailsOnArea`: Exposes CRUD operations for the **DetailsOnArea** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DetailsOnAreas
    * const detailsOnAreas = await prisma.detailsOnArea.findMany()
    * ```
    */
  get detailsOnArea(): Prisma.DetailsOnAreaDelegate<GlobalReject>;

  /**
   * `prisma.petSize`: Exposes CRUD operations for the **PetSize** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PetSizes
    * const petSizes = await prisma.petSize.findMany()
    * ```
    */
  get petSize(): Prisma.PetSizeDelegate<GlobalReject>;

  /**
   * `prisma.area`: Exposes CRUD operations for the **Area** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Areas
    * const areas = await prisma.area.findMany()
    * ```
    */
  get area(): Prisma.AreaDelegate<GlobalReject>;

  /**
   * `prisma.reviews`: Exposes CRUD operations for the **Reviews** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.reviews.findMany()
    * ```
    */
  get reviews(): Prisma.ReviewsDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.userProfile`: Exposes CRUD operations for the **UserProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserProfiles
    * const userProfiles = await prisma.userProfile.findMany()
    * ```
    */
  get userProfile(): Prisma.UserProfileDelegate<GlobalReject>;

  /**
   * `prisma.pets`: Exposes CRUD operations for the **Pets** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pets
    * const pets = await prisma.pets.findMany()
    * ```
    */
  get pets(): Prisma.PetsDelegate<GlobalReject>;

  /**
   * `prisma.post`: Exposes CRUD operations for the **Post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * ```
    */
  get post(): Prisma.PostDelegate<GlobalReject>;

  /**
   * `prisma.booking`: Exposes CRUD operations for the **Booking** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bookings
    * const bookings = await prisma.booking.findMany()
    * ```
    */
  get booking(): Prisma.BookingDelegate<GlobalReject>;

  /**
   * `prisma.service`: Exposes CRUD operations for the **Service** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Services
    * const services = await prisma.service.findMany()
    * ```
    */
  get service(): Prisma.ServiceDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.0.0
   * Query Engine version: da41d2bb3406da22087b849f0e911199ba4fbf11
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Vendor: 'Vendor',
    Profile: 'Profile',
    Details: 'Details',
    DetailsOnArea: 'DetailsOnArea',
    PetSize: 'PetSize',
    Area: 'Area',
    Reviews: 'Reviews',
    User: 'User',
    UserProfile: 'UserProfile',
    Pets: 'Pets',
    Post: 'Post',
    Booking: 'Booking',
    Service: 'Service'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProfileCountOutputType
   */


  export type ProfileCountOutputType = {
    details: number
    booking: number
    Reviews: number
    Post: number
    Service: number
  }

  export type ProfileCountOutputTypeSelect = {
    details?: boolean
    booking?: boolean
    Reviews?: boolean
    Post?: boolean
    Service?: boolean
  }

  export type ProfileCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ProfileCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ProfileCountOutputType
    : S extends undefined
    ? never
    : S extends ProfileCountOutputTypeArgs
    ?'include' extends U
    ? ProfileCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ProfileCountOutputType ? ProfileCountOutputType[P] : never
  } 
    : ProfileCountOutputType
  : ProfileCountOutputType




  // Custom InputTypes

  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProfileCountOutputType
     * 
    **/
    select?: ProfileCountOutputTypeSelect | null
  }



  /**
   * Count Type DetailsCountOutputType
   */


  export type DetailsCountOutputType = {
    petSize: number
    DetailsOnArea: number
  }

  export type DetailsCountOutputTypeSelect = {
    petSize?: boolean
    DetailsOnArea?: boolean
  }

  export type DetailsCountOutputTypeGetPayload<
    S extends boolean | null | undefined | DetailsCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? DetailsCountOutputType
    : S extends undefined
    ? never
    : S extends DetailsCountOutputTypeArgs
    ?'include' extends U
    ? DetailsCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof DetailsCountOutputType ? DetailsCountOutputType[P] : never
  } 
    : DetailsCountOutputType
  : DetailsCountOutputType




  // Custom InputTypes

  /**
   * DetailsCountOutputType without action
   */
  export type DetailsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the DetailsCountOutputType
     * 
    **/
    select?: DetailsCountOutputTypeSelect | null
  }



  /**
   * Count Type AreaCountOutputType
   */


  export type AreaCountOutputType = {
    DetailsOnArea: number
  }

  export type AreaCountOutputTypeSelect = {
    DetailsOnArea?: boolean
  }

  export type AreaCountOutputTypeGetPayload<
    S extends boolean | null | undefined | AreaCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? AreaCountOutputType
    : S extends undefined
    ? never
    : S extends AreaCountOutputTypeArgs
    ?'include' extends U
    ? AreaCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof AreaCountOutputType ? AreaCountOutputType[P] : never
  } 
    : AreaCountOutputType
  : AreaCountOutputType




  // Custom InputTypes

  /**
   * AreaCountOutputType without action
   */
  export type AreaCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the AreaCountOutputType
     * 
    **/
    select?: AreaCountOutputTypeSelect | null
  }



  /**
   * Count Type UserProfileCountOutputType
   */


  export type UserProfileCountOutputType = {
    pets: number
    booking: number
    reviews: number
  }

  export type UserProfileCountOutputTypeSelect = {
    pets?: boolean
    booking?: boolean
    reviews?: boolean
  }

  export type UserProfileCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserProfileCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserProfileCountOutputType
    : S extends undefined
    ? never
    : S extends UserProfileCountOutputTypeArgs
    ?'include' extends U
    ? UserProfileCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserProfileCountOutputType ? UserProfileCountOutputType[P] : never
  } 
    : UserProfileCountOutputType
  : UserProfileCountOutputType




  // Custom InputTypes

  /**
   * UserProfileCountOutputType without action
   */
  export type UserProfileCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserProfileCountOutputType
     * 
    **/
    select?: UserProfileCountOutputTypeSelect | null
  }



  /**
   * Count Type ServiceCountOutputType
   */


  export type ServiceCountOutputType = {
    booking: number
  }

  export type ServiceCountOutputTypeSelect = {
    booking?: boolean
  }

  export type ServiceCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ServiceCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ServiceCountOutputType
    : S extends undefined
    ? never
    : S extends ServiceCountOutputTypeArgs
    ?'include' extends U
    ? ServiceCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ServiceCountOutputType ? ServiceCountOutputType[P] : never
  } 
    : ServiceCountOutputType
  : ServiceCountOutputType




  // Custom InputTypes

  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ServiceCountOutputType
     * 
    **/
    select?: ServiceCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Vendor
   */


  export type AggregateVendor = {
    _count: VendorCountAggregateOutputType | null
    _avg: VendorAvgAggregateOutputType | null
    _sum: VendorSumAggregateOutputType | null
    _min: VendorMinAggregateOutputType | null
    _max: VendorMaxAggregateOutputType | null
  }

  export type VendorAvgAggregateOutputType = {
    id: number | null
  }

  export type VendorSumAggregateOutputType = {
    id: number | null
  }

  export type VendorMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
  }

  export type VendorMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
  }

  export type VendorCountAggregateOutputType = {
    id: number
    email: number
    password: number
    _all: number
  }


  export type VendorAvgAggregateInputType = {
    id?: true
  }

  export type VendorSumAggregateInputType = {
    id?: true
  }

  export type VendorMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
  }

  export type VendorMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
  }

  export type VendorCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    _all?: true
  }

  export type VendorAggregateArgs = {
    /**
     * Filter which Vendor to aggregate.
     * 
    **/
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     * 
    **/
    orderBy?: Enumerable<VendorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vendors
    **/
    _count?: true | VendorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VendorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VendorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VendorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VendorMaxAggregateInputType
  }

  export type GetVendorAggregateType<T extends VendorAggregateArgs> = {
        [P in keyof T & keyof AggregateVendor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVendor[P]>
      : GetScalarType<T[P], AggregateVendor[P]>
  }




  export type VendorGroupByArgs = {
    where?: VendorWhereInput
    orderBy?: Enumerable<VendorOrderByWithAggregationInput>
    by: Array<VendorScalarFieldEnum>
    having?: VendorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VendorCountAggregateInputType | true
    _avg?: VendorAvgAggregateInputType
    _sum?: VendorSumAggregateInputType
    _min?: VendorMinAggregateInputType
    _max?: VendorMaxAggregateInputType
  }


  export type VendorGroupByOutputType = {
    id: number
    email: string
    password: string
    _count: VendorCountAggregateOutputType | null
    _avg: VendorAvgAggregateOutputType | null
    _sum: VendorSumAggregateOutputType | null
    _min: VendorMinAggregateOutputType | null
    _max: VendorMaxAggregateOutputType | null
  }

  type GetVendorGroupByPayload<T extends VendorGroupByArgs> = PrismaPromise<
    Array<
      PickArray<VendorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VendorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VendorGroupByOutputType[P]>
            : GetScalarType<T[P], VendorGroupByOutputType[P]>
        }
      >
    >


  export type VendorSelect = {
    id?: boolean
    email?: boolean
    password?: boolean
  }

  export type VendorGetPayload<
    S extends boolean | null | undefined | VendorArgs,
    U = keyof S
      > = S extends true
        ? Vendor
    : S extends undefined
    ? never
    : S extends VendorArgs | VendorFindManyArgs
    ?'include' extends U
    ? Vendor 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Vendor ? Vendor[P] : never
  } 
    : Vendor
  : Vendor


  type VendorCountArgs = Merge<
    Omit<VendorFindManyArgs, 'select' | 'include'> & {
      select?: VendorCountAggregateInputType | true
    }
  >

  export interface VendorDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Vendor that matches the filter.
     * @param {VendorFindUniqueArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VendorFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VendorFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Vendor'> extends True ? CheckSelect<T, Prisma__VendorClient<Vendor>, Prisma__VendorClient<VendorGetPayload<T>>> : CheckSelect<T, Prisma__VendorClient<Vendor | null >, Prisma__VendorClient<VendorGetPayload<T> | null >>

    /**
     * Find the first Vendor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindFirstArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VendorFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VendorFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Vendor'> extends True ? CheckSelect<T, Prisma__VendorClient<Vendor>, Prisma__VendorClient<VendorGetPayload<T>>> : CheckSelect<T, Prisma__VendorClient<Vendor | null >, Prisma__VendorClient<VendorGetPayload<T> | null >>

    /**
     * Find zero or more Vendors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vendors
     * const vendors = await prisma.vendor.findMany()
     * 
     * // Get first 10 Vendors
     * const vendors = await prisma.vendor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vendorWithIdOnly = await prisma.vendor.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VendorFindManyArgs>(
      args?: SelectSubset<T, VendorFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Vendor>>, PrismaPromise<Array<VendorGetPayload<T>>>>

    /**
     * Create a Vendor.
     * @param {VendorCreateArgs} args - Arguments to create a Vendor.
     * @example
     * // Create one Vendor
     * const Vendor = await prisma.vendor.create({
     *   data: {
     *     // ... data to create a Vendor
     *   }
     * })
     * 
    **/
    create<T extends VendorCreateArgs>(
      args: SelectSubset<T, VendorCreateArgs>
    ): CheckSelect<T, Prisma__VendorClient<Vendor>, Prisma__VendorClient<VendorGetPayload<T>>>

    /**
     * Create many Vendors.
     *     @param {VendorCreateManyArgs} args - Arguments to create many Vendors.
     *     @example
     *     // Create many Vendors
     *     const vendor = await prisma.vendor.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VendorCreateManyArgs>(
      args?: SelectSubset<T, VendorCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Vendor.
     * @param {VendorDeleteArgs} args - Arguments to delete one Vendor.
     * @example
     * // Delete one Vendor
     * const Vendor = await prisma.vendor.delete({
     *   where: {
     *     // ... filter to delete one Vendor
     *   }
     * })
     * 
    **/
    delete<T extends VendorDeleteArgs>(
      args: SelectSubset<T, VendorDeleteArgs>
    ): CheckSelect<T, Prisma__VendorClient<Vendor>, Prisma__VendorClient<VendorGetPayload<T>>>

    /**
     * Update one Vendor.
     * @param {VendorUpdateArgs} args - Arguments to update one Vendor.
     * @example
     * // Update one Vendor
     * const vendor = await prisma.vendor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VendorUpdateArgs>(
      args: SelectSubset<T, VendorUpdateArgs>
    ): CheckSelect<T, Prisma__VendorClient<Vendor>, Prisma__VendorClient<VendorGetPayload<T>>>

    /**
     * Delete zero or more Vendors.
     * @param {VendorDeleteManyArgs} args - Arguments to filter Vendors to delete.
     * @example
     * // Delete a few Vendors
     * const { count } = await prisma.vendor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VendorDeleteManyArgs>(
      args?: SelectSubset<T, VendorDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vendors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vendors
     * const vendor = await prisma.vendor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VendorUpdateManyArgs>(
      args: SelectSubset<T, VendorUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Vendor.
     * @param {VendorUpsertArgs} args - Arguments to update or create a Vendor.
     * @example
     * // Update or create a Vendor
     * const vendor = await prisma.vendor.upsert({
     *   create: {
     *     // ... data to create a Vendor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vendor we want to update
     *   }
     * })
    **/
    upsert<T extends VendorUpsertArgs>(
      args: SelectSubset<T, VendorUpsertArgs>
    ): CheckSelect<T, Prisma__VendorClient<Vendor>, Prisma__VendorClient<VendorGetPayload<T>>>

    /**
     * Find one Vendor that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {VendorFindUniqueOrThrowArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VendorFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, VendorFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__VendorClient<Vendor>, Prisma__VendorClient<VendorGetPayload<T>>>

    /**
     * Find the first Vendor that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindFirstOrThrowArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VendorFindFirstOrThrowArgs>(
      args?: SelectSubset<T, VendorFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__VendorClient<Vendor>, Prisma__VendorClient<VendorGetPayload<T>>>

    /**
     * Count the number of Vendors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorCountArgs} args - Arguments to filter Vendors to count.
     * @example
     * // Count the number of Vendors
     * const count = await prisma.vendor.count({
     *   where: {
     *     // ... the filter for the Vendors we want to count
     *   }
     * })
    **/
    count<T extends VendorCountArgs>(
      args?: Subset<T, VendorCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VendorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vendor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VendorAggregateArgs>(args: Subset<T, VendorAggregateArgs>): PrismaPromise<GetVendorAggregateType<T>>

    /**
     * Group by Vendor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VendorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VendorGroupByArgs['orderBy'] }
        : { orderBy?: VendorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VendorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVendorGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vendor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VendorClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Vendor base type for findUnique actions
   */
  export type VendorFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Vendor
     * 
    **/
    select?: VendorSelect | null
    /**
     * Filter, which Vendor to fetch.
     * 
    **/
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor: findUnique
   */
  export interface VendorFindUniqueArgs extends VendorFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Vendor base type for findFirst actions
   */
  export type VendorFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Vendor
     * 
    **/
    select?: VendorSelect | null
    /**
     * Filter, which Vendor to fetch.
     * 
    **/
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     * 
    **/
    orderBy?: Enumerable<VendorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vendors.
     * 
    **/
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vendors.
     * 
    **/
    distinct?: Enumerable<VendorScalarFieldEnum>
  }

  /**
   * Vendor: findFirst
   */
  export interface VendorFindFirstArgs extends VendorFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Vendor findMany
   */
  export type VendorFindManyArgs = {
    /**
     * Select specific fields to fetch from the Vendor
     * 
    **/
    select?: VendorSelect | null
    /**
     * Filter, which Vendors to fetch.
     * 
    **/
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     * 
    **/
    orderBy?: Enumerable<VendorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vendors.
     * 
    **/
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     * 
    **/
    skip?: number
    distinct?: Enumerable<VendorScalarFieldEnum>
  }


  /**
   * Vendor create
   */
  export type VendorCreateArgs = {
    /**
     * Select specific fields to fetch from the Vendor
     * 
    **/
    select?: VendorSelect | null
    /**
     * The data needed to create a Vendor.
     * 
    **/
    data: XOR<VendorCreateInput, VendorUncheckedCreateInput>
  }


  /**
   * Vendor createMany
   */
  export type VendorCreateManyArgs = {
    /**
     * The data used to create many Vendors.
     * 
    **/
    data: Enumerable<VendorCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Vendor update
   */
  export type VendorUpdateArgs = {
    /**
     * Select specific fields to fetch from the Vendor
     * 
    **/
    select?: VendorSelect | null
    /**
     * The data needed to update a Vendor.
     * 
    **/
    data: XOR<VendorUpdateInput, VendorUncheckedUpdateInput>
    /**
     * Choose, which Vendor to update.
     * 
    **/
    where: VendorWhereUniqueInput
  }


  /**
   * Vendor updateMany
   */
  export type VendorUpdateManyArgs = {
    /**
     * The data used to update Vendors.
     * 
    **/
    data: XOR<VendorUpdateManyMutationInput, VendorUncheckedUpdateManyInput>
    /**
     * Filter which Vendors to update
     * 
    **/
    where?: VendorWhereInput
  }


  /**
   * Vendor upsert
   */
  export type VendorUpsertArgs = {
    /**
     * Select specific fields to fetch from the Vendor
     * 
    **/
    select?: VendorSelect | null
    /**
     * The filter to search for the Vendor to update in case it exists.
     * 
    **/
    where: VendorWhereUniqueInput
    /**
     * In case the Vendor found by the `where` argument doesn't exist, create a new Vendor with this data.
     * 
    **/
    create: XOR<VendorCreateInput, VendorUncheckedCreateInput>
    /**
     * In case the Vendor was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<VendorUpdateInput, VendorUncheckedUpdateInput>
  }


  /**
   * Vendor delete
   */
  export type VendorDeleteArgs = {
    /**
     * Select specific fields to fetch from the Vendor
     * 
    **/
    select?: VendorSelect | null
    /**
     * Filter which Vendor to delete.
     * 
    **/
    where: VendorWhereUniqueInput
  }


  /**
   * Vendor deleteMany
   */
  export type VendorDeleteManyArgs = {
    /**
     * Filter which Vendors to delete
     * 
    **/
    where?: VendorWhereInput
  }


  /**
   * Vendor: findUniqueOrThrow
   */
  export type VendorFindUniqueOrThrowArgs = VendorFindUniqueArgsBase
      

  /**
   * Vendor: findFirstOrThrow
   */
  export type VendorFindFirstOrThrowArgs = VendorFindFirstArgsBase
      

  /**
   * Vendor without action
   */
  export type VendorArgs = {
    /**
     * Select specific fields to fetch from the Vendor
     * 
    **/
    select?: VendorSelect | null
  }



  /**
   * Model Profile
   */


  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileAvgAggregateOutputType = {
    id: number | null
  }

  export type ProfileSumAggregateOutputType = {
    id: number | null
  }

  export type ProfileMinAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    description: string | null
    type: string | null
    profilePic: string | null
    start: string | null
    end: string | null
  }

  export type ProfileMaxAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    description: string | null
    type: string | null
    profilePic: string | null
    start: string | null
    end: string | null
  }

  export type ProfileCountAggregateOutputType = {
    id: number
    name: number
    address: number
    description: number
    type: number
    profilePic: number
    start: number
    end: number
    _all: number
  }


  export type ProfileAvgAggregateInputType = {
    id?: true
  }

  export type ProfileSumAggregateInputType = {
    id?: true
  }

  export type ProfileMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    description?: true
    type?: true
    profilePic?: true
    start?: true
    end?: true
  }

  export type ProfileMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    description?: true
    type?: true
    profilePic?: true
    start?: true
    end?: true
  }

  export type ProfileCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    description?: true
    type?: true
    profilePic?: true
    start?: true
    end?: true
    _all?: true
  }

  export type ProfileAggregateArgs = {
    /**
     * Filter which Profile to aggregate.
     * 
    **/
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     * 
    **/
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs = {
    where?: ProfileWhereInput
    orderBy?: Enumerable<ProfileOrderByWithAggregationInput>
    by: Array<ProfileScalarFieldEnum>
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _avg?: ProfileAvgAggregateInputType
    _sum?: ProfileSumAggregateInputType
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }


  export type ProfileGroupByOutputType = {
    id: number
    name: string
    address: string
    description: string
    type: string
    profilePic: string
    start: string
    end: string
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect = {
    id?: boolean
    name?: boolean
    address?: boolean
    description?: boolean
    type?: boolean
    profilePic?: boolean
    start?: boolean
    end?: boolean
    details?: boolean | DetailsFindManyArgs
    booking?: boolean | BookingFindManyArgs
    Reviews?: boolean | ReviewsFindManyArgs
    Post?: boolean | PostFindManyArgs
    Service?: boolean | ServiceFindManyArgs
    _count?: boolean | ProfileCountOutputTypeArgs
  }

  export type ProfileInclude = {
    details?: boolean | DetailsFindManyArgs
    booking?: boolean | BookingFindManyArgs
    Reviews?: boolean | ReviewsFindManyArgs
    Post?: boolean | PostFindManyArgs
    Service?: boolean | ServiceFindManyArgs
    _count?: boolean | ProfileCountOutputTypeArgs
  }

  export type ProfileGetPayload<
    S extends boolean | null | undefined | ProfileArgs,
    U = keyof S
      > = S extends true
        ? Profile
    : S extends undefined
    ? never
    : S extends ProfileArgs | ProfileFindManyArgs
    ?'include' extends U
    ? Profile  & {
    [P in TrueKeys<S['include']>]:
        P extends 'details' ? Array < DetailsGetPayload<S['include'][P]>>  :
        P extends 'booking' ? Array < BookingGetPayload<S['include'][P]>>  :
        P extends 'Reviews' ? Array < ReviewsGetPayload<S['include'][P]>>  :
        P extends 'Post' ? Array < PostGetPayload<S['include'][P]>>  :
        P extends 'Service' ? Array < ServiceGetPayload<S['include'][P]>>  :
        P extends '_count' ? ProfileCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'details' ? Array < DetailsGetPayload<S['select'][P]>>  :
        P extends 'booking' ? Array < BookingGetPayload<S['select'][P]>>  :
        P extends 'Reviews' ? Array < ReviewsGetPayload<S['select'][P]>>  :
        P extends 'Post' ? Array < PostGetPayload<S['select'][P]>>  :
        P extends 'Service' ? Array < ServiceGetPayload<S['select'][P]>>  :
        P extends '_count' ? ProfileCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Profile ? Profile[P] : never
  } 
    : Profile
  : Profile


  type ProfileCountArgs = Merge<
    Omit<ProfileFindManyArgs, 'select' | 'include'> & {
      select?: ProfileCountAggregateInputType | true
    }
  >

  export interface ProfileDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProfileFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProfileFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Profile'> extends True ? CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>> : CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProfileFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProfileFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Profile'> extends True ? CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>> : CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProfileFindManyArgs>(
      args?: SelectSubset<T, ProfileFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Profile>>, PrismaPromise<Array<ProfileGetPayload<T>>>>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
    **/
    create<T extends ProfileCreateArgs>(
      args: SelectSubset<T, ProfileCreateArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Create many Profiles.
     *     @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
     *     @example
     *     // Create many Profiles
     *     const profile = await prisma.profile.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProfileCreateManyArgs>(
      args?: SelectSubset<T, ProfileCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
    **/
    delete<T extends ProfileDeleteArgs>(
      args: SelectSubset<T, ProfileDeleteArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProfileUpdateArgs>(
      args: SelectSubset<T, ProfileUpdateArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProfileDeleteManyArgs>(
      args?: SelectSubset<T, ProfileDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProfileUpdateManyArgs>(
      args: SelectSubset<T, ProfileUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
    **/
    upsert<T extends ProfileUpsertArgs>(
      args: SelectSubset<T, ProfileUpsertArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Find one Profile that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ProfileFindUniqueOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProfileFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProfileFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Find the first Profile that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProfileFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProfileFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProfileClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    details<T extends DetailsFindManyArgs = {}>(args?: Subset<T, DetailsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Details>>, PrismaPromise<Array<DetailsGetPayload<T>>>>;

    booking<T extends BookingFindManyArgs = {}>(args?: Subset<T, BookingFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Booking>>, PrismaPromise<Array<BookingGetPayload<T>>>>;

    Reviews<T extends ReviewsFindManyArgs = {}>(args?: Subset<T, ReviewsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Reviews>>, PrismaPromise<Array<ReviewsGetPayload<T>>>>;

    Post<T extends PostFindManyArgs = {}>(args?: Subset<T, PostFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Post>>, PrismaPromise<Array<PostGetPayload<T>>>>;

    Service<T extends ServiceFindManyArgs = {}>(args?: Subset<T, ServiceFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Service>>, PrismaPromise<Array<ServiceGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Profile base type for findUnique actions
   */
  export type ProfileFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * Filter, which Profile to fetch.
     * 
    **/
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile: findUnique
   */
  export interface ProfileFindUniqueArgs extends ProfileFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Profile base type for findFirst actions
   */
  export type ProfileFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * Filter, which Profile to fetch.
     * 
    **/
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     * 
    **/
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     * 
    **/
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     * 
    **/
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }

  /**
   * Profile: findFirst
   */
  export interface ProfileFindFirstArgs extends ProfileFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * Filter, which Profiles to fetch.
     * 
    **/
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     * 
    **/
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     * 
    **/
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * Profile create
   */
  export type ProfileCreateArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * The data needed to create a Profile.
     * 
    **/
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }


  /**
   * Profile createMany
   */
  export type ProfileCreateManyArgs = {
    /**
     * The data used to create many Profiles.
     * 
    **/
    data: Enumerable<ProfileCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Profile update
   */
  export type ProfileUpdateArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * The data needed to update a Profile.
     * 
    **/
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     * 
    **/
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs = {
    /**
     * The data used to update Profiles.
     * 
    **/
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     * 
    **/
    where?: ProfileWhereInput
  }


  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * The filter to search for the Profile to update in case it exists.
     * 
    **/
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     * 
    **/
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }


  /**
   * Profile delete
   */
  export type ProfileDeleteArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * Filter which Profile to delete.
     * 
    **/
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs = {
    /**
     * Filter which Profiles to delete
     * 
    **/
    where?: ProfileWhereInput
  }


  /**
   * Profile: findUniqueOrThrow
   */
  export type ProfileFindUniqueOrThrowArgs = ProfileFindUniqueArgsBase
      

  /**
   * Profile: findFirstOrThrow
   */
  export type ProfileFindFirstOrThrowArgs = ProfileFindFirstArgsBase
      

  /**
   * Profile without action
   */
  export type ProfileArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
  }



  /**
   * Model Details
   */


  export type AggregateDetails = {
    _count: DetailsCountAggregateOutputType | null
    _avg: DetailsAvgAggregateOutputType | null
    _sum: DetailsSumAggregateOutputType | null
    _min: DetailsMinAggregateOutputType | null
    _max: DetailsMaxAggregateOutputType | null
  }

  export type DetailsAvgAggregateOutputType = {
    id: number | null
    profileId: number | null
    areaId: number | null
  }

  export type DetailsSumAggregateOutputType = {
    id: number | null
    profileId: number | null
    areaId: number | null
  }

  export type DetailsMinAggregateOutputType = {
    id: number | null
    description: string | null
    petType: string | null
    profileId: number | null
    areaId: number | null
  }

  export type DetailsMaxAggregateOutputType = {
    id: number | null
    description: string | null
    petType: string | null
    profileId: number | null
    areaId: number | null
  }

  export type DetailsCountAggregateOutputType = {
    id: number
    description: number
    petType: number
    profileId: number
    areaId: number
    _all: number
  }


  export type DetailsAvgAggregateInputType = {
    id?: true
    profileId?: true
    areaId?: true
  }

  export type DetailsSumAggregateInputType = {
    id?: true
    profileId?: true
    areaId?: true
  }

  export type DetailsMinAggregateInputType = {
    id?: true
    description?: true
    petType?: true
    profileId?: true
    areaId?: true
  }

  export type DetailsMaxAggregateInputType = {
    id?: true
    description?: true
    petType?: true
    profileId?: true
    areaId?: true
  }

  export type DetailsCountAggregateInputType = {
    id?: true
    description?: true
    petType?: true
    profileId?: true
    areaId?: true
    _all?: true
  }

  export type DetailsAggregateArgs = {
    /**
     * Filter which Details to aggregate.
     * 
    **/
    where?: DetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Details to fetch.
     * 
    **/
    orderBy?: Enumerable<DetailsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: DetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Details from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Details.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Details
    **/
    _count?: true | DetailsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DetailsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DetailsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DetailsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DetailsMaxAggregateInputType
  }

  export type GetDetailsAggregateType<T extends DetailsAggregateArgs> = {
        [P in keyof T & keyof AggregateDetails]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDetails[P]>
      : GetScalarType<T[P], AggregateDetails[P]>
  }




  export type DetailsGroupByArgs = {
    where?: DetailsWhereInput
    orderBy?: Enumerable<DetailsOrderByWithAggregationInput>
    by: Array<DetailsScalarFieldEnum>
    having?: DetailsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DetailsCountAggregateInputType | true
    _avg?: DetailsAvgAggregateInputType
    _sum?: DetailsSumAggregateInputType
    _min?: DetailsMinAggregateInputType
    _max?: DetailsMaxAggregateInputType
  }


  export type DetailsGroupByOutputType = {
    id: number
    description: string
    petType: string
    profileId: number
    areaId: number
    _count: DetailsCountAggregateOutputType | null
    _avg: DetailsAvgAggregateOutputType | null
    _sum: DetailsSumAggregateOutputType | null
    _min: DetailsMinAggregateOutputType | null
    _max: DetailsMaxAggregateOutputType | null
  }

  type GetDetailsGroupByPayload<T extends DetailsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<DetailsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DetailsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DetailsGroupByOutputType[P]>
            : GetScalarType<T[P], DetailsGroupByOutputType[P]>
        }
      >
    >


  export type DetailsSelect = {
    id?: boolean
    profile?: boolean | ProfileArgs
    description?: boolean
    petType?: boolean
    petSize?: boolean | PetSizeFindManyArgs
    profileId?: boolean
    areaId?: boolean
    DetailsOnArea?: boolean | DetailsOnAreaFindManyArgs
    _count?: boolean | DetailsCountOutputTypeArgs
  }

  export type DetailsInclude = {
    profile?: boolean | ProfileArgs
    petSize?: boolean | PetSizeFindManyArgs
    DetailsOnArea?: boolean | DetailsOnAreaFindManyArgs
    _count?: boolean | DetailsCountOutputTypeArgs
  }

  export type DetailsGetPayload<
    S extends boolean | null | undefined | DetailsArgs,
    U = keyof S
      > = S extends true
        ? Details
    : S extends undefined
    ? never
    : S extends DetailsArgs | DetailsFindManyArgs
    ?'include' extends U
    ? Details  & {
    [P in TrueKeys<S['include']>]:
        P extends 'profile' ? ProfileGetPayload<S['include'][P]> :
        P extends 'petSize' ? Array < PetSizeGetPayload<S['include'][P]>>  :
        P extends 'DetailsOnArea' ? Array < DetailsOnAreaGetPayload<S['include'][P]>>  :
        P extends '_count' ? DetailsCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'profile' ? ProfileGetPayload<S['select'][P]> :
        P extends 'petSize' ? Array < PetSizeGetPayload<S['select'][P]>>  :
        P extends 'DetailsOnArea' ? Array < DetailsOnAreaGetPayload<S['select'][P]>>  :
        P extends '_count' ? DetailsCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Details ? Details[P] : never
  } 
    : Details
  : Details


  type DetailsCountArgs = Merge<
    Omit<DetailsFindManyArgs, 'select' | 'include'> & {
      select?: DetailsCountAggregateInputType | true
    }
  >

  export interface DetailsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Details that matches the filter.
     * @param {DetailsFindUniqueArgs} args - Arguments to find a Details
     * @example
     * // Get one Details
     * const details = await prisma.details.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DetailsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DetailsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Details'> extends True ? CheckSelect<T, Prisma__DetailsClient<Details>, Prisma__DetailsClient<DetailsGetPayload<T>>> : CheckSelect<T, Prisma__DetailsClient<Details | null >, Prisma__DetailsClient<DetailsGetPayload<T> | null >>

    /**
     * Find the first Details that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailsFindFirstArgs} args - Arguments to find a Details
     * @example
     * // Get one Details
     * const details = await prisma.details.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DetailsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DetailsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Details'> extends True ? CheckSelect<T, Prisma__DetailsClient<Details>, Prisma__DetailsClient<DetailsGetPayload<T>>> : CheckSelect<T, Prisma__DetailsClient<Details | null >, Prisma__DetailsClient<DetailsGetPayload<T> | null >>

    /**
     * Find zero or more Details that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Details
     * const details = await prisma.details.findMany()
     * 
     * // Get first 10 Details
     * const details = await prisma.details.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const detailsWithIdOnly = await prisma.details.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DetailsFindManyArgs>(
      args?: SelectSubset<T, DetailsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Details>>, PrismaPromise<Array<DetailsGetPayload<T>>>>

    /**
     * Create a Details.
     * @param {DetailsCreateArgs} args - Arguments to create a Details.
     * @example
     * // Create one Details
     * const Details = await prisma.details.create({
     *   data: {
     *     // ... data to create a Details
     *   }
     * })
     * 
    **/
    create<T extends DetailsCreateArgs>(
      args: SelectSubset<T, DetailsCreateArgs>
    ): CheckSelect<T, Prisma__DetailsClient<Details>, Prisma__DetailsClient<DetailsGetPayload<T>>>

    /**
     * Create many Details.
     *     @param {DetailsCreateManyArgs} args - Arguments to create many Details.
     *     @example
     *     // Create many Details
     *     const details = await prisma.details.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DetailsCreateManyArgs>(
      args?: SelectSubset<T, DetailsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Details.
     * @param {DetailsDeleteArgs} args - Arguments to delete one Details.
     * @example
     * // Delete one Details
     * const Details = await prisma.details.delete({
     *   where: {
     *     // ... filter to delete one Details
     *   }
     * })
     * 
    **/
    delete<T extends DetailsDeleteArgs>(
      args: SelectSubset<T, DetailsDeleteArgs>
    ): CheckSelect<T, Prisma__DetailsClient<Details>, Prisma__DetailsClient<DetailsGetPayload<T>>>

    /**
     * Update one Details.
     * @param {DetailsUpdateArgs} args - Arguments to update one Details.
     * @example
     * // Update one Details
     * const details = await prisma.details.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DetailsUpdateArgs>(
      args: SelectSubset<T, DetailsUpdateArgs>
    ): CheckSelect<T, Prisma__DetailsClient<Details>, Prisma__DetailsClient<DetailsGetPayload<T>>>

    /**
     * Delete zero or more Details.
     * @param {DetailsDeleteManyArgs} args - Arguments to filter Details to delete.
     * @example
     * // Delete a few Details
     * const { count } = await prisma.details.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DetailsDeleteManyArgs>(
      args?: SelectSubset<T, DetailsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Details.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Details
     * const details = await prisma.details.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DetailsUpdateManyArgs>(
      args: SelectSubset<T, DetailsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Details.
     * @param {DetailsUpsertArgs} args - Arguments to update or create a Details.
     * @example
     * // Update or create a Details
     * const details = await prisma.details.upsert({
     *   create: {
     *     // ... data to create a Details
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Details we want to update
     *   }
     * })
    **/
    upsert<T extends DetailsUpsertArgs>(
      args: SelectSubset<T, DetailsUpsertArgs>
    ): CheckSelect<T, Prisma__DetailsClient<Details>, Prisma__DetailsClient<DetailsGetPayload<T>>>

    /**
     * Find one Details that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {DetailsFindUniqueOrThrowArgs} args - Arguments to find a Details
     * @example
     * // Get one Details
     * const details = await prisma.details.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DetailsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, DetailsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__DetailsClient<Details>, Prisma__DetailsClient<DetailsGetPayload<T>>>

    /**
     * Find the first Details that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailsFindFirstOrThrowArgs} args - Arguments to find a Details
     * @example
     * // Get one Details
     * const details = await prisma.details.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DetailsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, DetailsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__DetailsClient<Details>, Prisma__DetailsClient<DetailsGetPayload<T>>>

    /**
     * Count the number of Details.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailsCountArgs} args - Arguments to filter Details to count.
     * @example
     * // Count the number of Details
     * const count = await prisma.details.count({
     *   where: {
     *     // ... the filter for the Details we want to count
     *   }
     * })
    **/
    count<T extends DetailsCountArgs>(
      args?: Subset<T, DetailsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DetailsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Details.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DetailsAggregateArgs>(args: Subset<T, DetailsAggregateArgs>): PrismaPromise<GetDetailsAggregateType<T>>

    /**
     * Group by Details.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DetailsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DetailsGroupByArgs['orderBy'] }
        : { orderBy?: DetailsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DetailsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDetailsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Details.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DetailsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    profile<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>;

    petSize<T extends PetSizeFindManyArgs = {}>(args?: Subset<T, PetSizeFindManyArgs>): CheckSelect<T, PrismaPromise<Array<PetSize>>, PrismaPromise<Array<PetSizeGetPayload<T>>>>;

    DetailsOnArea<T extends DetailsOnAreaFindManyArgs = {}>(args?: Subset<T, DetailsOnAreaFindManyArgs>): CheckSelect<T, PrismaPromise<Array<DetailsOnArea>>, PrismaPromise<Array<DetailsOnAreaGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Details base type for findUnique actions
   */
  export type DetailsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Details
     * 
    **/
    select?: DetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DetailsInclude | null
    /**
     * Filter, which Details to fetch.
     * 
    **/
    where: DetailsWhereUniqueInput
  }

  /**
   * Details: findUnique
   */
  export interface DetailsFindUniqueArgs extends DetailsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Details base type for findFirst actions
   */
  export type DetailsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Details
     * 
    **/
    select?: DetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DetailsInclude | null
    /**
     * Filter, which Details to fetch.
     * 
    **/
    where?: DetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Details to fetch.
     * 
    **/
    orderBy?: Enumerable<DetailsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Details.
     * 
    **/
    cursor?: DetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Details from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Details.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Details.
     * 
    **/
    distinct?: Enumerable<DetailsScalarFieldEnum>
  }

  /**
   * Details: findFirst
   */
  export interface DetailsFindFirstArgs extends DetailsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Details findMany
   */
  export type DetailsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Details
     * 
    **/
    select?: DetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DetailsInclude | null
    /**
     * Filter, which Details to fetch.
     * 
    **/
    where?: DetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Details to fetch.
     * 
    **/
    orderBy?: Enumerable<DetailsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Details.
     * 
    **/
    cursor?: DetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Details from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Details.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DetailsScalarFieldEnum>
  }


  /**
   * Details create
   */
  export type DetailsCreateArgs = {
    /**
     * Select specific fields to fetch from the Details
     * 
    **/
    select?: DetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DetailsInclude | null
    /**
     * The data needed to create a Details.
     * 
    **/
    data: XOR<DetailsCreateInput, DetailsUncheckedCreateInput>
  }


  /**
   * Details createMany
   */
  export type DetailsCreateManyArgs = {
    /**
     * The data used to create many Details.
     * 
    **/
    data: Enumerable<DetailsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Details update
   */
  export type DetailsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Details
     * 
    **/
    select?: DetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DetailsInclude | null
    /**
     * The data needed to update a Details.
     * 
    **/
    data: XOR<DetailsUpdateInput, DetailsUncheckedUpdateInput>
    /**
     * Choose, which Details to update.
     * 
    **/
    where: DetailsWhereUniqueInput
  }


  /**
   * Details updateMany
   */
  export type DetailsUpdateManyArgs = {
    /**
     * The data used to update Details.
     * 
    **/
    data: XOR<DetailsUpdateManyMutationInput, DetailsUncheckedUpdateManyInput>
    /**
     * Filter which Details to update
     * 
    **/
    where?: DetailsWhereInput
  }


  /**
   * Details upsert
   */
  export type DetailsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Details
     * 
    **/
    select?: DetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DetailsInclude | null
    /**
     * The filter to search for the Details to update in case it exists.
     * 
    **/
    where: DetailsWhereUniqueInput
    /**
     * In case the Details found by the `where` argument doesn't exist, create a new Details with this data.
     * 
    **/
    create: XOR<DetailsCreateInput, DetailsUncheckedCreateInput>
    /**
     * In case the Details was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<DetailsUpdateInput, DetailsUncheckedUpdateInput>
  }


  /**
   * Details delete
   */
  export type DetailsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Details
     * 
    **/
    select?: DetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DetailsInclude | null
    /**
     * Filter which Details to delete.
     * 
    **/
    where: DetailsWhereUniqueInput
  }


  /**
   * Details deleteMany
   */
  export type DetailsDeleteManyArgs = {
    /**
     * Filter which Details to delete
     * 
    **/
    where?: DetailsWhereInput
  }


  /**
   * Details: findUniqueOrThrow
   */
  export type DetailsFindUniqueOrThrowArgs = DetailsFindUniqueArgsBase
      

  /**
   * Details: findFirstOrThrow
   */
  export type DetailsFindFirstOrThrowArgs = DetailsFindFirstArgsBase
      

  /**
   * Details without action
   */
  export type DetailsArgs = {
    /**
     * Select specific fields to fetch from the Details
     * 
    **/
    select?: DetailsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DetailsInclude | null
  }



  /**
   * Model DetailsOnArea
   */


  export type AggregateDetailsOnArea = {
    _count: DetailsOnAreaCountAggregateOutputType | null
    _avg: DetailsOnAreaAvgAggregateOutputType | null
    _sum: DetailsOnAreaSumAggregateOutputType | null
    _min: DetailsOnAreaMinAggregateOutputType | null
    _max: DetailsOnAreaMaxAggregateOutputType | null
  }

  export type DetailsOnAreaAvgAggregateOutputType = {
    detailsId: number | null
    areaId: number | null
  }

  export type DetailsOnAreaSumAggregateOutputType = {
    detailsId: number | null
    areaId: number | null
  }

  export type DetailsOnAreaMinAggregateOutputType = {
    assignedAt: Date | null
    assignedBy: string | null
    detailsId: number | null
    areaId: number | null
  }

  export type DetailsOnAreaMaxAggregateOutputType = {
    assignedAt: Date | null
    assignedBy: string | null
    detailsId: number | null
    areaId: number | null
  }

  export type DetailsOnAreaCountAggregateOutputType = {
    assignedAt: number
    assignedBy: number
    detailsId: number
    areaId: number
    _all: number
  }


  export type DetailsOnAreaAvgAggregateInputType = {
    detailsId?: true
    areaId?: true
  }

  export type DetailsOnAreaSumAggregateInputType = {
    detailsId?: true
    areaId?: true
  }

  export type DetailsOnAreaMinAggregateInputType = {
    assignedAt?: true
    assignedBy?: true
    detailsId?: true
    areaId?: true
  }

  export type DetailsOnAreaMaxAggregateInputType = {
    assignedAt?: true
    assignedBy?: true
    detailsId?: true
    areaId?: true
  }

  export type DetailsOnAreaCountAggregateInputType = {
    assignedAt?: true
    assignedBy?: true
    detailsId?: true
    areaId?: true
    _all?: true
  }

  export type DetailsOnAreaAggregateArgs = {
    /**
     * Filter which DetailsOnArea to aggregate.
     * 
    **/
    where?: DetailsOnAreaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DetailsOnAreas to fetch.
     * 
    **/
    orderBy?: Enumerable<DetailsOnAreaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: DetailsOnAreaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DetailsOnAreas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DetailsOnAreas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DetailsOnAreas
    **/
    _count?: true | DetailsOnAreaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DetailsOnAreaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DetailsOnAreaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DetailsOnAreaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DetailsOnAreaMaxAggregateInputType
  }

  export type GetDetailsOnAreaAggregateType<T extends DetailsOnAreaAggregateArgs> = {
        [P in keyof T & keyof AggregateDetailsOnArea]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDetailsOnArea[P]>
      : GetScalarType<T[P], AggregateDetailsOnArea[P]>
  }




  export type DetailsOnAreaGroupByArgs = {
    where?: DetailsOnAreaWhereInput
    orderBy?: Enumerable<DetailsOnAreaOrderByWithAggregationInput>
    by: Array<DetailsOnAreaScalarFieldEnum>
    having?: DetailsOnAreaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DetailsOnAreaCountAggregateInputType | true
    _avg?: DetailsOnAreaAvgAggregateInputType
    _sum?: DetailsOnAreaSumAggregateInputType
    _min?: DetailsOnAreaMinAggregateInputType
    _max?: DetailsOnAreaMaxAggregateInputType
  }


  export type DetailsOnAreaGroupByOutputType = {
    assignedAt: Date
    assignedBy: string
    detailsId: number
    areaId: number
    _count: DetailsOnAreaCountAggregateOutputType | null
    _avg: DetailsOnAreaAvgAggregateOutputType | null
    _sum: DetailsOnAreaSumAggregateOutputType | null
    _min: DetailsOnAreaMinAggregateOutputType | null
    _max: DetailsOnAreaMaxAggregateOutputType | null
  }

  type GetDetailsOnAreaGroupByPayload<T extends DetailsOnAreaGroupByArgs> = PrismaPromise<
    Array<
      PickArray<DetailsOnAreaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DetailsOnAreaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DetailsOnAreaGroupByOutputType[P]>
            : GetScalarType<T[P], DetailsOnAreaGroupByOutputType[P]>
        }
      >
    >


  export type DetailsOnAreaSelect = {
    detail?: boolean | DetailsArgs
    area?: boolean | AreaArgs
    assignedAt?: boolean
    assignedBy?: boolean
    detailsId?: boolean
    areaId?: boolean
  }

  export type DetailsOnAreaInclude = {
    detail?: boolean | DetailsArgs
    area?: boolean | AreaArgs
  }

  export type DetailsOnAreaGetPayload<
    S extends boolean | null | undefined | DetailsOnAreaArgs,
    U = keyof S
      > = S extends true
        ? DetailsOnArea
    : S extends undefined
    ? never
    : S extends DetailsOnAreaArgs | DetailsOnAreaFindManyArgs
    ?'include' extends U
    ? DetailsOnArea  & {
    [P in TrueKeys<S['include']>]:
        P extends 'detail' ? DetailsGetPayload<S['include'][P]> :
        P extends 'area' ? AreaGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'detail' ? DetailsGetPayload<S['select'][P]> :
        P extends 'area' ? AreaGetPayload<S['select'][P]> :  P extends keyof DetailsOnArea ? DetailsOnArea[P] : never
  } 
    : DetailsOnArea
  : DetailsOnArea


  type DetailsOnAreaCountArgs = Merge<
    Omit<DetailsOnAreaFindManyArgs, 'select' | 'include'> & {
      select?: DetailsOnAreaCountAggregateInputType | true
    }
  >

  export interface DetailsOnAreaDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one DetailsOnArea that matches the filter.
     * @param {DetailsOnAreaFindUniqueArgs} args - Arguments to find a DetailsOnArea
     * @example
     * // Get one DetailsOnArea
     * const detailsOnArea = await prisma.detailsOnArea.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DetailsOnAreaFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DetailsOnAreaFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'DetailsOnArea'> extends True ? CheckSelect<T, Prisma__DetailsOnAreaClient<DetailsOnArea>, Prisma__DetailsOnAreaClient<DetailsOnAreaGetPayload<T>>> : CheckSelect<T, Prisma__DetailsOnAreaClient<DetailsOnArea | null >, Prisma__DetailsOnAreaClient<DetailsOnAreaGetPayload<T> | null >>

    /**
     * Find the first DetailsOnArea that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailsOnAreaFindFirstArgs} args - Arguments to find a DetailsOnArea
     * @example
     * // Get one DetailsOnArea
     * const detailsOnArea = await prisma.detailsOnArea.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DetailsOnAreaFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DetailsOnAreaFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'DetailsOnArea'> extends True ? CheckSelect<T, Prisma__DetailsOnAreaClient<DetailsOnArea>, Prisma__DetailsOnAreaClient<DetailsOnAreaGetPayload<T>>> : CheckSelect<T, Prisma__DetailsOnAreaClient<DetailsOnArea | null >, Prisma__DetailsOnAreaClient<DetailsOnAreaGetPayload<T> | null >>

    /**
     * Find zero or more DetailsOnAreas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailsOnAreaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DetailsOnAreas
     * const detailsOnAreas = await prisma.detailsOnArea.findMany()
     * 
     * // Get first 10 DetailsOnAreas
     * const detailsOnAreas = await prisma.detailsOnArea.findMany({ take: 10 })
     * 
     * // Only select the `assignedAt`
     * const detailsOnAreaWithAssignedAtOnly = await prisma.detailsOnArea.findMany({ select: { assignedAt: true } })
     * 
    **/
    findMany<T extends DetailsOnAreaFindManyArgs>(
      args?: SelectSubset<T, DetailsOnAreaFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<DetailsOnArea>>, PrismaPromise<Array<DetailsOnAreaGetPayload<T>>>>

    /**
     * Create a DetailsOnArea.
     * @param {DetailsOnAreaCreateArgs} args - Arguments to create a DetailsOnArea.
     * @example
     * // Create one DetailsOnArea
     * const DetailsOnArea = await prisma.detailsOnArea.create({
     *   data: {
     *     // ... data to create a DetailsOnArea
     *   }
     * })
     * 
    **/
    create<T extends DetailsOnAreaCreateArgs>(
      args: SelectSubset<T, DetailsOnAreaCreateArgs>
    ): CheckSelect<T, Prisma__DetailsOnAreaClient<DetailsOnArea>, Prisma__DetailsOnAreaClient<DetailsOnAreaGetPayload<T>>>

    /**
     * Create many DetailsOnAreas.
     *     @param {DetailsOnAreaCreateManyArgs} args - Arguments to create many DetailsOnAreas.
     *     @example
     *     // Create many DetailsOnAreas
     *     const detailsOnArea = await prisma.detailsOnArea.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DetailsOnAreaCreateManyArgs>(
      args?: SelectSubset<T, DetailsOnAreaCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a DetailsOnArea.
     * @param {DetailsOnAreaDeleteArgs} args - Arguments to delete one DetailsOnArea.
     * @example
     * // Delete one DetailsOnArea
     * const DetailsOnArea = await prisma.detailsOnArea.delete({
     *   where: {
     *     // ... filter to delete one DetailsOnArea
     *   }
     * })
     * 
    **/
    delete<T extends DetailsOnAreaDeleteArgs>(
      args: SelectSubset<T, DetailsOnAreaDeleteArgs>
    ): CheckSelect<T, Prisma__DetailsOnAreaClient<DetailsOnArea>, Prisma__DetailsOnAreaClient<DetailsOnAreaGetPayload<T>>>

    /**
     * Update one DetailsOnArea.
     * @param {DetailsOnAreaUpdateArgs} args - Arguments to update one DetailsOnArea.
     * @example
     * // Update one DetailsOnArea
     * const detailsOnArea = await prisma.detailsOnArea.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DetailsOnAreaUpdateArgs>(
      args: SelectSubset<T, DetailsOnAreaUpdateArgs>
    ): CheckSelect<T, Prisma__DetailsOnAreaClient<DetailsOnArea>, Prisma__DetailsOnAreaClient<DetailsOnAreaGetPayload<T>>>

    /**
     * Delete zero or more DetailsOnAreas.
     * @param {DetailsOnAreaDeleteManyArgs} args - Arguments to filter DetailsOnAreas to delete.
     * @example
     * // Delete a few DetailsOnAreas
     * const { count } = await prisma.detailsOnArea.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DetailsOnAreaDeleteManyArgs>(
      args?: SelectSubset<T, DetailsOnAreaDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more DetailsOnAreas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailsOnAreaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DetailsOnAreas
     * const detailsOnArea = await prisma.detailsOnArea.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DetailsOnAreaUpdateManyArgs>(
      args: SelectSubset<T, DetailsOnAreaUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one DetailsOnArea.
     * @param {DetailsOnAreaUpsertArgs} args - Arguments to update or create a DetailsOnArea.
     * @example
     * // Update or create a DetailsOnArea
     * const detailsOnArea = await prisma.detailsOnArea.upsert({
     *   create: {
     *     // ... data to create a DetailsOnArea
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DetailsOnArea we want to update
     *   }
     * })
    **/
    upsert<T extends DetailsOnAreaUpsertArgs>(
      args: SelectSubset<T, DetailsOnAreaUpsertArgs>
    ): CheckSelect<T, Prisma__DetailsOnAreaClient<DetailsOnArea>, Prisma__DetailsOnAreaClient<DetailsOnAreaGetPayload<T>>>

    /**
     * Find one DetailsOnArea that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {DetailsOnAreaFindUniqueOrThrowArgs} args - Arguments to find a DetailsOnArea
     * @example
     * // Get one DetailsOnArea
     * const detailsOnArea = await prisma.detailsOnArea.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DetailsOnAreaFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, DetailsOnAreaFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__DetailsOnAreaClient<DetailsOnArea>, Prisma__DetailsOnAreaClient<DetailsOnAreaGetPayload<T>>>

    /**
     * Find the first DetailsOnArea that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailsOnAreaFindFirstOrThrowArgs} args - Arguments to find a DetailsOnArea
     * @example
     * // Get one DetailsOnArea
     * const detailsOnArea = await prisma.detailsOnArea.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DetailsOnAreaFindFirstOrThrowArgs>(
      args?: SelectSubset<T, DetailsOnAreaFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__DetailsOnAreaClient<DetailsOnArea>, Prisma__DetailsOnAreaClient<DetailsOnAreaGetPayload<T>>>

    /**
     * Count the number of DetailsOnAreas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailsOnAreaCountArgs} args - Arguments to filter DetailsOnAreas to count.
     * @example
     * // Count the number of DetailsOnAreas
     * const count = await prisma.detailsOnArea.count({
     *   where: {
     *     // ... the filter for the DetailsOnAreas we want to count
     *   }
     * })
    **/
    count<T extends DetailsOnAreaCountArgs>(
      args?: Subset<T, DetailsOnAreaCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DetailsOnAreaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DetailsOnArea.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailsOnAreaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DetailsOnAreaAggregateArgs>(args: Subset<T, DetailsOnAreaAggregateArgs>): PrismaPromise<GetDetailsOnAreaAggregateType<T>>

    /**
     * Group by DetailsOnArea.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetailsOnAreaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DetailsOnAreaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DetailsOnAreaGroupByArgs['orderBy'] }
        : { orderBy?: DetailsOnAreaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DetailsOnAreaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDetailsOnAreaGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for DetailsOnArea.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DetailsOnAreaClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    detail<T extends DetailsArgs = {}>(args?: Subset<T, DetailsArgs>): CheckSelect<T, Prisma__DetailsClient<Details | null >, Prisma__DetailsClient<DetailsGetPayload<T> | null >>;

    area<T extends AreaArgs = {}>(args?: Subset<T, AreaArgs>): CheckSelect<T, Prisma__AreaClient<Area | null >, Prisma__AreaClient<AreaGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * DetailsOnArea base type for findUnique actions
   */
  export type DetailsOnAreaFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the DetailsOnArea
     * 
    **/
    select?: DetailsOnAreaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DetailsOnAreaInclude | null
    /**
     * Filter, which DetailsOnArea to fetch.
     * 
    **/
    where: DetailsOnAreaWhereUniqueInput
  }

  /**
   * DetailsOnArea: findUnique
   */
  export interface DetailsOnAreaFindUniqueArgs extends DetailsOnAreaFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * DetailsOnArea base type for findFirst actions
   */
  export type DetailsOnAreaFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the DetailsOnArea
     * 
    **/
    select?: DetailsOnAreaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DetailsOnAreaInclude | null
    /**
     * Filter, which DetailsOnArea to fetch.
     * 
    **/
    where?: DetailsOnAreaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DetailsOnAreas to fetch.
     * 
    **/
    orderBy?: Enumerable<DetailsOnAreaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DetailsOnAreas.
     * 
    **/
    cursor?: DetailsOnAreaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DetailsOnAreas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DetailsOnAreas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DetailsOnAreas.
     * 
    **/
    distinct?: Enumerable<DetailsOnAreaScalarFieldEnum>
  }

  /**
   * DetailsOnArea: findFirst
   */
  export interface DetailsOnAreaFindFirstArgs extends DetailsOnAreaFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * DetailsOnArea findMany
   */
  export type DetailsOnAreaFindManyArgs = {
    /**
     * Select specific fields to fetch from the DetailsOnArea
     * 
    **/
    select?: DetailsOnAreaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DetailsOnAreaInclude | null
    /**
     * Filter, which DetailsOnAreas to fetch.
     * 
    **/
    where?: DetailsOnAreaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DetailsOnAreas to fetch.
     * 
    **/
    orderBy?: Enumerable<DetailsOnAreaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DetailsOnAreas.
     * 
    **/
    cursor?: DetailsOnAreaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DetailsOnAreas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DetailsOnAreas.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DetailsOnAreaScalarFieldEnum>
  }


  /**
   * DetailsOnArea create
   */
  export type DetailsOnAreaCreateArgs = {
    /**
     * Select specific fields to fetch from the DetailsOnArea
     * 
    **/
    select?: DetailsOnAreaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DetailsOnAreaInclude | null
    /**
     * The data needed to create a DetailsOnArea.
     * 
    **/
    data: XOR<DetailsOnAreaCreateInput, DetailsOnAreaUncheckedCreateInput>
  }


  /**
   * DetailsOnArea createMany
   */
  export type DetailsOnAreaCreateManyArgs = {
    /**
     * The data used to create many DetailsOnAreas.
     * 
    **/
    data: Enumerable<DetailsOnAreaCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * DetailsOnArea update
   */
  export type DetailsOnAreaUpdateArgs = {
    /**
     * Select specific fields to fetch from the DetailsOnArea
     * 
    **/
    select?: DetailsOnAreaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DetailsOnAreaInclude | null
    /**
     * The data needed to update a DetailsOnArea.
     * 
    **/
    data: XOR<DetailsOnAreaUpdateInput, DetailsOnAreaUncheckedUpdateInput>
    /**
     * Choose, which DetailsOnArea to update.
     * 
    **/
    where: DetailsOnAreaWhereUniqueInput
  }


  /**
   * DetailsOnArea updateMany
   */
  export type DetailsOnAreaUpdateManyArgs = {
    /**
     * The data used to update DetailsOnAreas.
     * 
    **/
    data: XOR<DetailsOnAreaUpdateManyMutationInput, DetailsOnAreaUncheckedUpdateManyInput>
    /**
     * Filter which DetailsOnAreas to update
     * 
    **/
    where?: DetailsOnAreaWhereInput
  }


  /**
   * DetailsOnArea upsert
   */
  export type DetailsOnAreaUpsertArgs = {
    /**
     * Select specific fields to fetch from the DetailsOnArea
     * 
    **/
    select?: DetailsOnAreaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DetailsOnAreaInclude | null
    /**
     * The filter to search for the DetailsOnArea to update in case it exists.
     * 
    **/
    where: DetailsOnAreaWhereUniqueInput
    /**
     * In case the DetailsOnArea found by the `where` argument doesn't exist, create a new DetailsOnArea with this data.
     * 
    **/
    create: XOR<DetailsOnAreaCreateInput, DetailsOnAreaUncheckedCreateInput>
    /**
     * In case the DetailsOnArea was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<DetailsOnAreaUpdateInput, DetailsOnAreaUncheckedUpdateInput>
  }


  /**
   * DetailsOnArea delete
   */
  export type DetailsOnAreaDeleteArgs = {
    /**
     * Select specific fields to fetch from the DetailsOnArea
     * 
    **/
    select?: DetailsOnAreaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DetailsOnAreaInclude | null
    /**
     * Filter which DetailsOnArea to delete.
     * 
    **/
    where: DetailsOnAreaWhereUniqueInput
  }


  /**
   * DetailsOnArea deleteMany
   */
  export type DetailsOnAreaDeleteManyArgs = {
    /**
     * Filter which DetailsOnAreas to delete
     * 
    **/
    where?: DetailsOnAreaWhereInput
  }


  /**
   * DetailsOnArea: findUniqueOrThrow
   */
  export type DetailsOnAreaFindUniqueOrThrowArgs = DetailsOnAreaFindUniqueArgsBase
      

  /**
   * DetailsOnArea: findFirstOrThrow
   */
  export type DetailsOnAreaFindFirstOrThrowArgs = DetailsOnAreaFindFirstArgsBase
      

  /**
   * DetailsOnArea without action
   */
  export type DetailsOnAreaArgs = {
    /**
     * Select specific fields to fetch from the DetailsOnArea
     * 
    **/
    select?: DetailsOnAreaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DetailsOnAreaInclude | null
  }



  /**
   * Model PetSize
   */


  export type AggregatePetSize = {
    _count: PetSizeCountAggregateOutputType | null
    _avg: PetSizeAvgAggregateOutputType | null
    _sum: PetSizeSumAggregateOutputType | null
    _min: PetSizeMinAggregateOutputType | null
    _max: PetSizeMaxAggregateOutputType | null
  }

  export type PetSizeAvgAggregateOutputType = {
    id: number | null
    detailsId: number | null
  }

  export type PetSizeSumAggregateOutputType = {
    id: number | null
    detailsId: number | null
  }

  export type PetSizeMinAggregateOutputType = {
    id: number | null
    weight: string | null
    detailsId: number | null
  }

  export type PetSizeMaxAggregateOutputType = {
    id: number | null
    weight: string | null
    detailsId: number | null
  }

  export type PetSizeCountAggregateOutputType = {
    id: number
    weight: number
    detailsId: number
    _all: number
  }


  export type PetSizeAvgAggregateInputType = {
    id?: true
    detailsId?: true
  }

  export type PetSizeSumAggregateInputType = {
    id?: true
    detailsId?: true
  }

  export type PetSizeMinAggregateInputType = {
    id?: true
    weight?: true
    detailsId?: true
  }

  export type PetSizeMaxAggregateInputType = {
    id?: true
    weight?: true
    detailsId?: true
  }

  export type PetSizeCountAggregateInputType = {
    id?: true
    weight?: true
    detailsId?: true
    _all?: true
  }

  export type PetSizeAggregateArgs = {
    /**
     * Filter which PetSize to aggregate.
     * 
    **/
    where?: PetSizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PetSizes to fetch.
     * 
    **/
    orderBy?: Enumerable<PetSizeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PetSizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PetSizes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PetSizes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PetSizes
    **/
    _count?: true | PetSizeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PetSizeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PetSizeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PetSizeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PetSizeMaxAggregateInputType
  }

  export type GetPetSizeAggregateType<T extends PetSizeAggregateArgs> = {
        [P in keyof T & keyof AggregatePetSize]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePetSize[P]>
      : GetScalarType<T[P], AggregatePetSize[P]>
  }




  export type PetSizeGroupByArgs = {
    where?: PetSizeWhereInput
    orderBy?: Enumerable<PetSizeOrderByWithAggregationInput>
    by: Array<PetSizeScalarFieldEnum>
    having?: PetSizeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PetSizeCountAggregateInputType | true
    _avg?: PetSizeAvgAggregateInputType
    _sum?: PetSizeSumAggregateInputType
    _min?: PetSizeMinAggregateInputType
    _max?: PetSizeMaxAggregateInputType
  }


  export type PetSizeGroupByOutputType = {
    id: number
    weight: string
    detailsId: number
    _count: PetSizeCountAggregateOutputType | null
    _avg: PetSizeAvgAggregateOutputType | null
    _sum: PetSizeSumAggregateOutputType | null
    _min: PetSizeMinAggregateOutputType | null
    _max: PetSizeMaxAggregateOutputType | null
  }

  type GetPetSizeGroupByPayload<T extends PetSizeGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PetSizeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PetSizeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PetSizeGroupByOutputType[P]>
            : GetScalarType<T[P], PetSizeGroupByOutputType[P]>
        }
      >
    >


  export type PetSizeSelect = {
    id?: boolean
    weight?: boolean
    detail?: boolean | DetailsArgs
    detailsId?: boolean
  }

  export type PetSizeInclude = {
    detail?: boolean | DetailsArgs
  }

  export type PetSizeGetPayload<
    S extends boolean | null | undefined | PetSizeArgs,
    U = keyof S
      > = S extends true
        ? PetSize
    : S extends undefined
    ? never
    : S extends PetSizeArgs | PetSizeFindManyArgs
    ?'include' extends U
    ? PetSize  & {
    [P in TrueKeys<S['include']>]:
        P extends 'detail' ? DetailsGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'detail' ? DetailsGetPayload<S['select'][P]> :  P extends keyof PetSize ? PetSize[P] : never
  } 
    : PetSize
  : PetSize


  type PetSizeCountArgs = Merge<
    Omit<PetSizeFindManyArgs, 'select' | 'include'> & {
      select?: PetSizeCountAggregateInputType | true
    }
  >

  export interface PetSizeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one PetSize that matches the filter.
     * @param {PetSizeFindUniqueArgs} args - Arguments to find a PetSize
     * @example
     * // Get one PetSize
     * const petSize = await prisma.petSize.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PetSizeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PetSizeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'PetSize'> extends True ? CheckSelect<T, Prisma__PetSizeClient<PetSize>, Prisma__PetSizeClient<PetSizeGetPayload<T>>> : CheckSelect<T, Prisma__PetSizeClient<PetSize | null >, Prisma__PetSizeClient<PetSizeGetPayload<T> | null >>

    /**
     * Find the first PetSize that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetSizeFindFirstArgs} args - Arguments to find a PetSize
     * @example
     * // Get one PetSize
     * const petSize = await prisma.petSize.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PetSizeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PetSizeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'PetSize'> extends True ? CheckSelect<T, Prisma__PetSizeClient<PetSize>, Prisma__PetSizeClient<PetSizeGetPayload<T>>> : CheckSelect<T, Prisma__PetSizeClient<PetSize | null >, Prisma__PetSizeClient<PetSizeGetPayload<T> | null >>

    /**
     * Find zero or more PetSizes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetSizeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PetSizes
     * const petSizes = await prisma.petSize.findMany()
     * 
     * // Get first 10 PetSizes
     * const petSizes = await prisma.petSize.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const petSizeWithIdOnly = await prisma.petSize.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PetSizeFindManyArgs>(
      args?: SelectSubset<T, PetSizeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<PetSize>>, PrismaPromise<Array<PetSizeGetPayload<T>>>>

    /**
     * Create a PetSize.
     * @param {PetSizeCreateArgs} args - Arguments to create a PetSize.
     * @example
     * // Create one PetSize
     * const PetSize = await prisma.petSize.create({
     *   data: {
     *     // ... data to create a PetSize
     *   }
     * })
     * 
    **/
    create<T extends PetSizeCreateArgs>(
      args: SelectSubset<T, PetSizeCreateArgs>
    ): CheckSelect<T, Prisma__PetSizeClient<PetSize>, Prisma__PetSizeClient<PetSizeGetPayload<T>>>

    /**
     * Create many PetSizes.
     *     @param {PetSizeCreateManyArgs} args - Arguments to create many PetSizes.
     *     @example
     *     // Create many PetSizes
     *     const petSize = await prisma.petSize.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PetSizeCreateManyArgs>(
      args?: SelectSubset<T, PetSizeCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a PetSize.
     * @param {PetSizeDeleteArgs} args - Arguments to delete one PetSize.
     * @example
     * // Delete one PetSize
     * const PetSize = await prisma.petSize.delete({
     *   where: {
     *     // ... filter to delete one PetSize
     *   }
     * })
     * 
    **/
    delete<T extends PetSizeDeleteArgs>(
      args: SelectSubset<T, PetSizeDeleteArgs>
    ): CheckSelect<T, Prisma__PetSizeClient<PetSize>, Prisma__PetSizeClient<PetSizeGetPayload<T>>>

    /**
     * Update one PetSize.
     * @param {PetSizeUpdateArgs} args - Arguments to update one PetSize.
     * @example
     * // Update one PetSize
     * const petSize = await prisma.petSize.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PetSizeUpdateArgs>(
      args: SelectSubset<T, PetSizeUpdateArgs>
    ): CheckSelect<T, Prisma__PetSizeClient<PetSize>, Prisma__PetSizeClient<PetSizeGetPayload<T>>>

    /**
     * Delete zero or more PetSizes.
     * @param {PetSizeDeleteManyArgs} args - Arguments to filter PetSizes to delete.
     * @example
     * // Delete a few PetSizes
     * const { count } = await prisma.petSize.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PetSizeDeleteManyArgs>(
      args?: SelectSubset<T, PetSizeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more PetSizes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetSizeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PetSizes
     * const petSize = await prisma.petSize.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PetSizeUpdateManyArgs>(
      args: SelectSubset<T, PetSizeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one PetSize.
     * @param {PetSizeUpsertArgs} args - Arguments to update or create a PetSize.
     * @example
     * // Update or create a PetSize
     * const petSize = await prisma.petSize.upsert({
     *   create: {
     *     // ... data to create a PetSize
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PetSize we want to update
     *   }
     * })
    **/
    upsert<T extends PetSizeUpsertArgs>(
      args: SelectSubset<T, PetSizeUpsertArgs>
    ): CheckSelect<T, Prisma__PetSizeClient<PetSize>, Prisma__PetSizeClient<PetSizeGetPayload<T>>>

    /**
     * Find one PetSize that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {PetSizeFindUniqueOrThrowArgs} args - Arguments to find a PetSize
     * @example
     * // Get one PetSize
     * const petSize = await prisma.petSize.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PetSizeFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PetSizeFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__PetSizeClient<PetSize>, Prisma__PetSizeClient<PetSizeGetPayload<T>>>

    /**
     * Find the first PetSize that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetSizeFindFirstOrThrowArgs} args - Arguments to find a PetSize
     * @example
     * // Get one PetSize
     * const petSize = await prisma.petSize.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PetSizeFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PetSizeFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__PetSizeClient<PetSize>, Prisma__PetSizeClient<PetSizeGetPayload<T>>>

    /**
     * Count the number of PetSizes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetSizeCountArgs} args - Arguments to filter PetSizes to count.
     * @example
     * // Count the number of PetSizes
     * const count = await prisma.petSize.count({
     *   where: {
     *     // ... the filter for the PetSizes we want to count
     *   }
     * })
    **/
    count<T extends PetSizeCountArgs>(
      args?: Subset<T, PetSizeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PetSizeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PetSize.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetSizeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PetSizeAggregateArgs>(args: Subset<T, PetSizeAggregateArgs>): PrismaPromise<GetPetSizeAggregateType<T>>

    /**
     * Group by PetSize.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetSizeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PetSizeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PetSizeGroupByArgs['orderBy'] }
        : { orderBy?: PetSizeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PetSizeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPetSizeGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for PetSize.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PetSizeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    detail<T extends DetailsArgs = {}>(args?: Subset<T, DetailsArgs>): CheckSelect<T, Prisma__DetailsClient<Details | null >, Prisma__DetailsClient<DetailsGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * PetSize base type for findUnique actions
   */
  export type PetSizeFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the PetSize
     * 
    **/
    select?: PetSizeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PetSizeInclude | null
    /**
     * Filter, which PetSize to fetch.
     * 
    **/
    where: PetSizeWhereUniqueInput
  }

  /**
   * PetSize: findUnique
   */
  export interface PetSizeFindUniqueArgs extends PetSizeFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PetSize base type for findFirst actions
   */
  export type PetSizeFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the PetSize
     * 
    **/
    select?: PetSizeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PetSizeInclude | null
    /**
     * Filter, which PetSize to fetch.
     * 
    **/
    where?: PetSizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PetSizes to fetch.
     * 
    **/
    orderBy?: Enumerable<PetSizeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PetSizes.
     * 
    **/
    cursor?: PetSizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PetSizes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PetSizes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PetSizes.
     * 
    **/
    distinct?: Enumerable<PetSizeScalarFieldEnum>
  }

  /**
   * PetSize: findFirst
   */
  export interface PetSizeFindFirstArgs extends PetSizeFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PetSize findMany
   */
  export type PetSizeFindManyArgs = {
    /**
     * Select specific fields to fetch from the PetSize
     * 
    **/
    select?: PetSizeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PetSizeInclude | null
    /**
     * Filter, which PetSizes to fetch.
     * 
    **/
    where?: PetSizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PetSizes to fetch.
     * 
    **/
    orderBy?: Enumerable<PetSizeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PetSizes.
     * 
    **/
    cursor?: PetSizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PetSizes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PetSizes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PetSizeScalarFieldEnum>
  }


  /**
   * PetSize create
   */
  export type PetSizeCreateArgs = {
    /**
     * Select specific fields to fetch from the PetSize
     * 
    **/
    select?: PetSizeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PetSizeInclude | null
    /**
     * The data needed to create a PetSize.
     * 
    **/
    data: XOR<PetSizeCreateInput, PetSizeUncheckedCreateInput>
  }


  /**
   * PetSize createMany
   */
  export type PetSizeCreateManyArgs = {
    /**
     * The data used to create many PetSizes.
     * 
    **/
    data: Enumerable<PetSizeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * PetSize update
   */
  export type PetSizeUpdateArgs = {
    /**
     * Select specific fields to fetch from the PetSize
     * 
    **/
    select?: PetSizeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PetSizeInclude | null
    /**
     * The data needed to update a PetSize.
     * 
    **/
    data: XOR<PetSizeUpdateInput, PetSizeUncheckedUpdateInput>
    /**
     * Choose, which PetSize to update.
     * 
    **/
    where: PetSizeWhereUniqueInput
  }


  /**
   * PetSize updateMany
   */
  export type PetSizeUpdateManyArgs = {
    /**
     * The data used to update PetSizes.
     * 
    **/
    data: XOR<PetSizeUpdateManyMutationInput, PetSizeUncheckedUpdateManyInput>
    /**
     * Filter which PetSizes to update
     * 
    **/
    where?: PetSizeWhereInput
  }


  /**
   * PetSize upsert
   */
  export type PetSizeUpsertArgs = {
    /**
     * Select specific fields to fetch from the PetSize
     * 
    **/
    select?: PetSizeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PetSizeInclude | null
    /**
     * The filter to search for the PetSize to update in case it exists.
     * 
    **/
    where: PetSizeWhereUniqueInput
    /**
     * In case the PetSize found by the `where` argument doesn't exist, create a new PetSize with this data.
     * 
    **/
    create: XOR<PetSizeCreateInput, PetSizeUncheckedCreateInput>
    /**
     * In case the PetSize was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PetSizeUpdateInput, PetSizeUncheckedUpdateInput>
  }


  /**
   * PetSize delete
   */
  export type PetSizeDeleteArgs = {
    /**
     * Select specific fields to fetch from the PetSize
     * 
    **/
    select?: PetSizeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PetSizeInclude | null
    /**
     * Filter which PetSize to delete.
     * 
    **/
    where: PetSizeWhereUniqueInput
  }


  /**
   * PetSize deleteMany
   */
  export type PetSizeDeleteManyArgs = {
    /**
     * Filter which PetSizes to delete
     * 
    **/
    where?: PetSizeWhereInput
  }


  /**
   * PetSize: findUniqueOrThrow
   */
  export type PetSizeFindUniqueOrThrowArgs = PetSizeFindUniqueArgsBase
      

  /**
   * PetSize: findFirstOrThrow
   */
  export type PetSizeFindFirstOrThrowArgs = PetSizeFindFirstArgsBase
      

  /**
   * PetSize without action
   */
  export type PetSizeArgs = {
    /**
     * Select specific fields to fetch from the PetSize
     * 
    **/
    select?: PetSizeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PetSizeInclude | null
  }



  /**
   * Model Area
   */


  export type AggregateArea = {
    _count: AreaCountAggregateOutputType | null
    _avg: AreaAvgAggregateOutputType | null
    _sum: AreaSumAggregateOutputType | null
    _min: AreaMinAggregateOutputType | null
    _max: AreaMaxAggregateOutputType | null
  }

  export type AreaAvgAggregateOutputType = {
    id: number | null
  }

  export type AreaSumAggregateOutputType = {
    id: number | null
  }

  export type AreaMinAggregateOutputType = {
    id: number | null
    north: boolean | null
    south: boolean | null
    east: boolean | null
    west: boolean | null
  }

  export type AreaMaxAggregateOutputType = {
    id: number | null
    north: boolean | null
    south: boolean | null
    east: boolean | null
    west: boolean | null
  }

  export type AreaCountAggregateOutputType = {
    id: number
    north: number
    south: number
    east: number
    west: number
    _all: number
  }


  export type AreaAvgAggregateInputType = {
    id?: true
  }

  export type AreaSumAggregateInputType = {
    id?: true
  }

  export type AreaMinAggregateInputType = {
    id?: true
    north?: true
    south?: true
    east?: true
    west?: true
  }

  export type AreaMaxAggregateInputType = {
    id?: true
    north?: true
    south?: true
    east?: true
    west?: true
  }

  export type AreaCountAggregateInputType = {
    id?: true
    north?: true
    south?: true
    east?: true
    west?: true
    _all?: true
  }

  export type AreaAggregateArgs = {
    /**
     * Filter which Area to aggregate.
     * 
    **/
    where?: AreaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Areas to fetch.
     * 
    **/
    orderBy?: Enumerable<AreaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AreaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Areas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Areas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Areas
    **/
    _count?: true | AreaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AreaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AreaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AreaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AreaMaxAggregateInputType
  }

  export type GetAreaAggregateType<T extends AreaAggregateArgs> = {
        [P in keyof T & keyof AggregateArea]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArea[P]>
      : GetScalarType<T[P], AggregateArea[P]>
  }




  export type AreaGroupByArgs = {
    where?: AreaWhereInput
    orderBy?: Enumerable<AreaOrderByWithAggregationInput>
    by: Array<AreaScalarFieldEnum>
    having?: AreaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AreaCountAggregateInputType | true
    _avg?: AreaAvgAggregateInputType
    _sum?: AreaSumAggregateInputType
    _min?: AreaMinAggregateInputType
    _max?: AreaMaxAggregateInputType
  }


  export type AreaGroupByOutputType = {
    id: number
    north: boolean
    south: boolean
    east: boolean
    west: boolean
    _count: AreaCountAggregateOutputType | null
    _avg: AreaAvgAggregateOutputType | null
    _sum: AreaSumAggregateOutputType | null
    _min: AreaMinAggregateOutputType | null
    _max: AreaMaxAggregateOutputType | null
  }

  type GetAreaGroupByPayload<T extends AreaGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AreaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AreaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AreaGroupByOutputType[P]>
            : GetScalarType<T[P], AreaGroupByOutputType[P]>
        }
      >
    >


  export type AreaSelect = {
    id?: boolean
    north?: boolean
    south?: boolean
    east?: boolean
    west?: boolean
    DetailsOnArea?: boolean | DetailsOnAreaFindManyArgs
    _count?: boolean | AreaCountOutputTypeArgs
  }

  export type AreaInclude = {
    DetailsOnArea?: boolean | DetailsOnAreaFindManyArgs
    _count?: boolean | AreaCountOutputTypeArgs
  }

  export type AreaGetPayload<
    S extends boolean | null | undefined | AreaArgs,
    U = keyof S
      > = S extends true
        ? Area
    : S extends undefined
    ? never
    : S extends AreaArgs | AreaFindManyArgs
    ?'include' extends U
    ? Area  & {
    [P in TrueKeys<S['include']>]:
        P extends 'DetailsOnArea' ? Array < DetailsOnAreaGetPayload<S['include'][P]>>  :
        P extends '_count' ? AreaCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'DetailsOnArea' ? Array < DetailsOnAreaGetPayload<S['select'][P]>>  :
        P extends '_count' ? AreaCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Area ? Area[P] : never
  } 
    : Area
  : Area


  type AreaCountArgs = Merge<
    Omit<AreaFindManyArgs, 'select' | 'include'> & {
      select?: AreaCountAggregateInputType | true
    }
  >

  export interface AreaDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Area that matches the filter.
     * @param {AreaFindUniqueArgs} args - Arguments to find a Area
     * @example
     * // Get one Area
     * const area = await prisma.area.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AreaFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AreaFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Area'> extends True ? CheckSelect<T, Prisma__AreaClient<Area>, Prisma__AreaClient<AreaGetPayload<T>>> : CheckSelect<T, Prisma__AreaClient<Area | null >, Prisma__AreaClient<AreaGetPayload<T> | null >>

    /**
     * Find the first Area that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AreaFindFirstArgs} args - Arguments to find a Area
     * @example
     * // Get one Area
     * const area = await prisma.area.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AreaFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AreaFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Area'> extends True ? CheckSelect<T, Prisma__AreaClient<Area>, Prisma__AreaClient<AreaGetPayload<T>>> : CheckSelect<T, Prisma__AreaClient<Area | null >, Prisma__AreaClient<AreaGetPayload<T> | null >>

    /**
     * Find zero or more Areas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AreaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Areas
     * const areas = await prisma.area.findMany()
     * 
     * // Get first 10 Areas
     * const areas = await prisma.area.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const areaWithIdOnly = await prisma.area.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AreaFindManyArgs>(
      args?: SelectSubset<T, AreaFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Area>>, PrismaPromise<Array<AreaGetPayload<T>>>>

    /**
     * Create a Area.
     * @param {AreaCreateArgs} args - Arguments to create a Area.
     * @example
     * // Create one Area
     * const Area = await prisma.area.create({
     *   data: {
     *     // ... data to create a Area
     *   }
     * })
     * 
    **/
    create<T extends AreaCreateArgs>(
      args: SelectSubset<T, AreaCreateArgs>
    ): CheckSelect<T, Prisma__AreaClient<Area>, Prisma__AreaClient<AreaGetPayload<T>>>

    /**
     * Create many Areas.
     *     @param {AreaCreateManyArgs} args - Arguments to create many Areas.
     *     @example
     *     // Create many Areas
     *     const area = await prisma.area.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AreaCreateManyArgs>(
      args?: SelectSubset<T, AreaCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Area.
     * @param {AreaDeleteArgs} args - Arguments to delete one Area.
     * @example
     * // Delete one Area
     * const Area = await prisma.area.delete({
     *   where: {
     *     // ... filter to delete one Area
     *   }
     * })
     * 
    **/
    delete<T extends AreaDeleteArgs>(
      args: SelectSubset<T, AreaDeleteArgs>
    ): CheckSelect<T, Prisma__AreaClient<Area>, Prisma__AreaClient<AreaGetPayload<T>>>

    /**
     * Update one Area.
     * @param {AreaUpdateArgs} args - Arguments to update one Area.
     * @example
     * // Update one Area
     * const area = await prisma.area.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AreaUpdateArgs>(
      args: SelectSubset<T, AreaUpdateArgs>
    ): CheckSelect<T, Prisma__AreaClient<Area>, Prisma__AreaClient<AreaGetPayload<T>>>

    /**
     * Delete zero or more Areas.
     * @param {AreaDeleteManyArgs} args - Arguments to filter Areas to delete.
     * @example
     * // Delete a few Areas
     * const { count } = await prisma.area.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AreaDeleteManyArgs>(
      args?: SelectSubset<T, AreaDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Areas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AreaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Areas
     * const area = await prisma.area.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AreaUpdateManyArgs>(
      args: SelectSubset<T, AreaUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Area.
     * @param {AreaUpsertArgs} args - Arguments to update or create a Area.
     * @example
     * // Update or create a Area
     * const area = await prisma.area.upsert({
     *   create: {
     *     // ... data to create a Area
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Area we want to update
     *   }
     * })
    **/
    upsert<T extends AreaUpsertArgs>(
      args: SelectSubset<T, AreaUpsertArgs>
    ): CheckSelect<T, Prisma__AreaClient<Area>, Prisma__AreaClient<AreaGetPayload<T>>>

    /**
     * Find one Area that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {AreaFindUniqueOrThrowArgs} args - Arguments to find a Area
     * @example
     * // Get one Area
     * const area = await prisma.area.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AreaFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AreaFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__AreaClient<Area>, Prisma__AreaClient<AreaGetPayload<T>>>

    /**
     * Find the first Area that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AreaFindFirstOrThrowArgs} args - Arguments to find a Area
     * @example
     * // Get one Area
     * const area = await prisma.area.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AreaFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AreaFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__AreaClient<Area>, Prisma__AreaClient<AreaGetPayload<T>>>

    /**
     * Count the number of Areas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AreaCountArgs} args - Arguments to filter Areas to count.
     * @example
     * // Count the number of Areas
     * const count = await prisma.area.count({
     *   where: {
     *     // ... the filter for the Areas we want to count
     *   }
     * })
    **/
    count<T extends AreaCountArgs>(
      args?: Subset<T, AreaCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AreaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Area.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AreaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AreaAggregateArgs>(args: Subset<T, AreaAggregateArgs>): PrismaPromise<GetAreaAggregateType<T>>

    /**
     * Group by Area.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AreaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AreaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AreaGroupByArgs['orderBy'] }
        : { orderBy?: AreaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AreaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAreaGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Area.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AreaClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    DetailsOnArea<T extends DetailsOnAreaFindManyArgs = {}>(args?: Subset<T, DetailsOnAreaFindManyArgs>): CheckSelect<T, PrismaPromise<Array<DetailsOnArea>>, PrismaPromise<Array<DetailsOnAreaGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Area base type for findUnique actions
   */
  export type AreaFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Area
     * 
    **/
    select?: AreaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AreaInclude | null
    /**
     * Filter, which Area to fetch.
     * 
    **/
    where: AreaWhereUniqueInput
  }

  /**
   * Area: findUnique
   */
  export interface AreaFindUniqueArgs extends AreaFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Area base type for findFirst actions
   */
  export type AreaFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Area
     * 
    **/
    select?: AreaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AreaInclude | null
    /**
     * Filter, which Area to fetch.
     * 
    **/
    where?: AreaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Areas to fetch.
     * 
    **/
    orderBy?: Enumerable<AreaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Areas.
     * 
    **/
    cursor?: AreaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Areas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Areas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Areas.
     * 
    **/
    distinct?: Enumerable<AreaScalarFieldEnum>
  }

  /**
   * Area: findFirst
   */
  export interface AreaFindFirstArgs extends AreaFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Area findMany
   */
  export type AreaFindManyArgs = {
    /**
     * Select specific fields to fetch from the Area
     * 
    **/
    select?: AreaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AreaInclude | null
    /**
     * Filter, which Areas to fetch.
     * 
    **/
    where?: AreaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Areas to fetch.
     * 
    **/
    orderBy?: Enumerable<AreaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Areas.
     * 
    **/
    cursor?: AreaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Areas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Areas.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AreaScalarFieldEnum>
  }


  /**
   * Area create
   */
  export type AreaCreateArgs = {
    /**
     * Select specific fields to fetch from the Area
     * 
    **/
    select?: AreaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AreaInclude | null
    /**
     * The data needed to create a Area.
     * 
    **/
    data: XOR<AreaCreateInput, AreaUncheckedCreateInput>
  }


  /**
   * Area createMany
   */
  export type AreaCreateManyArgs = {
    /**
     * The data used to create many Areas.
     * 
    **/
    data: Enumerable<AreaCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Area update
   */
  export type AreaUpdateArgs = {
    /**
     * Select specific fields to fetch from the Area
     * 
    **/
    select?: AreaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AreaInclude | null
    /**
     * The data needed to update a Area.
     * 
    **/
    data: XOR<AreaUpdateInput, AreaUncheckedUpdateInput>
    /**
     * Choose, which Area to update.
     * 
    **/
    where: AreaWhereUniqueInput
  }


  /**
   * Area updateMany
   */
  export type AreaUpdateManyArgs = {
    /**
     * The data used to update Areas.
     * 
    **/
    data: XOR<AreaUpdateManyMutationInput, AreaUncheckedUpdateManyInput>
    /**
     * Filter which Areas to update
     * 
    **/
    where?: AreaWhereInput
  }


  /**
   * Area upsert
   */
  export type AreaUpsertArgs = {
    /**
     * Select specific fields to fetch from the Area
     * 
    **/
    select?: AreaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AreaInclude | null
    /**
     * The filter to search for the Area to update in case it exists.
     * 
    **/
    where: AreaWhereUniqueInput
    /**
     * In case the Area found by the `where` argument doesn't exist, create a new Area with this data.
     * 
    **/
    create: XOR<AreaCreateInput, AreaUncheckedCreateInput>
    /**
     * In case the Area was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AreaUpdateInput, AreaUncheckedUpdateInput>
  }


  /**
   * Area delete
   */
  export type AreaDeleteArgs = {
    /**
     * Select specific fields to fetch from the Area
     * 
    **/
    select?: AreaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AreaInclude | null
    /**
     * Filter which Area to delete.
     * 
    **/
    where: AreaWhereUniqueInput
  }


  /**
   * Area deleteMany
   */
  export type AreaDeleteManyArgs = {
    /**
     * Filter which Areas to delete
     * 
    **/
    where?: AreaWhereInput
  }


  /**
   * Area: findUniqueOrThrow
   */
  export type AreaFindUniqueOrThrowArgs = AreaFindUniqueArgsBase
      

  /**
   * Area: findFirstOrThrow
   */
  export type AreaFindFirstOrThrowArgs = AreaFindFirstArgsBase
      

  /**
   * Area without action
   */
  export type AreaArgs = {
    /**
     * Select specific fields to fetch from the Area
     * 
    **/
    select?: AreaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AreaInclude | null
  }



  /**
   * Model Reviews
   */


  export type AggregateReviews = {
    _count: ReviewsCountAggregateOutputType | null
    _avg: ReviewsAvgAggregateOutputType | null
    _sum: ReviewsSumAggregateOutputType | null
    _min: ReviewsMinAggregateOutputType | null
    _max: ReviewsMaxAggregateOutputType | null
  }

  export type ReviewsAvgAggregateOutputType = {
    id: number | null
    paws: number | null
    profileId: number | null
    userProfileId: number | null
  }

  export type ReviewsSumAggregateOutputType = {
    id: number | null
    paws: number | null
    profileId: number | null
    userProfileId: number | null
  }

  export type ReviewsMinAggregateOutputType = {
    id: number | null
    paws: number | null
    comment: string | null
    profileId: number | null
    userProfileId: number | null
  }

  export type ReviewsMaxAggregateOutputType = {
    id: number | null
    paws: number | null
    comment: string | null
    profileId: number | null
    userProfileId: number | null
  }

  export type ReviewsCountAggregateOutputType = {
    id: number
    paws: number
    comment: number
    profileId: number
    userProfileId: number
    _all: number
  }


  export type ReviewsAvgAggregateInputType = {
    id?: true
    paws?: true
    profileId?: true
    userProfileId?: true
  }

  export type ReviewsSumAggregateInputType = {
    id?: true
    paws?: true
    profileId?: true
    userProfileId?: true
  }

  export type ReviewsMinAggregateInputType = {
    id?: true
    paws?: true
    comment?: true
    profileId?: true
    userProfileId?: true
  }

  export type ReviewsMaxAggregateInputType = {
    id?: true
    paws?: true
    comment?: true
    profileId?: true
    userProfileId?: true
  }

  export type ReviewsCountAggregateInputType = {
    id?: true
    paws?: true
    comment?: true
    profileId?: true
    userProfileId?: true
    _all?: true
  }

  export type ReviewsAggregateArgs = {
    /**
     * Filter which Reviews to aggregate.
     * 
    **/
    where?: ReviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     * 
    **/
    orderBy?: Enumerable<ReviewsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ReviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reviews
    **/
    _count?: true | ReviewsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewsMaxAggregateInputType
  }

  export type GetReviewsAggregateType<T extends ReviewsAggregateArgs> = {
        [P in keyof T & keyof AggregateReviews]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReviews[P]>
      : GetScalarType<T[P], AggregateReviews[P]>
  }




  export type ReviewsGroupByArgs = {
    where?: ReviewsWhereInput
    orderBy?: Enumerable<ReviewsOrderByWithAggregationInput>
    by: Array<ReviewsScalarFieldEnum>
    having?: ReviewsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewsCountAggregateInputType | true
    _avg?: ReviewsAvgAggregateInputType
    _sum?: ReviewsSumAggregateInputType
    _min?: ReviewsMinAggregateInputType
    _max?: ReviewsMaxAggregateInputType
  }


  export type ReviewsGroupByOutputType = {
    id: number
    paws: number
    comment: string
    profileId: number
    userProfileId: number
    _count: ReviewsCountAggregateOutputType | null
    _avg: ReviewsAvgAggregateOutputType | null
    _sum: ReviewsSumAggregateOutputType | null
    _min: ReviewsMinAggregateOutputType | null
    _max: ReviewsMaxAggregateOutputType | null
  }

  type GetReviewsGroupByPayload<T extends ReviewsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ReviewsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewsGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewsGroupByOutputType[P]>
        }
      >
    >


  export type ReviewsSelect = {
    id?: boolean
    paws?: boolean
    comment?: boolean
    profile?: boolean | ProfileArgs
    userProfile?: boolean | UserProfileArgs
    profileId?: boolean
    userProfileId?: boolean
  }

  export type ReviewsInclude = {
    profile?: boolean | ProfileArgs
    userProfile?: boolean | UserProfileArgs
  }

  export type ReviewsGetPayload<
    S extends boolean | null | undefined | ReviewsArgs,
    U = keyof S
      > = S extends true
        ? Reviews
    : S extends undefined
    ? never
    : S extends ReviewsArgs | ReviewsFindManyArgs
    ?'include' extends U
    ? Reviews  & {
    [P in TrueKeys<S['include']>]:
        P extends 'profile' ? ProfileGetPayload<S['include'][P]> :
        P extends 'userProfile' ? UserProfileGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'profile' ? ProfileGetPayload<S['select'][P]> :
        P extends 'userProfile' ? UserProfileGetPayload<S['select'][P]> :  P extends keyof Reviews ? Reviews[P] : never
  } 
    : Reviews
  : Reviews


  type ReviewsCountArgs = Merge<
    Omit<ReviewsFindManyArgs, 'select' | 'include'> & {
      select?: ReviewsCountAggregateInputType | true
    }
  >

  export interface ReviewsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Reviews that matches the filter.
     * @param {ReviewsFindUniqueArgs} args - Arguments to find a Reviews
     * @example
     * // Get one Reviews
     * const reviews = await prisma.reviews.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReviewsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ReviewsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Reviews'> extends True ? CheckSelect<T, Prisma__ReviewsClient<Reviews>, Prisma__ReviewsClient<ReviewsGetPayload<T>>> : CheckSelect<T, Prisma__ReviewsClient<Reviews | null >, Prisma__ReviewsClient<ReviewsGetPayload<T> | null >>

    /**
     * Find the first Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewsFindFirstArgs} args - Arguments to find a Reviews
     * @example
     * // Get one Reviews
     * const reviews = await prisma.reviews.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReviewsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ReviewsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Reviews'> extends True ? CheckSelect<T, Prisma__ReviewsClient<Reviews>, Prisma__ReviewsClient<ReviewsGetPayload<T>>> : CheckSelect<T, Prisma__ReviewsClient<Reviews | null >, Prisma__ReviewsClient<ReviewsGetPayload<T> | null >>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.reviews.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.reviews.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewsWithIdOnly = await prisma.reviews.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReviewsFindManyArgs>(
      args?: SelectSubset<T, ReviewsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Reviews>>, PrismaPromise<Array<ReviewsGetPayload<T>>>>

    /**
     * Create a Reviews.
     * @param {ReviewsCreateArgs} args - Arguments to create a Reviews.
     * @example
     * // Create one Reviews
     * const Reviews = await prisma.reviews.create({
     *   data: {
     *     // ... data to create a Reviews
     *   }
     * })
     * 
    **/
    create<T extends ReviewsCreateArgs>(
      args: SelectSubset<T, ReviewsCreateArgs>
    ): CheckSelect<T, Prisma__ReviewsClient<Reviews>, Prisma__ReviewsClient<ReviewsGetPayload<T>>>

    /**
     * Create many Reviews.
     *     @param {ReviewsCreateManyArgs} args - Arguments to create many Reviews.
     *     @example
     *     // Create many Reviews
     *     const reviews = await prisma.reviews.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReviewsCreateManyArgs>(
      args?: SelectSubset<T, ReviewsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Reviews.
     * @param {ReviewsDeleteArgs} args - Arguments to delete one Reviews.
     * @example
     * // Delete one Reviews
     * const Reviews = await prisma.reviews.delete({
     *   where: {
     *     // ... filter to delete one Reviews
     *   }
     * })
     * 
    **/
    delete<T extends ReviewsDeleteArgs>(
      args: SelectSubset<T, ReviewsDeleteArgs>
    ): CheckSelect<T, Prisma__ReviewsClient<Reviews>, Prisma__ReviewsClient<ReviewsGetPayload<T>>>

    /**
     * Update one Reviews.
     * @param {ReviewsUpdateArgs} args - Arguments to update one Reviews.
     * @example
     * // Update one Reviews
     * const reviews = await prisma.reviews.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReviewsUpdateArgs>(
      args: SelectSubset<T, ReviewsUpdateArgs>
    ): CheckSelect<T, Prisma__ReviewsClient<Reviews>, Prisma__ReviewsClient<ReviewsGetPayload<T>>>

    /**
     * Delete zero or more Reviews.
     * @param {ReviewsDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.reviews.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReviewsDeleteManyArgs>(
      args?: SelectSubset<T, ReviewsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const reviews = await prisma.reviews.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReviewsUpdateManyArgs>(
      args: SelectSubset<T, ReviewsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Reviews.
     * @param {ReviewsUpsertArgs} args - Arguments to update or create a Reviews.
     * @example
     * // Update or create a Reviews
     * const reviews = await prisma.reviews.upsert({
     *   create: {
     *     // ... data to create a Reviews
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reviews we want to update
     *   }
     * })
    **/
    upsert<T extends ReviewsUpsertArgs>(
      args: SelectSubset<T, ReviewsUpsertArgs>
    ): CheckSelect<T, Prisma__ReviewsClient<Reviews>, Prisma__ReviewsClient<ReviewsGetPayload<T>>>

    /**
     * Find one Reviews that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ReviewsFindUniqueOrThrowArgs} args - Arguments to find a Reviews
     * @example
     * // Get one Reviews
     * const reviews = await prisma.reviews.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReviewsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ReviewsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__ReviewsClient<Reviews>, Prisma__ReviewsClient<ReviewsGetPayload<T>>>

    /**
     * Find the first Reviews that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewsFindFirstOrThrowArgs} args - Arguments to find a Reviews
     * @example
     * // Get one Reviews
     * const reviews = await prisma.reviews.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReviewsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ReviewsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__ReviewsClient<Reviews>, Prisma__ReviewsClient<ReviewsGetPayload<T>>>

    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewsCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.reviews.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends ReviewsCountArgs>(
      args?: Subset<T, ReviewsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewsAggregateArgs>(args: Subset<T, ReviewsAggregateArgs>): PrismaPromise<GetReviewsAggregateType<T>>

    /**
     * Group by Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewsGroupByArgs['orderBy'] }
        : { orderBy?: ReviewsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reviews.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ReviewsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    profile<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>;

    userProfile<T extends UserProfileArgs = {}>(args?: Subset<T, UserProfileArgs>): CheckSelect<T, Prisma__UserProfileClient<UserProfile | null >, Prisma__UserProfileClient<UserProfileGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Reviews base type for findUnique actions
   */
  export type ReviewsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Reviews
     * 
    **/
    select?: ReviewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReviewsInclude | null
    /**
     * Filter, which Reviews to fetch.
     * 
    **/
    where: ReviewsWhereUniqueInput
  }

  /**
   * Reviews: findUnique
   */
  export interface ReviewsFindUniqueArgs extends ReviewsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Reviews base type for findFirst actions
   */
  export type ReviewsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Reviews
     * 
    **/
    select?: ReviewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReviewsInclude | null
    /**
     * Filter, which Reviews to fetch.
     * 
    **/
    where?: ReviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     * 
    **/
    orderBy?: Enumerable<ReviewsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     * 
    **/
    cursor?: ReviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     * 
    **/
    distinct?: Enumerable<ReviewsScalarFieldEnum>
  }

  /**
   * Reviews: findFirst
   */
  export interface ReviewsFindFirstArgs extends ReviewsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Reviews findMany
   */
  export type ReviewsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Reviews
     * 
    **/
    select?: ReviewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReviewsInclude | null
    /**
     * Filter, which Reviews to fetch.
     * 
    **/
    where?: ReviewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     * 
    **/
    orderBy?: Enumerable<ReviewsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reviews.
     * 
    **/
    cursor?: ReviewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ReviewsScalarFieldEnum>
  }


  /**
   * Reviews create
   */
  export type ReviewsCreateArgs = {
    /**
     * Select specific fields to fetch from the Reviews
     * 
    **/
    select?: ReviewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReviewsInclude | null
    /**
     * The data needed to create a Reviews.
     * 
    **/
    data: XOR<ReviewsCreateInput, ReviewsUncheckedCreateInput>
  }


  /**
   * Reviews createMany
   */
  export type ReviewsCreateManyArgs = {
    /**
     * The data used to create many Reviews.
     * 
    **/
    data: Enumerable<ReviewsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Reviews update
   */
  export type ReviewsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Reviews
     * 
    **/
    select?: ReviewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReviewsInclude | null
    /**
     * The data needed to update a Reviews.
     * 
    **/
    data: XOR<ReviewsUpdateInput, ReviewsUncheckedUpdateInput>
    /**
     * Choose, which Reviews to update.
     * 
    **/
    where: ReviewsWhereUniqueInput
  }


  /**
   * Reviews updateMany
   */
  export type ReviewsUpdateManyArgs = {
    /**
     * The data used to update Reviews.
     * 
    **/
    data: XOR<ReviewsUpdateManyMutationInput, ReviewsUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     * 
    **/
    where?: ReviewsWhereInput
  }


  /**
   * Reviews upsert
   */
  export type ReviewsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Reviews
     * 
    **/
    select?: ReviewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReviewsInclude | null
    /**
     * The filter to search for the Reviews to update in case it exists.
     * 
    **/
    where: ReviewsWhereUniqueInput
    /**
     * In case the Reviews found by the `where` argument doesn't exist, create a new Reviews with this data.
     * 
    **/
    create: XOR<ReviewsCreateInput, ReviewsUncheckedCreateInput>
    /**
     * In case the Reviews was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ReviewsUpdateInput, ReviewsUncheckedUpdateInput>
  }


  /**
   * Reviews delete
   */
  export type ReviewsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Reviews
     * 
    **/
    select?: ReviewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReviewsInclude | null
    /**
     * Filter which Reviews to delete.
     * 
    **/
    where: ReviewsWhereUniqueInput
  }


  /**
   * Reviews deleteMany
   */
  export type ReviewsDeleteManyArgs = {
    /**
     * Filter which Reviews to delete
     * 
    **/
    where?: ReviewsWhereInput
  }


  /**
   * Reviews: findUniqueOrThrow
   */
  export type ReviewsFindUniqueOrThrowArgs = ReviewsFindUniqueArgsBase
      

  /**
   * Reviews: findFirstOrThrow
   */
  export type ReviewsFindFirstOrThrowArgs = ReviewsFindFirstArgsBase
      

  /**
   * Reviews without action
   */
  export type ReviewsArgs = {
    /**
     * Select specific fields to fetch from the Reviews
     * 
    **/
    select?: ReviewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReviewsInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    email: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    email?: boolean
    profile?: boolean | UserProfileArgs
  }

  export type UserInclude = {
    profile?: boolean | UserProfileArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'profile' ? UserProfileGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'profile' ? UserProfileGetPayload<S['select'][P]> | null :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find one User that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    profile<T extends UserProfileArgs = {}>(args?: Subset<T, UserProfileArgs>): CheckSelect<T, Prisma__UserProfileClient<UserProfile | null >, Prisma__UserProfileClient<UserProfileGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }

  /**
   * User: findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User: findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User: findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = UserFindUniqueArgsBase
      

  /**
   * User: findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = UserFindFirstArgsBase
      

  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model UserProfile
   */


  export type AggregateUserProfile = {
    _count: UserProfileCountAggregateOutputType | null
    _avg: UserProfileAvgAggregateOutputType | null
    _sum: UserProfileSumAggregateOutputType | null
    _min: UserProfileMinAggregateOutputType | null
    _max: UserProfileMaxAggregateOutputType | null
  }

  export type UserProfileAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserProfileSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserProfileMinAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    description: string | null
    image: string | null
    userId: number | null
  }

  export type UserProfileMaxAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    description: string | null
    image: string | null
    userId: number | null
  }

  export type UserProfileCountAggregateOutputType = {
    id: number
    name: number
    address: number
    description: number
    image: number
    userId: number
    _all: number
  }


  export type UserProfileAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserProfileSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserProfileMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    description?: true
    image?: true
    userId?: true
  }

  export type UserProfileMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    description?: true
    image?: true
    userId?: true
  }

  export type UserProfileCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    description?: true
    image?: true
    userId?: true
    _all?: true
  }

  export type UserProfileAggregateArgs = {
    /**
     * Filter which UserProfile to aggregate.
     * 
    **/
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     * 
    **/
    orderBy?: Enumerable<UserProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserProfiles
    **/
    _count?: true | UserProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserProfileMaxAggregateInputType
  }

  export type GetUserProfileAggregateType<T extends UserProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateUserProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserProfile[P]>
      : GetScalarType<T[P], AggregateUserProfile[P]>
  }




  export type UserProfileGroupByArgs = {
    where?: UserProfileWhereInput
    orderBy?: Enumerable<UserProfileOrderByWithAggregationInput>
    by: Array<UserProfileScalarFieldEnum>
    having?: UserProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserProfileCountAggregateInputType | true
    _avg?: UserProfileAvgAggregateInputType
    _sum?: UserProfileSumAggregateInputType
    _min?: UserProfileMinAggregateInputType
    _max?: UserProfileMaxAggregateInputType
  }


  export type UserProfileGroupByOutputType = {
    id: number
    name: string
    address: string
    description: string
    image: string
    userId: number
    _count: UserProfileCountAggregateOutputType | null
    _avg: UserProfileAvgAggregateOutputType | null
    _sum: UserProfileSumAggregateOutputType | null
    _min: UserProfileMinAggregateOutputType | null
    _max: UserProfileMaxAggregateOutputType | null
  }

  type GetUserProfileGroupByPayload<T extends UserProfileGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserProfileGroupByOutputType[P]>
            : GetScalarType<T[P], UserProfileGroupByOutputType[P]>
        }
      >
    >


  export type UserProfileSelect = {
    id?: boolean
    user?: boolean | UserArgs
    name?: boolean
    address?: boolean
    description?: boolean
    pets?: boolean | PetsFindManyArgs
    image?: boolean
    booking?: boolean | BookingFindManyArgs
    reviews?: boolean | ReviewsFindManyArgs
    userId?: boolean
    _count?: boolean | UserProfileCountOutputTypeArgs
  }

  export type UserProfileInclude = {
    user?: boolean | UserArgs
    pets?: boolean | PetsFindManyArgs
    booking?: boolean | BookingFindManyArgs
    reviews?: boolean | ReviewsFindManyArgs
    _count?: boolean | UserProfileCountOutputTypeArgs
  }

  export type UserProfileGetPayload<
    S extends boolean | null | undefined | UserProfileArgs,
    U = keyof S
      > = S extends true
        ? UserProfile
    : S extends undefined
    ? never
    : S extends UserProfileArgs | UserProfileFindManyArgs
    ?'include' extends U
    ? UserProfile  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'pets' ? Array < PetsGetPayload<S['include'][P]>>  :
        P extends 'booking' ? Array < BookingGetPayload<S['include'][P]>>  :
        P extends 'reviews' ? Array < ReviewsGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserProfileCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'pets' ? Array < PetsGetPayload<S['select'][P]>>  :
        P extends 'booking' ? Array < BookingGetPayload<S['select'][P]>>  :
        P extends 'reviews' ? Array < ReviewsGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserProfileCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof UserProfile ? UserProfile[P] : never
  } 
    : UserProfile
  : UserProfile


  type UserProfileCountArgs = Merge<
    Omit<UserProfileFindManyArgs, 'select' | 'include'> & {
      select?: UserProfileCountAggregateInputType | true
    }
  >

  export interface UserProfileDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one UserProfile that matches the filter.
     * @param {UserProfileFindUniqueArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserProfileFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserProfileFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserProfile'> extends True ? CheckSelect<T, Prisma__UserProfileClient<UserProfile>, Prisma__UserProfileClient<UserProfileGetPayload<T>>> : CheckSelect<T, Prisma__UserProfileClient<UserProfile | null >, Prisma__UserProfileClient<UserProfileGetPayload<T> | null >>

    /**
     * Find the first UserProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindFirstArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserProfileFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserProfileFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserProfile'> extends True ? CheckSelect<T, Prisma__UserProfileClient<UserProfile>, Prisma__UserProfileClient<UserProfileGetPayload<T>>> : CheckSelect<T, Prisma__UserProfileClient<UserProfile | null >, Prisma__UserProfileClient<UserProfileGetPayload<T> | null >>

    /**
     * Find zero or more UserProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserProfiles
     * const userProfiles = await prisma.userProfile.findMany()
     * 
     * // Get first 10 UserProfiles
     * const userProfiles = await prisma.userProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userProfileWithIdOnly = await prisma.userProfile.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserProfileFindManyArgs>(
      args?: SelectSubset<T, UserProfileFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<UserProfile>>, PrismaPromise<Array<UserProfileGetPayload<T>>>>

    /**
     * Create a UserProfile.
     * @param {UserProfileCreateArgs} args - Arguments to create a UserProfile.
     * @example
     * // Create one UserProfile
     * const UserProfile = await prisma.userProfile.create({
     *   data: {
     *     // ... data to create a UserProfile
     *   }
     * })
     * 
    **/
    create<T extends UserProfileCreateArgs>(
      args: SelectSubset<T, UserProfileCreateArgs>
    ): CheckSelect<T, Prisma__UserProfileClient<UserProfile>, Prisma__UserProfileClient<UserProfileGetPayload<T>>>

    /**
     * Create many UserProfiles.
     *     @param {UserProfileCreateManyArgs} args - Arguments to create many UserProfiles.
     *     @example
     *     // Create many UserProfiles
     *     const userProfile = await prisma.userProfile.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserProfileCreateManyArgs>(
      args?: SelectSubset<T, UserProfileCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a UserProfile.
     * @param {UserProfileDeleteArgs} args - Arguments to delete one UserProfile.
     * @example
     * // Delete one UserProfile
     * const UserProfile = await prisma.userProfile.delete({
     *   where: {
     *     // ... filter to delete one UserProfile
     *   }
     * })
     * 
    **/
    delete<T extends UserProfileDeleteArgs>(
      args: SelectSubset<T, UserProfileDeleteArgs>
    ): CheckSelect<T, Prisma__UserProfileClient<UserProfile>, Prisma__UserProfileClient<UserProfileGetPayload<T>>>

    /**
     * Update one UserProfile.
     * @param {UserProfileUpdateArgs} args - Arguments to update one UserProfile.
     * @example
     * // Update one UserProfile
     * const userProfile = await prisma.userProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserProfileUpdateArgs>(
      args: SelectSubset<T, UserProfileUpdateArgs>
    ): CheckSelect<T, Prisma__UserProfileClient<UserProfile>, Prisma__UserProfileClient<UserProfileGetPayload<T>>>

    /**
     * Delete zero or more UserProfiles.
     * @param {UserProfileDeleteManyArgs} args - Arguments to filter UserProfiles to delete.
     * @example
     * // Delete a few UserProfiles
     * const { count } = await prisma.userProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserProfileDeleteManyArgs>(
      args?: SelectSubset<T, UserProfileDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserProfiles
     * const userProfile = await prisma.userProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserProfileUpdateManyArgs>(
      args: SelectSubset<T, UserProfileUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserProfile.
     * @param {UserProfileUpsertArgs} args - Arguments to update or create a UserProfile.
     * @example
     * // Update or create a UserProfile
     * const userProfile = await prisma.userProfile.upsert({
     *   create: {
     *     // ... data to create a UserProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserProfile we want to update
     *   }
     * })
    **/
    upsert<T extends UserProfileUpsertArgs>(
      args: SelectSubset<T, UserProfileUpsertArgs>
    ): CheckSelect<T, Prisma__UserProfileClient<UserProfile>, Prisma__UserProfileClient<UserProfileGetPayload<T>>>

    /**
     * Find one UserProfile that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserProfileFindUniqueOrThrowArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserProfileFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserProfileFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__UserProfileClient<UserProfile>, Prisma__UserProfileClient<UserProfileGetPayload<T>>>

    /**
     * Find the first UserProfile that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindFirstOrThrowArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserProfileFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserProfileFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__UserProfileClient<UserProfile>, Prisma__UserProfileClient<UserProfileGetPayload<T>>>

    /**
     * Count the number of UserProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileCountArgs} args - Arguments to filter UserProfiles to count.
     * @example
     * // Count the number of UserProfiles
     * const count = await prisma.userProfile.count({
     *   where: {
     *     // ... the filter for the UserProfiles we want to count
     *   }
     * })
    **/
    count<T extends UserProfileCountArgs>(
      args?: Subset<T, UserProfileCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserProfileAggregateArgs>(args: Subset<T, UserProfileAggregateArgs>): PrismaPromise<GetUserProfileAggregateType<T>>

    /**
     * Group by UserProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserProfileGroupByArgs['orderBy'] }
        : { orderBy?: UserProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserProfileGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserProfileClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    pets<T extends PetsFindManyArgs = {}>(args?: Subset<T, PetsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Pets>>, PrismaPromise<Array<PetsGetPayload<T>>>>;

    booking<T extends BookingFindManyArgs = {}>(args?: Subset<T, BookingFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Booking>>, PrismaPromise<Array<BookingGetPayload<T>>>>;

    reviews<T extends ReviewsFindManyArgs = {}>(args?: Subset<T, ReviewsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Reviews>>, PrismaPromise<Array<ReviewsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * UserProfile base type for findUnique actions
   */
  export type UserProfileFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the UserProfile
     * 
    **/
    select?: UserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserProfileInclude | null
    /**
     * Filter, which UserProfile to fetch.
     * 
    **/
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile: findUnique
   */
  export interface UserProfileFindUniqueArgs extends UserProfileFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserProfile base type for findFirst actions
   */
  export type UserProfileFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the UserProfile
     * 
    **/
    select?: UserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserProfileInclude | null
    /**
     * Filter, which UserProfile to fetch.
     * 
    **/
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     * 
    **/
    orderBy?: Enumerable<UserProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProfiles.
     * 
    **/
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProfiles.
     * 
    **/
    distinct?: Enumerable<UserProfileScalarFieldEnum>
  }

  /**
   * UserProfile: findFirst
   */
  export interface UserProfileFindFirstArgs extends UserProfileFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserProfile findMany
   */
  export type UserProfileFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserProfile
     * 
    **/
    select?: UserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserProfileInclude | null
    /**
     * Filter, which UserProfiles to fetch.
     * 
    **/
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     * 
    **/
    orderBy?: Enumerable<UserProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserProfiles.
     * 
    **/
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserProfileScalarFieldEnum>
  }


  /**
   * UserProfile create
   */
  export type UserProfileCreateArgs = {
    /**
     * Select specific fields to fetch from the UserProfile
     * 
    **/
    select?: UserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserProfileInclude | null
    /**
     * The data needed to create a UserProfile.
     * 
    **/
    data: XOR<UserProfileCreateInput, UserProfileUncheckedCreateInput>
  }


  /**
   * UserProfile createMany
   */
  export type UserProfileCreateManyArgs = {
    /**
     * The data used to create many UserProfiles.
     * 
    **/
    data: Enumerable<UserProfileCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserProfile update
   */
  export type UserProfileUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserProfile
     * 
    **/
    select?: UserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserProfileInclude | null
    /**
     * The data needed to update a UserProfile.
     * 
    **/
    data: XOR<UserProfileUpdateInput, UserProfileUncheckedUpdateInput>
    /**
     * Choose, which UserProfile to update.
     * 
    **/
    where: UserProfileWhereUniqueInput
  }


  /**
   * UserProfile updateMany
   */
  export type UserProfileUpdateManyArgs = {
    /**
     * The data used to update UserProfiles.
     * 
    **/
    data: XOR<UserProfileUpdateManyMutationInput, UserProfileUncheckedUpdateManyInput>
    /**
     * Filter which UserProfiles to update
     * 
    **/
    where?: UserProfileWhereInput
  }


  /**
   * UserProfile upsert
   */
  export type UserProfileUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserProfile
     * 
    **/
    select?: UserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserProfileInclude | null
    /**
     * The filter to search for the UserProfile to update in case it exists.
     * 
    **/
    where: UserProfileWhereUniqueInput
    /**
     * In case the UserProfile found by the `where` argument doesn't exist, create a new UserProfile with this data.
     * 
    **/
    create: XOR<UserProfileCreateInput, UserProfileUncheckedCreateInput>
    /**
     * In case the UserProfile was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserProfileUpdateInput, UserProfileUncheckedUpdateInput>
  }


  /**
   * UserProfile delete
   */
  export type UserProfileDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserProfile
     * 
    **/
    select?: UserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserProfileInclude | null
    /**
     * Filter which UserProfile to delete.
     * 
    **/
    where: UserProfileWhereUniqueInput
  }


  /**
   * UserProfile deleteMany
   */
  export type UserProfileDeleteManyArgs = {
    /**
     * Filter which UserProfiles to delete
     * 
    **/
    where?: UserProfileWhereInput
  }


  /**
   * UserProfile: findUniqueOrThrow
   */
  export type UserProfileFindUniqueOrThrowArgs = UserProfileFindUniqueArgsBase
      

  /**
   * UserProfile: findFirstOrThrow
   */
  export type UserProfileFindFirstOrThrowArgs = UserProfileFindFirstArgsBase
      

  /**
   * UserProfile without action
   */
  export type UserProfileArgs = {
    /**
     * Select specific fields to fetch from the UserProfile
     * 
    **/
    select?: UserProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserProfileInclude | null
  }



  /**
   * Model Pets
   */


  export type AggregatePets = {
    _count: PetsCountAggregateOutputType | null
    _avg: PetsAvgAggregateOutputType | null
    _sum: PetsSumAggregateOutputType | null
    _min: PetsMinAggregateOutputType | null
    _max: PetsMaxAggregateOutputType | null
  }

  export type PetsAvgAggregateOutputType = {
    id: number | null
    userProfileId: number | null
  }

  export type PetsSumAggregateOutputType = {
    id: number | null
    userProfileId: number | null
  }

  export type PetsMinAggregateOutputType = {
    id: number | null
    name: string | null
    type: string | null
    breed: string | null
    birth: Date | null
    image: string | null
    sterilized: boolean | null
    userProfileId: number | null
  }

  export type PetsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    type: string | null
    breed: string | null
    birth: Date | null
    image: string | null
    sterilized: boolean | null
    userProfileId: number | null
  }

  export type PetsCountAggregateOutputType = {
    id: number
    name: number
    type: number
    breed: number
    birth: number
    image: number
    sterilized: number
    userProfileId: number
    _all: number
  }


  export type PetsAvgAggregateInputType = {
    id?: true
    userProfileId?: true
  }

  export type PetsSumAggregateInputType = {
    id?: true
    userProfileId?: true
  }

  export type PetsMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    breed?: true
    birth?: true
    image?: true
    sterilized?: true
    userProfileId?: true
  }

  export type PetsMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    breed?: true
    birth?: true
    image?: true
    sterilized?: true
    userProfileId?: true
  }

  export type PetsCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    breed?: true
    birth?: true
    image?: true
    sterilized?: true
    userProfileId?: true
    _all?: true
  }

  export type PetsAggregateArgs = {
    /**
     * Filter which Pets to aggregate.
     * 
    **/
    where?: PetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pets to fetch.
     * 
    **/
    orderBy?: Enumerable<PetsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pets.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pets
    **/
    _count?: true | PetsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PetsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PetsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PetsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PetsMaxAggregateInputType
  }

  export type GetPetsAggregateType<T extends PetsAggregateArgs> = {
        [P in keyof T & keyof AggregatePets]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePets[P]>
      : GetScalarType<T[P], AggregatePets[P]>
  }




  export type PetsGroupByArgs = {
    where?: PetsWhereInput
    orderBy?: Enumerable<PetsOrderByWithAggregationInput>
    by: Array<PetsScalarFieldEnum>
    having?: PetsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PetsCountAggregateInputType | true
    _avg?: PetsAvgAggregateInputType
    _sum?: PetsSumAggregateInputType
    _min?: PetsMinAggregateInputType
    _max?: PetsMaxAggregateInputType
  }


  export type PetsGroupByOutputType = {
    id: number
    name: string
    type: string
    breed: string
    birth: Date
    image: string
    sterilized: boolean
    userProfileId: number
    _count: PetsCountAggregateOutputType | null
    _avg: PetsAvgAggregateOutputType | null
    _sum: PetsSumAggregateOutputType | null
    _min: PetsMinAggregateOutputType | null
    _max: PetsMaxAggregateOutputType | null
  }

  type GetPetsGroupByPayload<T extends PetsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PetsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PetsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PetsGroupByOutputType[P]>
            : GetScalarType<T[P], PetsGroupByOutputType[P]>
        }
      >
    >


  export type PetsSelect = {
    id?: boolean
    name?: boolean
    type?: boolean
    breed?: boolean
    birth?: boolean
    image?: boolean
    sterilized?: boolean
    owner?: boolean | UserProfileArgs
    userProfileId?: boolean
  }

  export type PetsInclude = {
    owner?: boolean | UserProfileArgs
  }

  export type PetsGetPayload<
    S extends boolean | null | undefined | PetsArgs,
    U = keyof S
      > = S extends true
        ? Pets
    : S extends undefined
    ? never
    : S extends PetsArgs | PetsFindManyArgs
    ?'include' extends U
    ? Pets  & {
    [P in TrueKeys<S['include']>]:
        P extends 'owner' ? UserProfileGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'owner' ? UserProfileGetPayload<S['select'][P]> :  P extends keyof Pets ? Pets[P] : never
  } 
    : Pets
  : Pets


  type PetsCountArgs = Merge<
    Omit<PetsFindManyArgs, 'select' | 'include'> & {
      select?: PetsCountAggregateInputType | true
    }
  >

  export interface PetsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Pets that matches the filter.
     * @param {PetsFindUniqueArgs} args - Arguments to find a Pets
     * @example
     * // Get one Pets
     * const pets = await prisma.pets.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PetsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PetsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Pets'> extends True ? CheckSelect<T, Prisma__PetsClient<Pets>, Prisma__PetsClient<PetsGetPayload<T>>> : CheckSelect<T, Prisma__PetsClient<Pets | null >, Prisma__PetsClient<PetsGetPayload<T> | null >>

    /**
     * Find the first Pets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetsFindFirstArgs} args - Arguments to find a Pets
     * @example
     * // Get one Pets
     * const pets = await prisma.pets.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PetsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PetsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Pets'> extends True ? CheckSelect<T, Prisma__PetsClient<Pets>, Prisma__PetsClient<PetsGetPayload<T>>> : CheckSelect<T, Prisma__PetsClient<Pets | null >, Prisma__PetsClient<PetsGetPayload<T> | null >>

    /**
     * Find zero or more Pets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pets
     * const pets = await prisma.pets.findMany()
     * 
     * // Get first 10 Pets
     * const pets = await prisma.pets.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const petsWithIdOnly = await prisma.pets.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PetsFindManyArgs>(
      args?: SelectSubset<T, PetsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Pets>>, PrismaPromise<Array<PetsGetPayload<T>>>>

    /**
     * Create a Pets.
     * @param {PetsCreateArgs} args - Arguments to create a Pets.
     * @example
     * // Create one Pets
     * const Pets = await prisma.pets.create({
     *   data: {
     *     // ... data to create a Pets
     *   }
     * })
     * 
    **/
    create<T extends PetsCreateArgs>(
      args: SelectSubset<T, PetsCreateArgs>
    ): CheckSelect<T, Prisma__PetsClient<Pets>, Prisma__PetsClient<PetsGetPayload<T>>>

    /**
     * Create many Pets.
     *     @param {PetsCreateManyArgs} args - Arguments to create many Pets.
     *     @example
     *     // Create many Pets
     *     const pets = await prisma.pets.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PetsCreateManyArgs>(
      args?: SelectSubset<T, PetsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Pets.
     * @param {PetsDeleteArgs} args - Arguments to delete one Pets.
     * @example
     * // Delete one Pets
     * const Pets = await prisma.pets.delete({
     *   where: {
     *     // ... filter to delete one Pets
     *   }
     * })
     * 
    **/
    delete<T extends PetsDeleteArgs>(
      args: SelectSubset<T, PetsDeleteArgs>
    ): CheckSelect<T, Prisma__PetsClient<Pets>, Prisma__PetsClient<PetsGetPayload<T>>>

    /**
     * Update one Pets.
     * @param {PetsUpdateArgs} args - Arguments to update one Pets.
     * @example
     * // Update one Pets
     * const pets = await prisma.pets.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PetsUpdateArgs>(
      args: SelectSubset<T, PetsUpdateArgs>
    ): CheckSelect<T, Prisma__PetsClient<Pets>, Prisma__PetsClient<PetsGetPayload<T>>>

    /**
     * Delete zero or more Pets.
     * @param {PetsDeleteManyArgs} args - Arguments to filter Pets to delete.
     * @example
     * // Delete a few Pets
     * const { count } = await prisma.pets.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PetsDeleteManyArgs>(
      args?: SelectSubset<T, PetsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pets
     * const pets = await prisma.pets.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PetsUpdateManyArgs>(
      args: SelectSubset<T, PetsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Pets.
     * @param {PetsUpsertArgs} args - Arguments to update or create a Pets.
     * @example
     * // Update or create a Pets
     * const pets = await prisma.pets.upsert({
     *   create: {
     *     // ... data to create a Pets
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pets we want to update
     *   }
     * })
    **/
    upsert<T extends PetsUpsertArgs>(
      args: SelectSubset<T, PetsUpsertArgs>
    ): CheckSelect<T, Prisma__PetsClient<Pets>, Prisma__PetsClient<PetsGetPayload<T>>>

    /**
     * Find one Pets that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {PetsFindUniqueOrThrowArgs} args - Arguments to find a Pets
     * @example
     * // Get one Pets
     * const pets = await prisma.pets.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PetsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PetsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__PetsClient<Pets>, Prisma__PetsClient<PetsGetPayload<T>>>

    /**
     * Find the first Pets that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetsFindFirstOrThrowArgs} args - Arguments to find a Pets
     * @example
     * // Get one Pets
     * const pets = await prisma.pets.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PetsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PetsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__PetsClient<Pets>, Prisma__PetsClient<PetsGetPayload<T>>>

    /**
     * Count the number of Pets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetsCountArgs} args - Arguments to filter Pets to count.
     * @example
     * // Count the number of Pets
     * const count = await prisma.pets.count({
     *   where: {
     *     // ... the filter for the Pets we want to count
     *   }
     * })
    **/
    count<T extends PetsCountArgs>(
      args?: Subset<T, PetsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PetsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PetsAggregateArgs>(args: Subset<T, PetsAggregateArgs>): PrismaPromise<GetPetsAggregateType<T>>

    /**
     * Group by Pets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PetsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PetsGroupByArgs['orderBy'] }
        : { orderBy?: PetsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PetsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPetsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pets.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PetsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    owner<T extends UserProfileArgs = {}>(args?: Subset<T, UserProfileArgs>): CheckSelect<T, Prisma__UserProfileClient<UserProfile | null >, Prisma__UserProfileClient<UserProfileGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Pets base type for findUnique actions
   */
  export type PetsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Pets
     * 
    **/
    select?: PetsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PetsInclude | null
    /**
     * Filter, which Pets to fetch.
     * 
    **/
    where: PetsWhereUniqueInput
  }

  /**
   * Pets: findUnique
   */
  export interface PetsFindUniqueArgs extends PetsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Pets base type for findFirst actions
   */
  export type PetsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Pets
     * 
    **/
    select?: PetsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PetsInclude | null
    /**
     * Filter, which Pets to fetch.
     * 
    **/
    where?: PetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pets to fetch.
     * 
    **/
    orderBy?: Enumerable<PetsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pets.
     * 
    **/
    cursor?: PetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pets.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pets.
     * 
    **/
    distinct?: Enumerable<PetsScalarFieldEnum>
  }

  /**
   * Pets: findFirst
   */
  export interface PetsFindFirstArgs extends PetsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Pets findMany
   */
  export type PetsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Pets
     * 
    **/
    select?: PetsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PetsInclude | null
    /**
     * Filter, which Pets to fetch.
     * 
    **/
    where?: PetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pets to fetch.
     * 
    **/
    orderBy?: Enumerable<PetsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pets.
     * 
    **/
    cursor?: PetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pets.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PetsScalarFieldEnum>
  }


  /**
   * Pets create
   */
  export type PetsCreateArgs = {
    /**
     * Select specific fields to fetch from the Pets
     * 
    **/
    select?: PetsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PetsInclude | null
    /**
     * The data needed to create a Pets.
     * 
    **/
    data: XOR<PetsCreateInput, PetsUncheckedCreateInput>
  }


  /**
   * Pets createMany
   */
  export type PetsCreateManyArgs = {
    /**
     * The data used to create many Pets.
     * 
    **/
    data: Enumerable<PetsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Pets update
   */
  export type PetsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Pets
     * 
    **/
    select?: PetsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PetsInclude | null
    /**
     * The data needed to update a Pets.
     * 
    **/
    data: XOR<PetsUpdateInput, PetsUncheckedUpdateInput>
    /**
     * Choose, which Pets to update.
     * 
    **/
    where: PetsWhereUniqueInput
  }


  /**
   * Pets updateMany
   */
  export type PetsUpdateManyArgs = {
    /**
     * The data used to update Pets.
     * 
    **/
    data: XOR<PetsUpdateManyMutationInput, PetsUncheckedUpdateManyInput>
    /**
     * Filter which Pets to update
     * 
    **/
    where?: PetsWhereInput
  }


  /**
   * Pets upsert
   */
  export type PetsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Pets
     * 
    **/
    select?: PetsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PetsInclude | null
    /**
     * The filter to search for the Pets to update in case it exists.
     * 
    **/
    where: PetsWhereUniqueInput
    /**
     * In case the Pets found by the `where` argument doesn't exist, create a new Pets with this data.
     * 
    **/
    create: XOR<PetsCreateInput, PetsUncheckedCreateInput>
    /**
     * In case the Pets was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PetsUpdateInput, PetsUncheckedUpdateInput>
  }


  /**
   * Pets delete
   */
  export type PetsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Pets
     * 
    **/
    select?: PetsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PetsInclude | null
    /**
     * Filter which Pets to delete.
     * 
    **/
    where: PetsWhereUniqueInput
  }


  /**
   * Pets deleteMany
   */
  export type PetsDeleteManyArgs = {
    /**
     * Filter which Pets to delete
     * 
    **/
    where?: PetsWhereInput
  }


  /**
   * Pets: findUniqueOrThrow
   */
  export type PetsFindUniqueOrThrowArgs = PetsFindUniqueArgsBase
      

  /**
   * Pets: findFirstOrThrow
   */
  export type PetsFindFirstOrThrowArgs = PetsFindFirstArgsBase
      

  /**
   * Pets without action
   */
  export type PetsArgs = {
    /**
     * Select specific fields to fetch from the Pets
     * 
    **/
    select?: PetsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PetsInclude | null
  }



  /**
   * Model Post
   */


  export type AggregatePost = {
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  export type PostAvgAggregateOutputType = {
    id: number | null
    profileId: number | null
  }

  export type PostSumAggregateOutputType = {
    id: number | null
    profileId: number | null
  }

  export type PostMinAggregateOutputType = {
    id: number | null
    image: string | null
    message: string | null
    profileId: number | null
  }

  export type PostMaxAggregateOutputType = {
    id: number | null
    image: string | null
    message: string | null
    profileId: number | null
  }

  export type PostCountAggregateOutputType = {
    id: number
    image: number
    message: number
    profileId: number
    _all: number
  }


  export type PostAvgAggregateInputType = {
    id?: true
    profileId?: true
  }

  export type PostSumAggregateInputType = {
    id?: true
    profileId?: true
  }

  export type PostMinAggregateInputType = {
    id?: true
    image?: true
    message?: true
    profileId?: true
  }

  export type PostMaxAggregateInputType = {
    id?: true
    image?: true
    message?: true
    profileId?: true
  }

  export type PostCountAggregateInputType = {
    id?: true
    image?: true
    message?: true
    profileId?: true
    _all?: true
  }

  export type PostAggregateArgs = {
    /**
     * Filter which Post to aggregate.
     * 
    **/
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     * 
    **/
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Posts
    **/
    _count?: true | PostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMaxAggregateInputType
  }

  export type GetPostAggregateType<T extends PostAggregateArgs> = {
        [P in keyof T & keyof AggregatePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost[P]>
      : GetScalarType<T[P], AggregatePost[P]>
  }




  export type PostGroupByArgs = {
    where?: PostWhereInput
    orderBy?: Enumerable<PostOrderByWithAggregationInput>
    by: Array<PostScalarFieldEnum>
    having?: PostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostCountAggregateInputType | true
    _avg?: PostAvgAggregateInputType
    _sum?: PostSumAggregateInputType
    _min?: PostMinAggregateInputType
    _max?: PostMaxAggregateInputType
  }


  export type PostGroupByOutputType = {
    id: number
    image: string
    message: string
    profileId: number
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  type GetPostGroupByPayload<T extends PostGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostGroupByOutputType[P]>
            : GetScalarType<T[P], PostGroupByOutputType[P]>
        }
      >
    >


  export type PostSelect = {
    id?: boolean
    image?: boolean
    message?: boolean
    profile?: boolean | ProfileArgs
    profileId?: boolean
  }

  export type PostInclude = {
    profile?: boolean | ProfileArgs
  }

  export type PostGetPayload<
    S extends boolean | null | undefined | PostArgs,
    U = keyof S
      > = S extends true
        ? Post
    : S extends undefined
    ? never
    : S extends PostArgs | PostFindManyArgs
    ?'include' extends U
    ? Post  & {
    [P in TrueKeys<S['include']>]:
        P extends 'profile' ? ProfileGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'profile' ? ProfileGetPayload<S['select'][P]> :  P extends keyof Post ? Post[P] : never
  } 
    : Post
  : Post


  type PostCountArgs = Merge<
    Omit<PostFindManyArgs, 'select' | 'include'> & {
      select?: PostCountAggregateInputType | true
    }
  >

  export interface PostDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Post that matches the filter.
     * @param {PostFindUniqueArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PostFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PostFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Post'> extends True ? CheckSelect<T, Prisma__PostClient<Post>, Prisma__PostClient<PostGetPayload<T>>> : CheckSelect<T, Prisma__PostClient<Post | null >, Prisma__PostClient<PostGetPayload<T> | null >>

    /**
     * Find the first Post that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PostFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PostFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Post'> extends True ? CheckSelect<T, Prisma__PostClient<Post>, Prisma__PostClient<PostGetPayload<T>>> : CheckSelect<T, Prisma__PostClient<Post | null >, Prisma__PostClient<PostGetPayload<T> | null >>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.post.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.post.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postWithIdOnly = await prisma.post.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PostFindManyArgs>(
      args?: SelectSubset<T, PostFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Post>>, PrismaPromise<Array<PostGetPayload<T>>>>

    /**
     * Create a Post.
     * @param {PostCreateArgs} args - Arguments to create a Post.
     * @example
     * // Create one Post
     * const Post = await prisma.post.create({
     *   data: {
     *     // ... data to create a Post
     *   }
     * })
     * 
    **/
    create<T extends PostCreateArgs>(
      args: SelectSubset<T, PostCreateArgs>
    ): CheckSelect<T, Prisma__PostClient<Post>, Prisma__PostClient<PostGetPayload<T>>>

    /**
     * Create many Posts.
     *     @param {PostCreateManyArgs} args - Arguments to create many Posts.
     *     @example
     *     // Create many Posts
     *     const post = await prisma.post.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PostCreateManyArgs>(
      args?: SelectSubset<T, PostCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Post.
     * @param {PostDeleteArgs} args - Arguments to delete one Post.
     * @example
     * // Delete one Post
     * const Post = await prisma.post.delete({
     *   where: {
     *     // ... filter to delete one Post
     *   }
     * })
     * 
    **/
    delete<T extends PostDeleteArgs>(
      args: SelectSubset<T, PostDeleteArgs>
    ): CheckSelect<T, Prisma__PostClient<Post>, Prisma__PostClient<PostGetPayload<T>>>

    /**
     * Update one Post.
     * @param {PostUpdateArgs} args - Arguments to update one Post.
     * @example
     * // Update one Post
     * const post = await prisma.post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PostUpdateArgs>(
      args: SelectSubset<T, PostUpdateArgs>
    ): CheckSelect<T, Prisma__PostClient<Post>, Prisma__PostClient<PostGetPayload<T>>>

    /**
     * Delete zero or more Posts.
     * @param {PostDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PostDeleteManyArgs>(
      args?: SelectSubset<T, PostDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PostUpdateManyArgs>(
      args: SelectSubset<T, PostUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Post.
     * @param {PostUpsertArgs} args - Arguments to update or create a Post.
     * @example
     * // Update or create a Post
     * const post = await prisma.post.upsert({
     *   create: {
     *     // ... data to create a Post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post we want to update
     *   }
     * })
    **/
    upsert<T extends PostUpsertArgs>(
      args: SelectSubset<T, PostUpsertArgs>
    ): CheckSelect<T, Prisma__PostClient<Post>, Prisma__PostClient<PostGetPayload<T>>>

    /**
     * Find one Post that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {PostFindUniqueOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PostFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PostFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__PostClient<Post>, Prisma__PostClient<PostGetPayload<T>>>

    /**
     * Find the first Post that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PostFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PostFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__PostClient<Post>, Prisma__PostClient<PostGetPayload<T>>>

    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.post.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends PostCountArgs>(
      args?: Subset<T, PostCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostAggregateArgs>(args: Subset<T, PostAggregateArgs>): PrismaPromise<GetPostAggregateType<T>>

    /**
     * Group by Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostGroupByArgs['orderBy'] }
        : { orderBy?: PostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PostClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    profile<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Post base type for findUnique actions
   */
  export type PostFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
    /**
     * Filter, which Post to fetch.
     * 
    **/
    where: PostWhereUniqueInput
  }

  /**
   * Post: findUnique
   */
  export interface PostFindUniqueArgs extends PostFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Post base type for findFirst actions
   */
  export type PostFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
    /**
     * Filter, which Post to fetch.
     * 
    **/
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     * 
    **/
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     * 
    **/
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     * 
    **/
    distinct?: Enumerable<PostScalarFieldEnum>
  }

  /**
   * Post: findFirst
   */
  export interface PostFindFirstArgs extends PostFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Post findMany
   */
  export type PostFindManyArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
    /**
     * Filter, which Posts to fetch.
     * 
    **/
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     * 
    **/
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Posts.
     * 
    **/
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PostScalarFieldEnum>
  }


  /**
   * Post create
   */
  export type PostCreateArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
    /**
     * The data needed to create a Post.
     * 
    **/
    data: XOR<PostCreateInput, PostUncheckedCreateInput>
  }


  /**
   * Post createMany
   */
  export type PostCreateManyArgs = {
    /**
     * The data used to create many Posts.
     * 
    **/
    data: Enumerable<PostCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Post update
   */
  export type PostUpdateArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
    /**
     * The data needed to update a Post.
     * 
    **/
    data: XOR<PostUpdateInput, PostUncheckedUpdateInput>
    /**
     * Choose, which Post to update.
     * 
    **/
    where: PostWhereUniqueInput
  }


  /**
   * Post updateMany
   */
  export type PostUpdateManyArgs = {
    /**
     * The data used to update Posts.
     * 
    **/
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     * 
    **/
    where?: PostWhereInput
  }


  /**
   * Post upsert
   */
  export type PostUpsertArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
    /**
     * The filter to search for the Post to update in case it exists.
     * 
    **/
    where: PostWhereUniqueInput
    /**
     * In case the Post found by the `where` argument doesn't exist, create a new Post with this data.
     * 
    **/
    create: XOR<PostCreateInput, PostUncheckedCreateInput>
    /**
     * In case the Post was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PostUpdateInput, PostUncheckedUpdateInput>
  }


  /**
   * Post delete
   */
  export type PostDeleteArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
    /**
     * Filter which Post to delete.
     * 
    **/
    where: PostWhereUniqueInput
  }


  /**
   * Post deleteMany
   */
  export type PostDeleteManyArgs = {
    /**
     * Filter which Posts to delete
     * 
    **/
    where?: PostWhereInput
  }


  /**
   * Post: findUniqueOrThrow
   */
  export type PostFindUniqueOrThrowArgs = PostFindUniqueArgsBase
      

  /**
   * Post: findFirstOrThrow
   */
  export type PostFindFirstOrThrowArgs = PostFindFirstArgsBase
      

  /**
   * Post without action
   */
  export type PostArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PostInclude | null
  }



  /**
   * Model Booking
   */


  export type AggregateBooking = {
    _count: BookingCountAggregateOutputType | null
    _avg: BookingAvgAggregateOutputType | null
    _sum: BookingSumAggregateOutputType | null
    _min: BookingMinAggregateOutputType | null
    _max: BookingMaxAggregateOutputType | null
  }

  export type BookingAvgAggregateOutputType = {
    id: number | null
    profileId: number | null
    userProfileId: number | null
    serviceId: number | null
  }

  export type BookingSumAggregateOutputType = {
    id: number | null
    profileId: number | null
    userProfileId: number | null
    serviceId: number | null
  }

  export type BookingMinAggregateOutputType = {
    id: number | null
    dateTime: Date | null
    status: string | null
    profileId: number | null
    userProfileId: number | null
    serviceId: number | null
  }

  export type BookingMaxAggregateOutputType = {
    id: number | null
    dateTime: Date | null
    status: string | null
    profileId: number | null
    userProfileId: number | null
    serviceId: number | null
  }

  export type BookingCountAggregateOutputType = {
    id: number
    dateTime: number
    status: number
    profileId: number
    userProfileId: number
    serviceId: number
    _all: number
  }


  export type BookingAvgAggregateInputType = {
    id?: true
    profileId?: true
    userProfileId?: true
    serviceId?: true
  }

  export type BookingSumAggregateInputType = {
    id?: true
    profileId?: true
    userProfileId?: true
    serviceId?: true
  }

  export type BookingMinAggregateInputType = {
    id?: true
    dateTime?: true
    status?: true
    profileId?: true
    userProfileId?: true
    serviceId?: true
  }

  export type BookingMaxAggregateInputType = {
    id?: true
    dateTime?: true
    status?: true
    profileId?: true
    userProfileId?: true
    serviceId?: true
  }

  export type BookingCountAggregateInputType = {
    id?: true
    dateTime?: true
    status?: true
    profileId?: true
    userProfileId?: true
    serviceId?: true
    _all?: true
  }

  export type BookingAggregateArgs = {
    /**
     * Filter which Booking to aggregate.
     * 
    **/
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     * 
    **/
    orderBy?: Enumerable<BookingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Bookings
    **/
    _count?: true | BookingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookingMaxAggregateInputType
  }

  export type GetBookingAggregateType<T extends BookingAggregateArgs> = {
        [P in keyof T & keyof AggregateBooking]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBooking[P]>
      : GetScalarType<T[P], AggregateBooking[P]>
  }




  export type BookingGroupByArgs = {
    where?: BookingWhereInput
    orderBy?: Enumerable<BookingOrderByWithAggregationInput>
    by: Array<BookingScalarFieldEnum>
    having?: BookingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookingCountAggregateInputType | true
    _avg?: BookingAvgAggregateInputType
    _sum?: BookingSumAggregateInputType
    _min?: BookingMinAggregateInputType
    _max?: BookingMaxAggregateInputType
  }


  export type BookingGroupByOutputType = {
    id: number
    dateTime: Date
    status: string
    profileId: number
    userProfileId: number
    serviceId: number
    _count: BookingCountAggregateOutputType | null
    _avg: BookingAvgAggregateOutputType | null
    _sum: BookingSumAggregateOutputType | null
    _min: BookingMinAggregateOutputType | null
    _max: BookingMaxAggregateOutputType | null
  }

  type GetBookingGroupByPayload<T extends BookingGroupByArgs> = PrismaPromise<
    Array<
      PickArray<BookingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookingGroupByOutputType[P]>
            : GetScalarType<T[P], BookingGroupByOutputType[P]>
        }
      >
    >


  export type BookingSelect = {
    id?: boolean
    profile?: boolean | ProfileArgs
    user?: boolean | UserProfileArgs
    service?: boolean | ServiceArgs
    dateTime?: boolean
    status?: boolean
    profileId?: boolean
    userProfileId?: boolean
    serviceId?: boolean
  }

  export type BookingInclude = {
    profile?: boolean | ProfileArgs
    user?: boolean | UserProfileArgs
    service?: boolean | ServiceArgs
  }

  export type BookingGetPayload<
    S extends boolean | null | undefined | BookingArgs,
    U = keyof S
      > = S extends true
        ? Booking
    : S extends undefined
    ? never
    : S extends BookingArgs | BookingFindManyArgs
    ?'include' extends U
    ? Booking  & {
    [P in TrueKeys<S['include']>]:
        P extends 'profile' ? ProfileGetPayload<S['include'][P]> :
        P extends 'user' ? UserProfileGetPayload<S['include'][P]> :
        P extends 'service' ? ServiceGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'profile' ? ProfileGetPayload<S['select'][P]> :
        P extends 'user' ? UserProfileGetPayload<S['select'][P]> :
        P extends 'service' ? ServiceGetPayload<S['select'][P]> :  P extends keyof Booking ? Booking[P] : never
  } 
    : Booking
  : Booking


  type BookingCountArgs = Merge<
    Omit<BookingFindManyArgs, 'select' | 'include'> & {
      select?: BookingCountAggregateInputType | true
    }
  >

  export interface BookingDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Booking that matches the filter.
     * @param {BookingFindUniqueArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BookingFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BookingFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Booking'> extends True ? CheckSelect<T, Prisma__BookingClient<Booking>, Prisma__BookingClient<BookingGetPayload<T>>> : CheckSelect<T, Prisma__BookingClient<Booking | null >, Prisma__BookingClient<BookingGetPayload<T> | null >>

    /**
     * Find the first Booking that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingFindFirstArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BookingFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BookingFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Booking'> extends True ? CheckSelect<T, Prisma__BookingClient<Booking>, Prisma__BookingClient<BookingGetPayload<T>>> : CheckSelect<T, Prisma__BookingClient<Booking | null >, Prisma__BookingClient<BookingGetPayload<T> | null >>

    /**
     * Find zero or more Bookings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bookings
     * const bookings = await prisma.booking.findMany()
     * 
     * // Get first 10 Bookings
     * const bookings = await prisma.booking.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookingWithIdOnly = await prisma.booking.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BookingFindManyArgs>(
      args?: SelectSubset<T, BookingFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Booking>>, PrismaPromise<Array<BookingGetPayload<T>>>>

    /**
     * Create a Booking.
     * @param {BookingCreateArgs} args - Arguments to create a Booking.
     * @example
     * // Create one Booking
     * const Booking = await prisma.booking.create({
     *   data: {
     *     // ... data to create a Booking
     *   }
     * })
     * 
    **/
    create<T extends BookingCreateArgs>(
      args: SelectSubset<T, BookingCreateArgs>
    ): CheckSelect<T, Prisma__BookingClient<Booking>, Prisma__BookingClient<BookingGetPayload<T>>>

    /**
     * Create many Bookings.
     *     @param {BookingCreateManyArgs} args - Arguments to create many Bookings.
     *     @example
     *     // Create many Bookings
     *     const booking = await prisma.booking.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BookingCreateManyArgs>(
      args?: SelectSubset<T, BookingCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Booking.
     * @param {BookingDeleteArgs} args - Arguments to delete one Booking.
     * @example
     * // Delete one Booking
     * const Booking = await prisma.booking.delete({
     *   where: {
     *     // ... filter to delete one Booking
     *   }
     * })
     * 
    **/
    delete<T extends BookingDeleteArgs>(
      args: SelectSubset<T, BookingDeleteArgs>
    ): CheckSelect<T, Prisma__BookingClient<Booking>, Prisma__BookingClient<BookingGetPayload<T>>>

    /**
     * Update one Booking.
     * @param {BookingUpdateArgs} args - Arguments to update one Booking.
     * @example
     * // Update one Booking
     * const booking = await prisma.booking.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BookingUpdateArgs>(
      args: SelectSubset<T, BookingUpdateArgs>
    ): CheckSelect<T, Prisma__BookingClient<Booking>, Prisma__BookingClient<BookingGetPayload<T>>>

    /**
     * Delete zero or more Bookings.
     * @param {BookingDeleteManyArgs} args - Arguments to filter Bookings to delete.
     * @example
     * // Delete a few Bookings
     * const { count } = await prisma.booking.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BookingDeleteManyArgs>(
      args?: SelectSubset<T, BookingDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bookings
     * const booking = await prisma.booking.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BookingUpdateManyArgs>(
      args: SelectSubset<T, BookingUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Booking.
     * @param {BookingUpsertArgs} args - Arguments to update or create a Booking.
     * @example
     * // Update or create a Booking
     * const booking = await prisma.booking.upsert({
     *   create: {
     *     // ... data to create a Booking
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Booking we want to update
     *   }
     * })
    **/
    upsert<T extends BookingUpsertArgs>(
      args: SelectSubset<T, BookingUpsertArgs>
    ): CheckSelect<T, Prisma__BookingClient<Booking>, Prisma__BookingClient<BookingGetPayload<T>>>

    /**
     * Find one Booking that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {BookingFindUniqueOrThrowArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BookingFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BookingFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__BookingClient<Booking>, Prisma__BookingClient<BookingGetPayload<T>>>

    /**
     * Find the first Booking that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingFindFirstOrThrowArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BookingFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BookingFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__BookingClient<Booking>, Prisma__BookingClient<BookingGetPayload<T>>>

    /**
     * Count the number of Bookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingCountArgs} args - Arguments to filter Bookings to count.
     * @example
     * // Count the number of Bookings
     * const count = await prisma.booking.count({
     *   where: {
     *     // ... the filter for the Bookings we want to count
     *   }
     * })
    **/
    count<T extends BookingCountArgs>(
      args?: Subset<T, BookingCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Booking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookingAggregateArgs>(args: Subset<T, BookingAggregateArgs>): PrismaPromise<GetBookingAggregateType<T>>

    /**
     * Group by Booking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookingGroupByArgs['orderBy'] }
        : { orderBy?: BookingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookingGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Booking.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BookingClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    profile<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>;

    user<T extends UserProfileArgs = {}>(args?: Subset<T, UserProfileArgs>): CheckSelect<T, Prisma__UserProfileClient<UserProfile | null >, Prisma__UserProfileClient<UserProfileGetPayload<T> | null >>;

    service<T extends ServiceArgs = {}>(args?: Subset<T, ServiceArgs>): CheckSelect<T, Prisma__ServiceClient<Service | null >, Prisma__ServiceClient<ServiceGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Booking base type for findUnique actions
   */
  export type BookingFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Booking
     * 
    **/
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingInclude | null
    /**
     * Filter, which Booking to fetch.
     * 
    **/
    where: BookingWhereUniqueInput
  }

  /**
   * Booking: findUnique
   */
  export interface BookingFindUniqueArgs extends BookingFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Booking base type for findFirst actions
   */
  export type BookingFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Booking
     * 
    **/
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingInclude | null
    /**
     * Filter, which Booking to fetch.
     * 
    **/
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     * 
    **/
    orderBy?: Enumerable<BookingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bookings.
     * 
    **/
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bookings.
     * 
    **/
    distinct?: Enumerable<BookingScalarFieldEnum>
  }

  /**
   * Booking: findFirst
   */
  export interface BookingFindFirstArgs extends BookingFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Booking findMany
   */
  export type BookingFindManyArgs = {
    /**
     * Select specific fields to fetch from the Booking
     * 
    **/
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingInclude | null
    /**
     * Filter, which Bookings to fetch.
     * 
    **/
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     * 
    **/
    orderBy?: Enumerable<BookingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Bookings.
     * 
    **/
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     * 
    **/
    skip?: number
    distinct?: Enumerable<BookingScalarFieldEnum>
  }


  /**
   * Booking create
   */
  export type BookingCreateArgs = {
    /**
     * Select specific fields to fetch from the Booking
     * 
    **/
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingInclude | null
    /**
     * The data needed to create a Booking.
     * 
    **/
    data: XOR<BookingCreateInput, BookingUncheckedCreateInput>
  }


  /**
   * Booking createMany
   */
  export type BookingCreateManyArgs = {
    /**
     * The data used to create many Bookings.
     * 
    **/
    data: Enumerable<BookingCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Booking update
   */
  export type BookingUpdateArgs = {
    /**
     * Select specific fields to fetch from the Booking
     * 
    **/
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingInclude | null
    /**
     * The data needed to update a Booking.
     * 
    **/
    data: XOR<BookingUpdateInput, BookingUncheckedUpdateInput>
    /**
     * Choose, which Booking to update.
     * 
    **/
    where: BookingWhereUniqueInput
  }


  /**
   * Booking updateMany
   */
  export type BookingUpdateManyArgs = {
    /**
     * The data used to update Bookings.
     * 
    **/
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyInput>
    /**
     * Filter which Bookings to update
     * 
    **/
    where?: BookingWhereInput
  }


  /**
   * Booking upsert
   */
  export type BookingUpsertArgs = {
    /**
     * Select specific fields to fetch from the Booking
     * 
    **/
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingInclude | null
    /**
     * The filter to search for the Booking to update in case it exists.
     * 
    **/
    where: BookingWhereUniqueInput
    /**
     * In case the Booking found by the `where` argument doesn't exist, create a new Booking with this data.
     * 
    **/
    create: XOR<BookingCreateInput, BookingUncheckedCreateInput>
    /**
     * In case the Booking was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<BookingUpdateInput, BookingUncheckedUpdateInput>
  }


  /**
   * Booking delete
   */
  export type BookingDeleteArgs = {
    /**
     * Select specific fields to fetch from the Booking
     * 
    **/
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingInclude | null
    /**
     * Filter which Booking to delete.
     * 
    **/
    where: BookingWhereUniqueInput
  }


  /**
   * Booking deleteMany
   */
  export type BookingDeleteManyArgs = {
    /**
     * Filter which Bookings to delete
     * 
    **/
    where?: BookingWhereInput
  }


  /**
   * Booking: findUniqueOrThrow
   */
  export type BookingFindUniqueOrThrowArgs = BookingFindUniqueArgsBase
      

  /**
   * Booking: findFirstOrThrow
   */
  export type BookingFindFirstOrThrowArgs = BookingFindFirstArgsBase
      

  /**
   * Booking without action
   */
  export type BookingArgs = {
    /**
     * Select specific fields to fetch from the Booking
     * 
    **/
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingInclude | null
  }



  /**
   * Model Service
   */


  export type AggregateService = {
    _count: ServiceCountAggregateOutputType | null
    _avg: ServiceAvgAggregateOutputType | null
    _sum: ServiceSumAggregateOutputType | null
    _min: ServiceMinAggregateOutputType | null
    _max: ServiceMaxAggregateOutputType | null
  }

  export type ServiceAvgAggregateOutputType = {
    id: number | null
    price: number | null
    profileId: number | null
  }

  export type ServiceSumAggregateOutputType = {
    id: number | null
    price: number | null
    profileId: number | null
  }

  export type ServiceMinAggregateOutputType = {
    id: number | null
    title: string | null
    price: number | null
    profileId: number | null
  }

  export type ServiceMaxAggregateOutputType = {
    id: number | null
    title: string | null
    price: number | null
    profileId: number | null
  }

  export type ServiceCountAggregateOutputType = {
    id: number
    title: number
    price: number
    profileId: number
    _all: number
  }


  export type ServiceAvgAggregateInputType = {
    id?: true
    price?: true
    profileId?: true
  }

  export type ServiceSumAggregateInputType = {
    id?: true
    price?: true
    profileId?: true
  }

  export type ServiceMinAggregateInputType = {
    id?: true
    title?: true
    price?: true
    profileId?: true
  }

  export type ServiceMaxAggregateInputType = {
    id?: true
    title?: true
    price?: true
    profileId?: true
  }

  export type ServiceCountAggregateInputType = {
    id?: true
    title?: true
    price?: true
    profileId?: true
    _all?: true
  }

  export type ServiceAggregateArgs = {
    /**
     * Filter which Service to aggregate.
     * 
    **/
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     * 
    **/
    orderBy?: Enumerable<ServiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Services
    **/
    _count?: true | ServiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceMaxAggregateInputType
  }

  export type GetServiceAggregateType<T extends ServiceAggregateArgs> = {
        [P in keyof T & keyof AggregateService]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateService[P]>
      : GetScalarType<T[P], AggregateService[P]>
  }




  export type ServiceGroupByArgs = {
    where?: ServiceWhereInput
    orderBy?: Enumerable<ServiceOrderByWithAggregationInput>
    by: Array<ServiceScalarFieldEnum>
    having?: ServiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceCountAggregateInputType | true
    _avg?: ServiceAvgAggregateInputType
    _sum?: ServiceSumAggregateInputType
    _min?: ServiceMinAggregateInputType
    _max?: ServiceMaxAggregateInputType
  }


  export type ServiceGroupByOutputType = {
    id: number
    title: string
    price: number
    profileId: number
    _count: ServiceCountAggregateOutputType | null
    _avg: ServiceAvgAggregateOutputType | null
    _sum: ServiceSumAggregateOutputType | null
    _min: ServiceMinAggregateOutputType | null
    _max: ServiceMaxAggregateOutputType | null
  }

  type GetServiceGroupByPayload<T extends ServiceGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ServiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceGroupByOutputType[P]>
        }
      >
    >


  export type ServiceSelect = {
    id?: boolean
    title?: boolean
    price?: boolean
    vendor?: boolean | ProfileArgs
    booking?: boolean | BookingFindManyArgs
    profileId?: boolean
    _count?: boolean | ServiceCountOutputTypeArgs
  }

  export type ServiceInclude = {
    vendor?: boolean | ProfileArgs
    booking?: boolean | BookingFindManyArgs
    _count?: boolean | ServiceCountOutputTypeArgs
  }

  export type ServiceGetPayload<
    S extends boolean | null | undefined | ServiceArgs,
    U = keyof S
      > = S extends true
        ? Service
    : S extends undefined
    ? never
    : S extends ServiceArgs | ServiceFindManyArgs
    ?'include' extends U
    ? Service  & {
    [P in TrueKeys<S['include']>]:
        P extends 'vendor' ? ProfileGetPayload<S['include'][P]> :
        P extends 'booking' ? Array < BookingGetPayload<S['include'][P]>>  :
        P extends '_count' ? ServiceCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'vendor' ? ProfileGetPayload<S['select'][P]> :
        P extends 'booking' ? Array < BookingGetPayload<S['select'][P]>>  :
        P extends '_count' ? ServiceCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Service ? Service[P] : never
  } 
    : Service
  : Service


  type ServiceCountArgs = Merge<
    Omit<ServiceFindManyArgs, 'select' | 'include'> & {
      select?: ServiceCountAggregateInputType | true
    }
  >

  export interface ServiceDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Service that matches the filter.
     * @param {ServiceFindUniqueArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ServiceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ServiceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Service'> extends True ? CheckSelect<T, Prisma__ServiceClient<Service>, Prisma__ServiceClient<ServiceGetPayload<T>>> : CheckSelect<T, Prisma__ServiceClient<Service | null >, Prisma__ServiceClient<ServiceGetPayload<T> | null >>

    /**
     * Find the first Service that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindFirstArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ServiceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ServiceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Service'> extends True ? CheckSelect<T, Prisma__ServiceClient<Service>, Prisma__ServiceClient<ServiceGetPayload<T>>> : CheckSelect<T, Prisma__ServiceClient<Service | null >, Prisma__ServiceClient<ServiceGetPayload<T> | null >>

    /**
     * Find zero or more Services that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Services
     * const services = await prisma.service.findMany()
     * 
     * // Get first 10 Services
     * const services = await prisma.service.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceWithIdOnly = await prisma.service.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ServiceFindManyArgs>(
      args?: SelectSubset<T, ServiceFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Service>>, PrismaPromise<Array<ServiceGetPayload<T>>>>

    /**
     * Create a Service.
     * @param {ServiceCreateArgs} args - Arguments to create a Service.
     * @example
     * // Create one Service
     * const Service = await prisma.service.create({
     *   data: {
     *     // ... data to create a Service
     *   }
     * })
     * 
    **/
    create<T extends ServiceCreateArgs>(
      args: SelectSubset<T, ServiceCreateArgs>
    ): CheckSelect<T, Prisma__ServiceClient<Service>, Prisma__ServiceClient<ServiceGetPayload<T>>>

    /**
     * Create many Services.
     *     @param {ServiceCreateManyArgs} args - Arguments to create many Services.
     *     @example
     *     // Create many Services
     *     const service = await prisma.service.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ServiceCreateManyArgs>(
      args?: SelectSubset<T, ServiceCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Service.
     * @param {ServiceDeleteArgs} args - Arguments to delete one Service.
     * @example
     * // Delete one Service
     * const Service = await prisma.service.delete({
     *   where: {
     *     // ... filter to delete one Service
     *   }
     * })
     * 
    **/
    delete<T extends ServiceDeleteArgs>(
      args: SelectSubset<T, ServiceDeleteArgs>
    ): CheckSelect<T, Prisma__ServiceClient<Service>, Prisma__ServiceClient<ServiceGetPayload<T>>>

    /**
     * Update one Service.
     * @param {ServiceUpdateArgs} args - Arguments to update one Service.
     * @example
     * // Update one Service
     * const service = await prisma.service.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ServiceUpdateArgs>(
      args: SelectSubset<T, ServiceUpdateArgs>
    ): CheckSelect<T, Prisma__ServiceClient<Service>, Prisma__ServiceClient<ServiceGetPayload<T>>>

    /**
     * Delete zero or more Services.
     * @param {ServiceDeleteManyArgs} args - Arguments to filter Services to delete.
     * @example
     * // Delete a few Services
     * const { count } = await prisma.service.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ServiceDeleteManyArgs>(
      args?: SelectSubset<T, ServiceDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Services
     * const service = await prisma.service.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ServiceUpdateManyArgs>(
      args: SelectSubset<T, ServiceUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Service.
     * @param {ServiceUpsertArgs} args - Arguments to update or create a Service.
     * @example
     * // Update or create a Service
     * const service = await prisma.service.upsert({
     *   create: {
     *     // ... data to create a Service
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Service we want to update
     *   }
     * })
    **/
    upsert<T extends ServiceUpsertArgs>(
      args: SelectSubset<T, ServiceUpsertArgs>
    ): CheckSelect<T, Prisma__ServiceClient<Service>, Prisma__ServiceClient<ServiceGetPayload<T>>>

    /**
     * Find one Service that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ServiceFindUniqueOrThrowArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ServiceFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ServiceFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__ServiceClient<Service>, Prisma__ServiceClient<ServiceGetPayload<T>>>

    /**
     * Find the first Service that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindFirstOrThrowArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ServiceFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ServiceFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__ServiceClient<Service>, Prisma__ServiceClient<ServiceGetPayload<T>>>

    /**
     * Count the number of Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCountArgs} args - Arguments to filter Services to count.
     * @example
     * // Count the number of Services
     * const count = await prisma.service.count({
     *   where: {
     *     // ... the filter for the Services we want to count
     *   }
     * })
    **/
    count<T extends ServiceCountArgs>(
      args?: Subset<T, ServiceCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Service.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceAggregateArgs>(args: Subset<T, ServiceAggregateArgs>): PrismaPromise<GetServiceAggregateType<T>>

    /**
     * Group by Service.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceGroupByArgs['orderBy'] }
        : { orderBy?: ServiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Service.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ServiceClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    vendor<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>;

    booking<T extends BookingFindManyArgs = {}>(args?: Subset<T, BookingFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Booking>>, PrismaPromise<Array<BookingGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Service base type for findUnique actions
   */
  export type ServiceFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Service
     * 
    **/
    select?: ServiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ServiceInclude | null
    /**
     * Filter, which Service to fetch.
     * 
    **/
    where: ServiceWhereUniqueInput
  }

  /**
   * Service: findUnique
   */
  export interface ServiceFindUniqueArgs extends ServiceFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Service base type for findFirst actions
   */
  export type ServiceFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Service
     * 
    **/
    select?: ServiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ServiceInclude | null
    /**
     * Filter, which Service to fetch.
     * 
    **/
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     * 
    **/
    orderBy?: Enumerable<ServiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Services.
     * 
    **/
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Services.
     * 
    **/
    distinct?: Enumerable<ServiceScalarFieldEnum>
  }

  /**
   * Service: findFirst
   */
  export interface ServiceFindFirstArgs extends ServiceFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Service findMany
   */
  export type ServiceFindManyArgs = {
    /**
     * Select specific fields to fetch from the Service
     * 
    **/
    select?: ServiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ServiceInclude | null
    /**
     * Filter, which Services to fetch.
     * 
    **/
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     * 
    **/
    orderBy?: Enumerable<ServiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Services.
     * 
    **/
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ServiceScalarFieldEnum>
  }


  /**
   * Service create
   */
  export type ServiceCreateArgs = {
    /**
     * Select specific fields to fetch from the Service
     * 
    **/
    select?: ServiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ServiceInclude | null
    /**
     * The data needed to create a Service.
     * 
    **/
    data: XOR<ServiceCreateInput, ServiceUncheckedCreateInput>
  }


  /**
   * Service createMany
   */
  export type ServiceCreateManyArgs = {
    /**
     * The data used to create many Services.
     * 
    **/
    data: Enumerable<ServiceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Service update
   */
  export type ServiceUpdateArgs = {
    /**
     * Select specific fields to fetch from the Service
     * 
    **/
    select?: ServiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ServiceInclude | null
    /**
     * The data needed to update a Service.
     * 
    **/
    data: XOR<ServiceUpdateInput, ServiceUncheckedUpdateInput>
    /**
     * Choose, which Service to update.
     * 
    **/
    where: ServiceWhereUniqueInput
  }


  /**
   * Service updateMany
   */
  export type ServiceUpdateManyArgs = {
    /**
     * The data used to update Services.
     * 
    **/
    data: XOR<ServiceUpdateManyMutationInput, ServiceUncheckedUpdateManyInput>
    /**
     * Filter which Services to update
     * 
    **/
    where?: ServiceWhereInput
  }


  /**
   * Service upsert
   */
  export type ServiceUpsertArgs = {
    /**
     * Select specific fields to fetch from the Service
     * 
    **/
    select?: ServiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ServiceInclude | null
    /**
     * The filter to search for the Service to update in case it exists.
     * 
    **/
    where: ServiceWhereUniqueInput
    /**
     * In case the Service found by the `where` argument doesn't exist, create a new Service with this data.
     * 
    **/
    create: XOR<ServiceCreateInput, ServiceUncheckedCreateInput>
    /**
     * In case the Service was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ServiceUpdateInput, ServiceUncheckedUpdateInput>
  }


  /**
   * Service delete
   */
  export type ServiceDeleteArgs = {
    /**
     * Select specific fields to fetch from the Service
     * 
    **/
    select?: ServiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ServiceInclude | null
    /**
     * Filter which Service to delete.
     * 
    **/
    where: ServiceWhereUniqueInput
  }


  /**
   * Service deleteMany
   */
  export type ServiceDeleteManyArgs = {
    /**
     * Filter which Services to delete
     * 
    **/
    where?: ServiceWhereInput
  }


  /**
   * Service: findUniqueOrThrow
   */
  export type ServiceFindUniqueOrThrowArgs = ServiceFindUniqueArgsBase
      

  /**
   * Service: findFirstOrThrow
   */
  export type ServiceFindFirstOrThrowArgs = ServiceFindFirstArgsBase
      

  /**
   * Service without action
   */
  export type ServiceArgs = {
    /**
     * Select specific fields to fetch from the Service
     * 
    **/
    select?: ServiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ServiceInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const VendorScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password'
  };

  export type VendorScalarFieldEnum = (typeof VendorScalarFieldEnum)[keyof typeof VendorScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    description: 'description',
    type: 'type',
    profilePic: 'profilePic',
    start: 'start',
    end: 'end'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const DetailsScalarFieldEnum: {
    id: 'id',
    description: 'description',
    petType: 'petType',
    profileId: 'profileId',
    areaId: 'areaId'
  };

  export type DetailsScalarFieldEnum = (typeof DetailsScalarFieldEnum)[keyof typeof DetailsScalarFieldEnum]


  export const DetailsOnAreaScalarFieldEnum: {
    assignedAt: 'assignedAt',
    assignedBy: 'assignedBy',
    detailsId: 'detailsId',
    areaId: 'areaId'
  };

  export type DetailsOnAreaScalarFieldEnum = (typeof DetailsOnAreaScalarFieldEnum)[keyof typeof DetailsOnAreaScalarFieldEnum]


  export const PetSizeScalarFieldEnum: {
    id: 'id',
    weight: 'weight',
    detailsId: 'detailsId'
  };

  export type PetSizeScalarFieldEnum = (typeof PetSizeScalarFieldEnum)[keyof typeof PetSizeScalarFieldEnum]


  export const AreaScalarFieldEnum: {
    id: 'id',
    north: 'north',
    south: 'south',
    east: 'east',
    west: 'west'
  };

  export type AreaScalarFieldEnum = (typeof AreaScalarFieldEnum)[keyof typeof AreaScalarFieldEnum]


  export const ReviewsScalarFieldEnum: {
    id: 'id',
    paws: 'paws',
    comment: 'comment',
    profileId: 'profileId',
    userProfileId: 'userProfileId'
  };

  export type ReviewsScalarFieldEnum = (typeof ReviewsScalarFieldEnum)[keyof typeof ReviewsScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserProfileScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    description: 'description',
    image: 'image',
    userId: 'userId'
  };

  export type UserProfileScalarFieldEnum = (typeof UserProfileScalarFieldEnum)[keyof typeof UserProfileScalarFieldEnum]


  export const PetsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    breed: 'breed',
    birth: 'birth',
    image: 'image',
    sterilized: 'sterilized',
    userProfileId: 'userProfileId'
  };

  export type PetsScalarFieldEnum = (typeof PetsScalarFieldEnum)[keyof typeof PetsScalarFieldEnum]


  export const PostScalarFieldEnum: {
    id: 'id',
    image: 'image',
    message: 'message',
    profileId: 'profileId'
  };

  export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum]


  export const BookingScalarFieldEnum: {
    id: 'id',
    dateTime: 'dateTime',
    status: 'status',
    profileId: 'profileId',
    userProfileId: 'userProfileId',
    serviceId: 'serviceId'
  };

  export type BookingScalarFieldEnum = (typeof BookingScalarFieldEnum)[keyof typeof BookingScalarFieldEnum]


  export const ServiceScalarFieldEnum: {
    id: 'id',
    title: 'title',
    price: 'price',
    profileId: 'profileId'
  };

  export type ServiceScalarFieldEnum = (typeof ServiceScalarFieldEnum)[keyof typeof ServiceScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type VendorWhereInput = {
    AND?: Enumerable<VendorWhereInput>
    OR?: Enumerable<VendorWhereInput>
    NOT?: Enumerable<VendorWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    password?: StringFilter | string
  }

  export type VendorOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type VendorWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type VendorOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    _count?: VendorCountOrderByAggregateInput
    _avg?: VendorAvgOrderByAggregateInput
    _max?: VendorMaxOrderByAggregateInput
    _min?: VendorMinOrderByAggregateInput
    _sum?: VendorSumOrderByAggregateInput
  }

  export type VendorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VendorScalarWhereWithAggregatesInput>
    OR?: Enumerable<VendorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VendorScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
  }

  export type ProfileWhereInput = {
    AND?: Enumerable<ProfileWhereInput>
    OR?: Enumerable<ProfileWhereInput>
    NOT?: Enumerable<ProfileWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    address?: StringFilter | string
    description?: StringFilter | string
    type?: StringFilter | string
    profilePic?: StringFilter | string
    start?: StringFilter | string
    end?: StringFilter | string
    details?: DetailsListRelationFilter
    booking?: BookingListRelationFilter
    Reviews?: ReviewsListRelationFilter
    Post?: PostListRelationFilter
    Service?: ServiceListRelationFilter
  }

  export type ProfileOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    description?: SortOrder
    type?: SortOrder
    profilePic?: SortOrder
    start?: SortOrder
    end?: SortOrder
    details?: DetailsOrderByRelationAggregateInput
    booking?: BookingOrderByRelationAggregateInput
    Reviews?: ReviewsOrderByRelationAggregateInput
    Post?: PostOrderByRelationAggregateInput
    Service?: ServiceOrderByRelationAggregateInput
  }

  export type ProfileWhereUniqueInput = {
    id?: number
  }

  export type ProfileOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    description?: SortOrder
    type?: SortOrder
    profilePic?: SortOrder
    start?: SortOrder
    end?: SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _avg?: ProfileAvgOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
    _sum?: ProfileSumOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    address?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    type?: StringWithAggregatesFilter | string
    profilePic?: StringWithAggregatesFilter | string
    start?: StringWithAggregatesFilter | string
    end?: StringWithAggregatesFilter | string
  }

  export type DetailsWhereInput = {
    AND?: Enumerable<DetailsWhereInput>
    OR?: Enumerable<DetailsWhereInput>
    NOT?: Enumerable<DetailsWhereInput>
    id?: IntFilter | number
    profile?: XOR<ProfileRelationFilter, ProfileWhereInput>
    description?: StringFilter | string
    petType?: StringFilter | string
    petSize?: PetSizeListRelationFilter
    profileId?: IntFilter | number
    areaId?: IntFilter | number
    DetailsOnArea?: DetailsOnAreaListRelationFilter
  }

  export type DetailsOrderByWithRelationInput = {
    id?: SortOrder
    profile?: ProfileOrderByWithRelationInput
    description?: SortOrder
    petType?: SortOrder
    petSize?: PetSizeOrderByRelationAggregateInput
    profileId?: SortOrder
    areaId?: SortOrder
    DetailsOnArea?: DetailsOnAreaOrderByRelationAggregateInput
  }

  export type DetailsWhereUniqueInput = {
    id?: number
  }

  export type DetailsOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrder
    petType?: SortOrder
    profileId?: SortOrder
    areaId?: SortOrder
    _count?: DetailsCountOrderByAggregateInput
    _avg?: DetailsAvgOrderByAggregateInput
    _max?: DetailsMaxOrderByAggregateInput
    _min?: DetailsMinOrderByAggregateInput
    _sum?: DetailsSumOrderByAggregateInput
  }

  export type DetailsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DetailsScalarWhereWithAggregatesInput>
    OR?: Enumerable<DetailsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DetailsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    description?: StringWithAggregatesFilter | string
    petType?: StringWithAggregatesFilter | string
    profileId?: IntWithAggregatesFilter | number
    areaId?: IntWithAggregatesFilter | number
  }

  export type DetailsOnAreaWhereInput = {
    AND?: Enumerable<DetailsOnAreaWhereInput>
    OR?: Enumerable<DetailsOnAreaWhereInput>
    NOT?: Enumerable<DetailsOnAreaWhereInput>
    detail?: XOR<DetailsRelationFilter, DetailsWhereInput>
    area?: XOR<AreaRelationFilter, AreaWhereInput>
    assignedAt?: DateTimeFilter | Date | string
    assignedBy?: StringFilter | string
    detailsId?: IntFilter | number
    areaId?: IntFilter | number
  }

  export type DetailsOnAreaOrderByWithRelationInput = {
    detail?: DetailsOrderByWithRelationInput
    area?: AreaOrderByWithRelationInput
    assignedAt?: SortOrder
    assignedBy?: SortOrder
    detailsId?: SortOrder
    areaId?: SortOrder
  }

  export type DetailsOnAreaWhereUniqueInput = {
    detailsId_areaId?: DetailsOnAreaDetailsIdAreaIdCompoundUniqueInput
  }

  export type DetailsOnAreaOrderByWithAggregationInput = {
    assignedAt?: SortOrder
    assignedBy?: SortOrder
    detailsId?: SortOrder
    areaId?: SortOrder
    _count?: DetailsOnAreaCountOrderByAggregateInput
    _avg?: DetailsOnAreaAvgOrderByAggregateInput
    _max?: DetailsOnAreaMaxOrderByAggregateInput
    _min?: DetailsOnAreaMinOrderByAggregateInput
    _sum?: DetailsOnAreaSumOrderByAggregateInput
  }

  export type DetailsOnAreaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DetailsOnAreaScalarWhereWithAggregatesInput>
    OR?: Enumerable<DetailsOnAreaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DetailsOnAreaScalarWhereWithAggregatesInput>
    assignedAt?: DateTimeWithAggregatesFilter | Date | string
    assignedBy?: StringWithAggregatesFilter | string
    detailsId?: IntWithAggregatesFilter | number
    areaId?: IntWithAggregatesFilter | number
  }

  export type PetSizeWhereInput = {
    AND?: Enumerable<PetSizeWhereInput>
    OR?: Enumerable<PetSizeWhereInput>
    NOT?: Enumerable<PetSizeWhereInput>
    id?: IntFilter | number
    weight?: StringFilter | string
    detail?: XOR<DetailsRelationFilter, DetailsWhereInput>
    detailsId?: IntFilter | number
  }

  export type PetSizeOrderByWithRelationInput = {
    id?: SortOrder
    weight?: SortOrder
    detail?: DetailsOrderByWithRelationInput
    detailsId?: SortOrder
  }

  export type PetSizeWhereUniqueInput = {
    id?: number
  }

  export type PetSizeOrderByWithAggregationInput = {
    id?: SortOrder
    weight?: SortOrder
    detailsId?: SortOrder
    _count?: PetSizeCountOrderByAggregateInput
    _avg?: PetSizeAvgOrderByAggregateInput
    _max?: PetSizeMaxOrderByAggregateInput
    _min?: PetSizeMinOrderByAggregateInput
    _sum?: PetSizeSumOrderByAggregateInput
  }

  export type PetSizeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PetSizeScalarWhereWithAggregatesInput>
    OR?: Enumerable<PetSizeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PetSizeScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    weight?: StringWithAggregatesFilter | string
    detailsId?: IntWithAggregatesFilter | number
  }

  export type AreaWhereInput = {
    AND?: Enumerable<AreaWhereInput>
    OR?: Enumerable<AreaWhereInput>
    NOT?: Enumerable<AreaWhereInput>
    id?: IntFilter | number
    north?: BoolFilter | boolean
    south?: BoolFilter | boolean
    east?: BoolFilter | boolean
    west?: BoolFilter | boolean
    DetailsOnArea?: DetailsOnAreaListRelationFilter
  }

  export type AreaOrderByWithRelationInput = {
    id?: SortOrder
    north?: SortOrder
    south?: SortOrder
    east?: SortOrder
    west?: SortOrder
    DetailsOnArea?: DetailsOnAreaOrderByRelationAggregateInput
  }

  export type AreaWhereUniqueInput = {
    id?: number
  }

  export type AreaOrderByWithAggregationInput = {
    id?: SortOrder
    north?: SortOrder
    south?: SortOrder
    east?: SortOrder
    west?: SortOrder
    _count?: AreaCountOrderByAggregateInput
    _avg?: AreaAvgOrderByAggregateInput
    _max?: AreaMaxOrderByAggregateInput
    _min?: AreaMinOrderByAggregateInput
    _sum?: AreaSumOrderByAggregateInput
  }

  export type AreaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AreaScalarWhereWithAggregatesInput>
    OR?: Enumerable<AreaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AreaScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    north?: BoolWithAggregatesFilter | boolean
    south?: BoolWithAggregatesFilter | boolean
    east?: BoolWithAggregatesFilter | boolean
    west?: BoolWithAggregatesFilter | boolean
  }

  export type ReviewsWhereInput = {
    AND?: Enumerable<ReviewsWhereInput>
    OR?: Enumerable<ReviewsWhereInput>
    NOT?: Enumerable<ReviewsWhereInput>
    id?: IntFilter | number
    paws?: IntFilter | number
    comment?: StringFilter | string
    profile?: XOR<ProfileRelationFilter, ProfileWhereInput>
    userProfile?: XOR<UserProfileRelationFilter, UserProfileWhereInput>
    profileId?: IntFilter | number
    userProfileId?: IntFilter | number
  }

  export type ReviewsOrderByWithRelationInput = {
    id?: SortOrder
    paws?: SortOrder
    comment?: SortOrder
    profile?: ProfileOrderByWithRelationInput
    userProfile?: UserProfileOrderByWithRelationInput
    profileId?: SortOrder
    userProfileId?: SortOrder
  }

  export type ReviewsWhereUniqueInput = {
    id?: number
  }

  export type ReviewsOrderByWithAggregationInput = {
    id?: SortOrder
    paws?: SortOrder
    comment?: SortOrder
    profileId?: SortOrder
    userProfileId?: SortOrder
    _count?: ReviewsCountOrderByAggregateInput
    _avg?: ReviewsAvgOrderByAggregateInput
    _max?: ReviewsMaxOrderByAggregateInput
    _min?: ReviewsMinOrderByAggregateInput
    _sum?: ReviewsSumOrderByAggregateInput
  }

  export type ReviewsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ReviewsScalarWhereWithAggregatesInput>
    OR?: Enumerable<ReviewsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ReviewsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    paws?: IntWithAggregatesFilter | number
    comment?: StringWithAggregatesFilter | string
    profileId?: IntWithAggregatesFilter | number
    userProfileId?: IntWithAggregatesFilter | number
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    profile?: XOR<UserProfileRelationFilter, UserProfileWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    profile?: UserProfileOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
  }

  export type UserProfileWhereInput = {
    AND?: Enumerable<UserProfileWhereInput>
    OR?: Enumerable<UserProfileWhereInput>
    NOT?: Enumerable<UserProfileWhereInput>
    id?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    name?: StringFilter | string
    address?: StringFilter | string
    description?: StringFilter | string
    pets?: PetsListRelationFilter
    image?: StringFilter | string
    booking?: BookingListRelationFilter
    reviews?: ReviewsListRelationFilter
    userId?: IntFilter | number
  }

  export type UserProfileOrderByWithRelationInput = {
    id?: SortOrder
    user?: UserOrderByWithRelationInput
    name?: SortOrder
    address?: SortOrder
    description?: SortOrder
    pets?: PetsOrderByRelationAggregateInput
    image?: SortOrder
    booking?: BookingOrderByRelationAggregateInput
    reviews?: ReviewsOrderByRelationAggregateInput
    userId?: SortOrder
  }

  export type UserProfileWhereUniqueInput = {
    id?: number
    userId?: number
  }

  export type UserProfileOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    description?: SortOrder
    image?: SortOrder
    userId?: SortOrder
    _count?: UserProfileCountOrderByAggregateInput
    _avg?: UserProfileAvgOrderByAggregateInput
    _max?: UserProfileMaxOrderByAggregateInput
    _min?: UserProfileMinOrderByAggregateInput
    _sum?: UserProfileSumOrderByAggregateInput
  }

  export type UserProfileScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserProfileScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserProfileScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserProfileScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    address?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    image?: StringWithAggregatesFilter | string
    userId?: IntWithAggregatesFilter | number
  }

  export type PetsWhereInput = {
    AND?: Enumerable<PetsWhereInput>
    OR?: Enumerable<PetsWhereInput>
    NOT?: Enumerable<PetsWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    type?: StringFilter | string
    breed?: StringFilter | string
    birth?: DateTimeFilter | Date | string
    image?: StringFilter | string
    sterilized?: BoolFilter | boolean
    owner?: XOR<UserProfileRelationFilter, UserProfileWhereInput>
    userProfileId?: IntFilter | number
  }

  export type PetsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    breed?: SortOrder
    birth?: SortOrder
    image?: SortOrder
    sterilized?: SortOrder
    owner?: UserProfileOrderByWithRelationInput
    userProfileId?: SortOrder
  }

  export type PetsWhereUniqueInput = {
    id?: number
  }

  export type PetsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    breed?: SortOrder
    birth?: SortOrder
    image?: SortOrder
    sterilized?: SortOrder
    userProfileId?: SortOrder
    _count?: PetsCountOrderByAggregateInput
    _avg?: PetsAvgOrderByAggregateInput
    _max?: PetsMaxOrderByAggregateInput
    _min?: PetsMinOrderByAggregateInput
    _sum?: PetsSumOrderByAggregateInput
  }

  export type PetsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PetsScalarWhereWithAggregatesInput>
    OR?: Enumerable<PetsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PetsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    type?: StringWithAggregatesFilter | string
    breed?: StringWithAggregatesFilter | string
    birth?: DateTimeWithAggregatesFilter | Date | string
    image?: StringWithAggregatesFilter | string
    sterilized?: BoolWithAggregatesFilter | boolean
    userProfileId?: IntWithAggregatesFilter | number
  }

  export type PostWhereInput = {
    AND?: Enumerable<PostWhereInput>
    OR?: Enumerable<PostWhereInput>
    NOT?: Enumerable<PostWhereInput>
    id?: IntFilter | number
    image?: StringFilter | string
    message?: StringFilter | string
    profile?: XOR<ProfileRelationFilter, ProfileWhereInput>
    profileId?: IntFilter | number
  }

  export type PostOrderByWithRelationInput = {
    id?: SortOrder
    image?: SortOrder
    message?: SortOrder
    profile?: ProfileOrderByWithRelationInput
    profileId?: SortOrder
  }

  export type PostWhereUniqueInput = {
    id?: number
  }

  export type PostOrderByWithAggregationInput = {
    id?: SortOrder
    image?: SortOrder
    message?: SortOrder
    profileId?: SortOrder
    _count?: PostCountOrderByAggregateInput
    _avg?: PostAvgOrderByAggregateInput
    _max?: PostMaxOrderByAggregateInput
    _min?: PostMinOrderByAggregateInput
    _sum?: PostSumOrderByAggregateInput
  }

  export type PostScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PostScalarWhereWithAggregatesInput>
    OR?: Enumerable<PostScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PostScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    image?: StringWithAggregatesFilter | string
    message?: StringWithAggregatesFilter | string
    profileId?: IntWithAggregatesFilter | number
  }

  export type BookingWhereInput = {
    AND?: Enumerable<BookingWhereInput>
    OR?: Enumerable<BookingWhereInput>
    NOT?: Enumerable<BookingWhereInput>
    id?: IntFilter | number
    profile?: XOR<ProfileRelationFilter, ProfileWhereInput>
    user?: XOR<UserProfileRelationFilter, UserProfileWhereInput>
    service?: XOR<ServiceRelationFilter, ServiceWhereInput>
    dateTime?: DateTimeFilter | Date | string
    status?: StringFilter | string
    profileId?: IntFilter | number
    userProfileId?: IntFilter | number
    serviceId?: IntFilter | number
  }

  export type BookingOrderByWithRelationInput = {
    id?: SortOrder
    profile?: ProfileOrderByWithRelationInput
    user?: UserProfileOrderByWithRelationInput
    service?: ServiceOrderByWithRelationInput
    dateTime?: SortOrder
    status?: SortOrder
    profileId?: SortOrder
    userProfileId?: SortOrder
    serviceId?: SortOrder
  }

  export type BookingWhereUniqueInput = {
    id?: number
  }

  export type BookingOrderByWithAggregationInput = {
    id?: SortOrder
    dateTime?: SortOrder
    status?: SortOrder
    profileId?: SortOrder
    userProfileId?: SortOrder
    serviceId?: SortOrder
    _count?: BookingCountOrderByAggregateInput
    _avg?: BookingAvgOrderByAggregateInput
    _max?: BookingMaxOrderByAggregateInput
    _min?: BookingMinOrderByAggregateInput
    _sum?: BookingSumOrderByAggregateInput
  }

  export type BookingScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BookingScalarWhereWithAggregatesInput>
    OR?: Enumerable<BookingScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BookingScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    dateTime?: DateTimeWithAggregatesFilter | Date | string
    status?: StringWithAggregatesFilter | string
    profileId?: IntWithAggregatesFilter | number
    userProfileId?: IntWithAggregatesFilter | number
    serviceId?: IntWithAggregatesFilter | number
  }

  export type ServiceWhereInput = {
    AND?: Enumerable<ServiceWhereInput>
    OR?: Enumerable<ServiceWhereInput>
    NOT?: Enumerable<ServiceWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    price?: IntFilter | number
    vendor?: XOR<ProfileRelationFilter, ProfileWhereInput>
    booking?: BookingListRelationFilter
    profileId?: IntFilter | number
  }

  export type ServiceOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    price?: SortOrder
    vendor?: ProfileOrderByWithRelationInput
    booking?: BookingOrderByRelationAggregateInput
    profileId?: SortOrder
  }

  export type ServiceWhereUniqueInput = {
    id?: number
  }

  export type ServiceOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    price?: SortOrder
    profileId?: SortOrder
    _count?: ServiceCountOrderByAggregateInput
    _avg?: ServiceAvgOrderByAggregateInput
    _max?: ServiceMaxOrderByAggregateInput
    _min?: ServiceMinOrderByAggregateInput
    _sum?: ServiceSumOrderByAggregateInput
  }

  export type ServiceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ServiceScalarWhereWithAggregatesInput>
    OR?: Enumerable<ServiceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ServiceScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    price?: IntWithAggregatesFilter | number
    profileId?: IntWithAggregatesFilter | number
  }

  export type VendorCreateInput = {
    email: string
    password: string
  }

  export type VendorUncheckedCreateInput = {
    id?: number
    email: string
    password: string
  }

  export type VendorUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type VendorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type VendorCreateManyInput = {
    id?: number
    email: string
    password: string
  }

  export type VendorUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type VendorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type ProfileCreateInput = {
    name: string
    address: string
    description: string
    type: string
    profilePic?: string
    start: string
    end: string
    details?: DetailsCreateNestedManyWithoutProfileInput
    booking?: BookingCreateNestedManyWithoutProfileInput
    Reviews?: ReviewsCreateNestedManyWithoutProfileInput
    Post?: PostCreateNestedManyWithoutProfileInput
    Service?: ServiceCreateNestedManyWithoutVendorInput
  }

  export type ProfileUncheckedCreateInput = {
    id?: number
    name: string
    address: string
    description: string
    type: string
    profilePic?: string
    start: string
    end: string
    details?: DetailsUncheckedCreateNestedManyWithoutProfileInput
    booking?: BookingUncheckedCreateNestedManyWithoutProfileInput
    Reviews?: ReviewsUncheckedCreateNestedManyWithoutProfileInput
    Post?: PostUncheckedCreateNestedManyWithoutProfileInput
    Service?: ServiceUncheckedCreateNestedManyWithoutVendorInput
  }

  export type ProfileUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    profilePic?: StringFieldUpdateOperationsInput | string
    start?: StringFieldUpdateOperationsInput | string
    end?: StringFieldUpdateOperationsInput | string
    details?: DetailsUpdateManyWithoutProfileNestedInput
    booking?: BookingUpdateManyWithoutProfileNestedInput
    Reviews?: ReviewsUpdateManyWithoutProfileNestedInput
    Post?: PostUpdateManyWithoutProfileNestedInput
    Service?: ServiceUpdateManyWithoutVendorNestedInput
  }

  export type ProfileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    profilePic?: StringFieldUpdateOperationsInput | string
    start?: StringFieldUpdateOperationsInput | string
    end?: StringFieldUpdateOperationsInput | string
    details?: DetailsUncheckedUpdateManyWithoutProfileNestedInput
    booking?: BookingUncheckedUpdateManyWithoutProfileNestedInput
    Reviews?: ReviewsUncheckedUpdateManyWithoutProfileNestedInput
    Post?: PostUncheckedUpdateManyWithoutProfileNestedInput
    Service?: ServiceUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type ProfileCreateManyInput = {
    id?: number
    name: string
    address: string
    description: string
    type: string
    profilePic?: string
    start: string
    end: string
  }

  export type ProfileUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    profilePic?: StringFieldUpdateOperationsInput | string
    start?: StringFieldUpdateOperationsInput | string
    end?: StringFieldUpdateOperationsInput | string
  }

  export type ProfileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    profilePic?: StringFieldUpdateOperationsInput | string
    start?: StringFieldUpdateOperationsInput | string
    end?: StringFieldUpdateOperationsInput | string
  }

  export type DetailsCreateInput = {
    profile: ProfileCreateNestedOneWithoutDetailsInput
    description: string
    petType: string
    petSize?: PetSizeCreateNestedManyWithoutDetailInput
    areaId: number
    DetailsOnArea?: DetailsOnAreaCreateNestedManyWithoutDetailInput
  }

  export type DetailsUncheckedCreateInput = {
    id?: number
    description: string
    petType: string
    petSize?: PetSizeUncheckedCreateNestedManyWithoutDetailInput
    profileId: number
    areaId: number
    DetailsOnArea?: DetailsOnAreaUncheckedCreateNestedManyWithoutDetailInput
  }

  export type DetailsUpdateInput = {
    profile?: ProfileUpdateOneRequiredWithoutDetailsNestedInput
    description?: StringFieldUpdateOperationsInput | string
    petType?: StringFieldUpdateOperationsInput | string
    petSize?: PetSizeUpdateManyWithoutDetailNestedInput
    areaId?: IntFieldUpdateOperationsInput | number
    DetailsOnArea?: DetailsOnAreaUpdateManyWithoutDetailNestedInput
  }

  export type DetailsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    petType?: StringFieldUpdateOperationsInput | string
    petSize?: PetSizeUncheckedUpdateManyWithoutDetailNestedInput
    profileId?: IntFieldUpdateOperationsInput | number
    areaId?: IntFieldUpdateOperationsInput | number
    DetailsOnArea?: DetailsOnAreaUncheckedUpdateManyWithoutDetailNestedInput
  }

  export type DetailsCreateManyInput = {
    id?: number
    description: string
    petType: string
    profileId: number
    areaId: number
  }

  export type DetailsUpdateManyMutationInput = {
    description?: StringFieldUpdateOperationsInput | string
    petType?: StringFieldUpdateOperationsInput | string
    areaId?: IntFieldUpdateOperationsInput | number
  }

  export type DetailsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    petType?: StringFieldUpdateOperationsInput | string
    profileId?: IntFieldUpdateOperationsInput | number
    areaId?: IntFieldUpdateOperationsInput | number
  }

  export type DetailsOnAreaCreateInput = {
    detail: DetailsCreateNestedOneWithoutDetailsOnAreaInput
    area: AreaCreateNestedOneWithoutDetailsOnAreaInput
    assignedAt?: Date | string
    assignedBy: string
  }

  export type DetailsOnAreaUncheckedCreateInput = {
    assignedAt?: Date | string
    assignedBy: string
    detailsId: number
    areaId: number
  }

  export type DetailsOnAreaUpdateInput = {
    detail?: DetailsUpdateOneRequiredWithoutDetailsOnAreaNestedInput
    area?: AreaUpdateOneRequiredWithoutDetailsOnAreaNestedInput
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type DetailsOnAreaUncheckedUpdateInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
    detailsId?: IntFieldUpdateOperationsInput | number
    areaId?: IntFieldUpdateOperationsInput | number
  }

  export type DetailsOnAreaCreateManyInput = {
    assignedAt?: Date | string
    assignedBy: string
    detailsId: number
    areaId: number
  }

  export type DetailsOnAreaUpdateManyMutationInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type DetailsOnAreaUncheckedUpdateManyInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
    detailsId?: IntFieldUpdateOperationsInput | number
    areaId?: IntFieldUpdateOperationsInput | number
  }

  export type PetSizeCreateInput = {
    weight: string
    detail: DetailsCreateNestedOneWithoutPetSizeInput
  }

  export type PetSizeUncheckedCreateInput = {
    id?: number
    weight: string
    detailsId: number
  }

  export type PetSizeUpdateInput = {
    weight?: StringFieldUpdateOperationsInput | string
    detail?: DetailsUpdateOneRequiredWithoutPetSizeNestedInput
  }

  export type PetSizeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    weight?: StringFieldUpdateOperationsInput | string
    detailsId?: IntFieldUpdateOperationsInput | number
  }

  export type PetSizeCreateManyInput = {
    id?: number
    weight: string
    detailsId: number
  }

  export type PetSizeUpdateManyMutationInput = {
    weight?: StringFieldUpdateOperationsInput | string
  }

  export type PetSizeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    weight?: StringFieldUpdateOperationsInput | string
    detailsId?: IntFieldUpdateOperationsInput | number
  }

  export type AreaCreateInput = {
    north?: boolean
    south?: boolean
    east?: boolean
    west?: boolean
    DetailsOnArea?: DetailsOnAreaCreateNestedManyWithoutAreaInput
  }

  export type AreaUncheckedCreateInput = {
    id?: number
    north?: boolean
    south?: boolean
    east?: boolean
    west?: boolean
    DetailsOnArea?: DetailsOnAreaUncheckedCreateNestedManyWithoutAreaInput
  }

  export type AreaUpdateInput = {
    north?: BoolFieldUpdateOperationsInput | boolean
    south?: BoolFieldUpdateOperationsInput | boolean
    east?: BoolFieldUpdateOperationsInput | boolean
    west?: BoolFieldUpdateOperationsInput | boolean
    DetailsOnArea?: DetailsOnAreaUpdateManyWithoutAreaNestedInput
  }

  export type AreaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    north?: BoolFieldUpdateOperationsInput | boolean
    south?: BoolFieldUpdateOperationsInput | boolean
    east?: BoolFieldUpdateOperationsInput | boolean
    west?: BoolFieldUpdateOperationsInput | boolean
    DetailsOnArea?: DetailsOnAreaUncheckedUpdateManyWithoutAreaNestedInput
  }

  export type AreaCreateManyInput = {
    id?: number
    north?: boolean
    south?: boolean
    east?: boolean
    west?: boolean
  }

  export type AreaUpdateManyMutationInput = {
    north?: BoolFieldUpdateOperationsInput | boolean
    south?: BoolFieldUpdateOperationsInput | boolean
    east?: BoolFieldUpdateOperationsInput | boolean
    west?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AreaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    north?: BoolFieldUpdateOperationsInput | boolean
    south?: BoolFieldUpdateOperationsInput | boolean
    east?: BoolFieldUpdateOperationsInput | boolean
    west?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ReviewsCreateInput = {
    paws: number
    comment: string
    profile: ProfileCreateNestedOneWithoutReviewsInput
    userProfile: UserProfileCreateNestedOneWithoutReviewsInput
  }

  export type ReviewsUncheckedCreateInput = {
    id?: number
    paws: number
    comment: string
    profileId: number
    userProfileId: number
  }

  export type ReviewsUpdateInput = {
    paws?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    profile?: ProfileUpdateOneRequiredWithoutReviewsNestedInput
    userProfile?: UserProfileUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    paws?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    profileId?: IntFieldUpdateOperationsInput | number
    userProfileId?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewsCreateManyInput = {
    id?: number
    paws: number
    comment: string
    profileId: number
    userProfileId: number
  }

  export type ReviewsUpdateManyMutationInput = {
    paws?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
  }

  export type ReviewsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    paws?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    profileId?: IntFieldUpdateOperationsInput | number
    userProfileId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateInput = {
    email: string
    profile?: UserProfileCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
  }

  export type UserProfileCreateInput = {
    user: UserCreateNestedOneWithoutProfileInput
    name: string
    address: string
    description: string
    pets?: PetsCreateNestedManyWithoutOwnerInput
    image: string
    booking?: BookingCreateNestedManyWithoutUserInput
    reviews?: ReviewsCreateNestedManyWithoutUserProfileInput
  }

  export type UserProfileUncheckedCreateInput = {
    id?: number
    name: string
    address: string
    description: string
    pets?: PetsUncheckedCreateNestedManyWithoutOwnerInput
    image: string
    booking?: BookingUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewsUncheckedCreateNestedManyWithoutUserProfileInput
    userId: number
  }

  export type UserProfileUpdateInput = {
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    pets?: PetsUpdateManyWithoutOwnerNestedInput
    image?: StringFieldUpdateOperationsInput | string
    booking?: BookingUpdateManyWithoutUserNestedInput
    reviews?: ReviewsUpdateManyWithoutUserProfileNestedInput
  }

  export type UserProfileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    pets?: PetsUncheckedUpdateManyWithoutOwnerNestedInput
    image?: StringFieldUpdateOperationsInput | string
    booking?: BookingUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewsUncheckedUpdateManyWithoutUserProfileNestedInput
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserProfileCreateManyInput = {
    id?: number
    name: string
    address: string
    description: string
    image: string
    userId: number
  }

  export type UserProfileUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type UserProfileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type PetsCreateInput = {
    name: string
    type: string
    breed: string
    birth: Date | string
    image: string
    sterilized: boolean
    owner: UserProfileCreateNestedOneWithoutPetsInput
  }

  export type PetsUncheckedCreateInput = {
    id?: number
    name: string
    type: string
    breed: string
    birth: Date | string
    image: string
    sterilized: boolean
    userProfileId: number
  }

  export type PetsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    sterilized?: BoolFieldUpdateOperationsInput | boolean
    owner?: UserProfileUpdateOneRequiredWithoutPetsNestedInput
  }

  export type PetsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    sterilized?: BoolFieldUpdateOperationsInput | boolean
    userProfileId?: IntFieldUpdateOperationsInput | number
  }

  export type PetsCreateManyInput = {
    id?: number
    name: string
    type: string
    breed: string
    birth: Date | string
    image: string
    sterilized: boolean
    userProfileId: number
  }

  export type PetsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    sterilized?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PetsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    sterilized?: BoolFieldUpdateOperationsInput | boolean
    userProfileId?: IntFieldUpdateOperationsInput | number
  }

  export type PostCreateInput = {
    image: string
    message: string
    profile: ProfileCreateNestedOneWithoutPostInput
  }

  export type PostUncheckedCreateInput = {
    id?: number
    image: string
    message: string
    profileId: number
  }

  export type PostUpdateInput = {
    image?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    profile?: ProfileUpdateOneRequiredWithoutPostNestedInput
  }

  export type PostUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    profileId?: IntFieldUpdateOperationsInput | number
  }

  export type PostCreateManyInput = {
    id?: number
    image: string
    message: string
    profileId: number
  }

  export type PostUpdateManyMutationInput = {
    image?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type PostUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    profileId?: IntFieldUpdateOperationsInput | number
  }

  export type BookingCreateInput = {
    profile: ProfileCreateNestedOneWithoutBookingInput
    user: UserProfileCreateNestedOneWithoutBookingInput
    service: ServiceCreateNestedOneWithoutBookingInput
    dateTime: Date | string
    status: string
  }

  export type BookingUncheckedCreateInput = {
    id?: number
    dateTime: Date | string
    status: string
    profileId: number
    userProfileId: number
    serviceId: number
  }

  export type BookingUpdateInput = {
    profile?: ProfileUpdateOneRequiredWithoutBookingNestedInput
    user?: UserProfileUpdateOneRequiredWithoutBookingNestedInput
    service?: ServiceUpdateOneRequiredWithoutBookingNestedInput
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type BookingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    profileId?: IntFieldUpdateOperationsInput | number
    userProfileId?: IntFieldUpdateOperationsInput | number
    serviceId?: IntFieldUpdateOperationsInput | number
  }

  export type BookingCreateManyInput = {
    id?: number
    dateTime: Date | string
    status: string
    profileId: number
    userProfileId: number
    serviceId: number
  }

  export type BookingUpdateManyMutationInput = {
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type BookingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    profileId?: IntFieldUpdateOperationsInput | number
    userProfileId?: IntFieldUpdateOperationsInput | number
    serviceId?: IntFieldUpdateOperationsInput | number
  }

  export type ServiceCreateInput = {
    title: string
    price: number
    vendor: ProfileCreateNestedOneWithoutServiceInput
    booking?: BookingCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateInput = {
    id?: number
    title: string
    price: number
    booking?: BookingUncheckedCreateNestedManyWithoutServiceInput
    profileId: number
  }

  export type ServiceUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    vendor?: ProfileUpdateOneRequiredWithoutServiceNestedInput
    booking?: BookingUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    booking?: BookingUncheckedUpdateManyWithoutServiceNestedInput
    profileId?: IntFieldUpdateOperationsInput | number
  }

  export type ServiceCreateManyInput = {
    id?: number
    title: string
    price: number
    profileId: number
  }

  export type ServiceUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
  }

  export type ServiceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    profileId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type VendorCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type VendorAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type VendorMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type VendorMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type VendorSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DetailsListRelationFilter = {
    every?: DetailsWhereInput
    some?: DetailsWhereInput
    none?: DetailsWhereInput
  }

  export type BookingListRelationFilter = {
    every?: BookingWhereInput
    some?: BookingWhereInput
    none?: BookingWhereInput
  }

  export type ReviewsListRelationFilter = {
    every?: ReviewsWhereInput
    some?: ReviewsWhereInput
    none?: ReviewsWhereInput
  }

  export type PostListRelationFilter = {
    every?: PostWhereInput
    some?: PostWhereInput
    none?: PostWhereInput
  }

  export type ServiceListRelationFilter = {
    every?: ServiceWhereInput
    some?: ServiceWhereInput
    none?: ServiceWhereInput
  }

  export type DetailsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BookingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReviewsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ServiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfileCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    description?: SortOrder
    type?: SortOrder
    profilePic?: SortOrder
    start?: SortOrder
    end?: SortOrder
  }

  export type ProfileAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    description?: SortOrder
    type?: SortOrder
    profilePic?: SortOrder
    start?: SortOrder
    end?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    description?: SortOrder
    type?: SortOrder
    profilePic?: SortOrder
    start?: SortOrder
    end?: SortOrder
  }

  export type ProfileSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProfileRelationFilter = {
    is?: ProfileWhereInput
    isNot?: ProfileWhereInput
  }

  export type PetSizeListRelationFilter = {
    every?: PetSizeWhereInput
    some?: PetSizeWhereInput
    none?: PetSizeWhereInput
  }

  export type DetailsOnAreaListRelationFilter = {
    every?: DetailsOnAreaWhereInput
    some?: DetailsOnAreaWhereInput
    none?: DetailsOnAreaWhereInput
  }

  export type PetSizeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DetailsOnAreaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DetailsCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    petType?: SortOrder
    profileId?: SortOrder
    areaId?: SortOrder
  }

  export type DetailsAvgOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    areaId?: SortOrder
  }

  export type DetailsMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    petType?: SortOrder
    profileId?: SortOrder
    areaId?: SortOrder
  }

  export type DetailsMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    petType?: SortOrder
    profileId?: SortOrder
    areaId?: SortOrder
  }

  export type DetailsSumOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    areaId?: SortOrder
  }

  export type DetailsRelationFilter = {
    is?: DetailsWhereInput
    isNot?: DetailsWhereInput
  }

  export type AreaRelationFilter = {
    is?: AreaWhereInput
    isNot?: AreaWhereInput
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type DetailsOnAreaDetailsIdAreaIdCompoundUniqueInput = {
    detailsId: number
    areaId: number
  }

  export type DetailsOnAreaCountOrderByAggregateInput = {
    assignedAt?: SortOrder
    assignedBy?: SortOrder
    detailsId?: SortOrder
    areaId?: SortOrder
  }

  export type DetailsOnAreaAvgOrderByAggregateInput = {
    detailsId?: SortOrder
    areaId?: SortOrder
  }

  export type DetailsOnAreaMaxOrderByAggregateInput = {
    assignedAt?: SortOrder
    assignedBy?: SortOrder
    detailsId?: SortOrder
    areaId?: SortOrder
  }

  export type DetailsOnAreaMinOrderByAggregateInput = {
    assignedAt?: SortOrder
    assignedBy?: SortOrder
    detailsId?: SortOrder
    areaId?: SortOrder
  }

  export type DetailsOnAreaSumOrderByAggregateInput = {
    detailsId?: SortOrder
    areaId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type PetSizeCountOrderByAggregateInput = {
    id?: SortOrder
    weight?: SortOrder
    detailsId?: SortOrder
  }

  export type PetSizeAvgOrderByAggregateInput = {
    id?: SortOrder
    detailsId?: SortOrder
  }

  export type PetSizeMaxOrderByAggregateInput = {
    id?: SortOrder
    weight?: SortOrder
    detailsId?: SortOrder
  }

  export type PetSizeMinOrderByAggregateInput = {
    id?: SortOrder
    weight?: SortOrder
    detailsId?: SortOrder
  }

  export type PetSizeSumOrderByAggregateInput = {
    id?: SortOrder
    detailsId?: SortOrder
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type AreaCountOrderByAggregateInput = {
    id?: SortOrder
    north?: SortOrder
    south?: SortOrder
    east?: SortOrder
    west?: SortOrder
  }

  export type AreaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AreaMaxOrderByAggregateInput = {
    id?: SortOrder
    north?: SortOrder
    south?: SortOrder
    east?: SortOrder
    west?: SortOrder
  }

  export type AreaMinOrderByAggregateInput = {
    id?: SortOrder
    north?: SortOrder
    south?: SortOrder
    east?: SortOrder
    west?: SortOrder
  }

  export type AreaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type UserProfileRelationFilter = {
    is?: UserProfileWhereInput | null
    isNot?: UserProfileWhereInput | null
  }

  export type ReviewsCountOrderByAggregateInput = {
    id?: SortOrder
    paws?: SortOrder
    comment?: SortOrder
    profileId?: SortOrder
    userProfileId?: SortOrder
  }

  export type ReviewsAvgOrderByAggregateInput = {
    id?: SortOrder
    paws?: SortOrder
    profileId?: SortOrder
    userProfileId?: SortOrder
  }

  export type ReviewsMaxOrderByAggregateInput = {
    id?: SortOrder
    paws?: SortOrder
    comment?: SortOrder
    profileId?: SortOrder
    userProfileId?: SortOrder
  }

  export type ReviewsMinOrderByAggregateInput = {
    id?: SortOrder
    paws?: SortOrder
    comment?: SortOrder
    profileId?: SortOrder
    userProfileId?: SortOrder
  }

  export type ReviewsSumOrderByAggregateInput = {
    id?: SortOrder
    paws?: SortOrder
    profileId?: SortOrder
    userProfileId?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type PetsListRelationFilter = {
    every?: PetsWhereInput
    some?: PetsWhereInput
    none?: PetsWhereInput
  }

  export type PetsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserProfileCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    description?: SortOrder
    image?: SortOrder
    userId?: SortOrder
  }

  export type UserProfileAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    description?: SortOrder
    image?: SortOrder
    userId?: SortOrder
  }

  export type UserProfileMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    description?: SortOrder
    image?: SortOrder
    userId?: SortOrder
  }

  export type UserProfileSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type PetsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    breed?: SortOrder
    birth?: SortOrder
    image?: SortOrder
    sterilized?: SortOrder
    userProfileId?: SortOrder
  }

  export type PetsAvgOrderByAggregateInput = {
    id?: SortOrder
    userProfileId?: SortOrder
  }

  export type PetsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    breed?: SortOrder
    birth?: SortOrder
    image?: SortOrder
    sterilized?: SortOrder
    userProfileId?: SortOrder
  }

  export type PetsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    breed?: SortOrder
    birth?: SortOrder
    image?: SortOrder
    sterilized?: SortOrder
    userProfileId?: SortOrder
  }

  export type PetsSumOrderByAggregateInput = {
    id?: SortOrder
    userProfileId?: SortOrder
  }

  export type PostCountOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    message?: SortOrder
    profileId?: SortOrder
  }

  export type PostAvgOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
  }

  export type PostMaxOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    message?: SortOrder
    profileId?: SortOrder
  }

  export type PostMinOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    message?: SortOrder
    profileId?: SortOrder
  }

  export type PostSumOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
  }

  export type ServiceRelationFilter = {
    is?: ServiceWhereInput
    isNot?: ServiceWhereInput
  }

  export type BookingCountOrderByAggregateInput = {
    id?: SortOrder
    dateTime?: SortOrder
    status?: SortOrder
    profileId?: SortOrder
    userProfileId?: SortOrder
    serviceId?: SortOrder
  }

  export type BookingAvgOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    userProfileId?: SortOrder
    serviceId?: SortOrder
  }

  export type BookingMaxOrderByAggregateInput = {
    id?: SortOrder
    dateTime?: SortOrder
    status?: SortOrder
    profileId?: SortOrder
    userProfileId?: SortOrder
    serviceId?: SortOrder
  }

  export type BookingMinOrderByAggregateInput = {
    id?: SortOrder
    dateTime?: SortOrder
    status?: SortOrder
    profileId?: SortOrder
    userProfileId?: SortOrder
    serviceId?: SortOrder
  }

  export type BookingSumOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    userProfileId?: SortOrder
    serviceId?: SortOrder
  }

  export type ServiceCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    price?: SortOrder
    profileId?: SortOrder
  }

  export type ServiceAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    profileId?: SortOrder
  }

  export type ServiceMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    price?: SortOrder
    profileId?: SortOrder
  }

  export type ServiceMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    price?: SortOrder
    profileId?: SortOrder
  }

  export type ServiceSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    profileId?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DetailsCreateNestedManyWithoutProfileInput = {
    create?: XOR<Enumerable<DetailsCreateWithoutProfileInput>, Enumerable<DetailsUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<DetailsCreateOrConnectWithoutProfileInput>
    createMany?: DetailsCreateManyProfileInputEnvelope
    connect?: Enumerable<DetailsWhereUniqueInput>
  }

  export type BookingCreateNestedManyWithoutProfileInput = {
    create?: XOR<Enumerable<BookingCreateWithoutProfileInput>, Enumerable<BookingUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutProfileInput>
    createMany?: BookingCreateManyProfileInputEnvelope
    connect?: Enumerable<BookingWhereUniqueInput>
  }

  export type ReviewsCreateNestedManyWithoutProfileInput = {
    create?: XOR<Enumerable<ReviewsCreateWithoutProfileInput>, Enumerable<ReviewsUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<ReviewsCreateOrConnectWithoutProfileInput>
    createMany?: ReviewsCreateManyProfileInputEnvelope
    connect?: Enumerable<ReviewsWhereUniqueInput>
  }

  export type PostCreateNestedManyWithoutProfileInput = {
    create?: XOR<Enumerable<PostCreateWithoutProfileInput>, Enumerable<PostUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutProfileInput>
    createMany?: PostCreateManyProfileInputEnvelope
    connect?: Enumerable<PostWhereUniqueInput>
  }

  export type ServiceCreateNestedManyWithoutVendorInput = {
    create?: XOR<Enumerable<ServiceCreateWithoutVendorInput>, Enumerable<ServiceUncheckedCreateWithoutVendorInput>>
    connectOrCreate?: Enumerable<ServiceCreateOrConnectWithoutVendorInput>
    createMany?: ServiceCreateManyVendorInputEnvelope
    connect?: Enumerable<ServiceWhereUniqueInput>
  }

  export type DetailsUncheckedCreateNestedManyWithoutProfileInput = {
    create?: XOR<Enumerable<DetailsCreateWithoutProfileInput>, Enumerable<DetailsUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<DetailsCreateOrConnectWithoutProfileInput>
    createMany?: DetailsCreateManyProfileInputEnvelope
    connect?: Enumerable<DetailsWhereUniqueInput>
  }

  export type BookingUncheckedCreateNestedManyWithoutProfileInput = {
    create?: XOR<Enumerable<BookingCreateWithoutProfileInput>, Enumerable<BookingUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutProfileInput>
    createMany?: BookingCreateManyProfileInputEnvelope
    connect?: Enumerable<BookingWhereUniqueInput>
  }

  export type ReviewsUncheckedCreateNestedManyWithoutProfileInput = {
    create?: XOR<Enumerable<ReviewsCreateWithoutProfileInput>, Enumerable<ReviewsUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<ReviewsCreateOrConnectWithoutProfileInput>
    createMany?: ReviewsCreateManyProfileInputEnvelope
    connect?: Enumerable<ReviewsWhereUniqueInput>
  }

  export type PostUncheckedCreateNestedManyWithoutProfileInput = {
    create?: XOR<Enumerable<PostCreateWithoutProfileInput>, Enumerable<PostUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutProfileInput>
    createMany?: PostCreateManyProfileInputEnvelope
    connect?: Enumerable<PostWhereUniqueInput>
  }

  export type ServiceUncheckedCreateNestedManyWithoutVendorInput = {
    create?: XOR<Enumerable<ServiceCreateWithoutVendorInput>, Enumerable<ServiceUncheckedCreateWithoutVendorInput>>
    connectOrCreate?: Enumerable<ServiceCreateOrConnectWithoutVendorInput>
    createMany?: ServiceCreateManyVendorInputEnvelope
    connect?: Enumerable<ServiceWhereUniqueInput>
  }

  export type DetailsUpdateManyWithoutProfileNestedInput = {
    create?: XOR<Enumerable<DetailsCreateWithoutProfileInput>, Enumerable<DetailsUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<DetailsCreateOrConnectWithoutProfileInput>
    upsert?: Enumerable<DetailsUpsertWithWhereUniqueWithoutProfileInput>
    createMany?: DetailsCreateManyProfileInputEnvelope
    set?: Enumerable<DetailsWhereUniqueInput>
    disconnect?: Enumerable<DetailsWhereUniqueInput>
    delete?: Enumerable<DetailsWhereUniqueInput>
    connect?: Enumerable<DetailsWhereUniqueInput>
    update?: Enumerable<DetailsUpdateWithWhereUniqueWithoutProfileInput>
    updateMany?: Enumerable<DetailsUpdateManyWithWhereWithoutProfileInput>
    deleteMany?: Enumerable<DetailsScalarWhereInput>
  }

  export type BookingUpdateManyWithoutProfileNestedInput = {
    create?: XOR<Enumerable<BookingCreateWithoutProfileInput>, Enumerable<BookingUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutProfileInput>
    upsert?: Enumerable<BookingUpsertWithWhereUniqueWithoutProfileInput>
    createMany?: BookingCreateManyProfileInputEnvelope
    set?: Enumerable<BookingWhereUniqueInput>
    disconnect?: Enumerable<BookingWhereUniqueInput>
    delete?: Enumerable<BookingWhereUniqueInput>
    connect?: Enumerable<BookingWhereUniqueInput>
    update?: Enumerable<BookingUpdateWithWhereUniqueWithoutProfileInput>
    updateMany?: Enumerable<BookingUpdateManyWithWhereWithoutProfileInput>
    deleteMany?: Enumerable<BookingScalarWhereInput>
  }

  export type ReviewsUpdateManyWithoutProfileNestedInput = {
    create?: XOR<Enumerable<ReviewsCreateWithoutProfileInput>, Enumerable<ReviewsUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<ReviewsCreateOrConnectWithoutProfileInput>
    upsert?: Enumerable<ReviewsUpsertWithWhereUniqueWithoutProfileInput>
    createMany?: ReviewsCreateManyProfileInputEnvelope
    set?: Enumerable<ReviewsWhereUniqueInput>
    disconnect?: Enumerable<ReviewsWhereUniqueInput>
    delete?: Enumerable<ReviewsWhereUniqueInput>
    connect?: Enumerable<ReviewsWhereUniqueInput>
    update?: Enumerable<ReviewsUpdateWithWhereUniqueWithoutProfileInput>
    updateMany?: Enumerable<ReviewsUpdateManyWithWhereWithoutProfileInput>
    deleteMany?: Enumerable<ReviewsScalarWhereInput>
  }

  export type PostUpdateManyWithoutProfileNestedInput = {
    create?: XOR<Enumerable<PostCreateWithoutProfileInput>, Enumerable<PostUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutProfileInput>
    upsert?: Enumerable<PostUpsertWithWhereUniqueWithoutProfileInput>
    createMany?: PostCreateManyProfileInputEnvelope
    set?: Enumerable<PostWhereUniqueInput>
    disconnect?: Enumerable<PostWhereUniqueInput>
    delete?: Enumerable<PostWhereUniqueInput>
    connect?: Enumerable<PostWhereUniqueInput>
    update?: Enumerable<PostUpdateWithWhereUniqueWithoutProfileInput>
    updateMany?: Enumerable<PostUpdateManyWithWhereWithoutProfileInput>
    deleteMany?: Enumerable<PostScalarWhereInput>
  }

  export type ServiceUpdateManyWithoutVendorNestedInput = {
    create?: XOR<Enumerable<ServiceCreateWithoutVendorInput>, Enumerable<ServiceUncheckedCreateWithoutVendorInput>>
    connectOrCreate?: Enumerable<ServiceCreateOrConnectWithoutVendorInput>
    upsert?: Enumerable<ServiceUpsertWithWhereUniqueWithoutVendorInput>
    createMany?: ServiceCreateManyVendorInputEnvelope
    set?: Enumerable<ServiceWhereUniqueInput>
    disconnect?: Enumerable<ServiceWhereUniqueInput>
    delete?: Enumerable<ServiceWhereUniqueInput>
    connect?: Enumerable<ServiceWhereUniqueInput>
    update?: Enumerable<ServiceUpdateWithWhereUniqueWithoutVendorInput>
    updateMany?: Enumerable<ServiceUpdateManyWithWhereWithoutVendorInput>
    deleteMany?: Enumerable<ServiceScalarWhereInput>
  }

  export type DetailsUncheckedUpdateManyWithoutProfileNestedInput = {
    create?: XOR<Enumerable<DetailsCreateWithoutProfileInput>, Enumerable<DetailsUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<DetailsCreateOrConnectWithoutProfileInput>
    upsert?: Enumerable<DetailsUpsertWithWhereUniqueWithoutProfileInput>
    createMany?: DetailsCreateManyProfileInputEnvelope
    set?: Enumerable<DetailsWhereUniqueInput>
    disconnect?: Enumerable<DetailsWhereUniqueInput>
    delete?: Enumerable<DetailsWhereUniqueInput>
    connect?: Enumerable<DetailsWhereUniqueInput>
    update?: Enumerable<DetailsUpdateWithWhereUniqueWithoutProfileInput>
    updateMany?: Enumerable<DetailsUpdateManyWithWhereWithoutProfileInput>
    deleteMany?: Enumerable<DetailsScalarWhereInput>
  }

  export type BookingUncheckedUpdateManyWithoutProfileNestedInput = {
    create?: XOR<Enumerable<BookingCreateWithoutProfileInput>, Enumerable<BookingUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutProfileInput>
    upsert?: Enumerable<BookingUpsertWithWhereUniqueWithoutProfileInput>
    createMany?: BookingCreateManyProfileInputEnvelope
    set?: Enumerable<BookingWhereUniqueInput>
    disconnect?: Enumerable<BookingWhereUniqueInput>
    delete?: Enumerable<BookingWhereUniqueInput>
    connect?: Enumerable<BookingWhereUniqueInput>
    update?: Enumerable<BookingUpdateWithWhereUniqueWithoutProfileInput>
    updateMany?: Enumerable<BookingUpdateManyWithWhereWithoutProfileInput>
    deleteMany?: Enumerable<BookingScalarWhereInput>
  }

  export type ReviewsUncheckedUpdateManyWithoutProfileNestedInput = {
    create?: XOR<Enumerable<ReviewsCreateWithoutProfileInput>, Enumerable<ReviewsUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<ReviewsCreateOrConnectWithoutProfileInput>
    upsert?: Enumerable<ReviewsUpsertWithWhereUniqueWithoutProfileInput>
    createMany?: ReviewsCreateManyProfileInputEnvelope
    set?: Enumerable<ReviewsWhereUniqueInput>
    disconnect?: Enumerable<ReviewsWhereUniqueInput>
    delete?: Enumerable<ReviewsWhereUniqueInput>
    connect?: Enumerable<ReviewsWhereUniqueInput>
    update?: Enumerable<ReviewsUpdateWithWhereUniqueWithoutProfileInput>
    updateMany?: Enumerable<ReviewsUpdateManyWithWhereWithoutProfileInput>
    deleteMany?: Enumerable<ReviewsScalarWhereInput>
  }

  export type PostUncheckedUpdateManyWithoutProfileNestedInput = {
    create?: XOR<Enumerable<PostCreateWithoutProfileInput>, Enumerable<PostUncheckedCreateWithoutProfileInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutProfileInput>
    upsert?: Enumerable<PostUpsertWithWhereUniqueWithoutProfileInput>
    createMany?: PostCreateManyProfileInputEnvelope
    set?: Enumerable<PostWhereUniqueInput>
    disconnect?: Enumerable<PostWhereUniqueInput>
    delete?: Enumerable<PostWhereUniqueInput>
    connect?: Enumerable<PostWhereUniqueInput>
    update?: Enumerable<PostUpdateWithWhereUniqueWithoutProfileInput>
    updateMany?: Enumerable<PostUpdateManyWithWhereWithoutProfileInput>
    deleteMany?: Enumerable<PostScalarWhereInput>
  }

  export type ServiceUncheckedUpdateManyWithoutVendorNestedInput = {
    create?: XOR<Enumerable<ServiceCreateWithoutVendorInput>, Enumerable<ServiceUncheckedCreateWithoutVendorInput>>
    connectOrCreate?: Enumerable<ServiceCreateOrConnectWithoutVendorInput>
    upsert?: Enumerable<ServiceUpsertWithWhereUniqueWithoutVendorInput>
    createMany?: ServiceCreateManyVendorInputEnvelope
    set?: Enumerable<ServiceWhereUniqueInput>
    disconnect?: Enumerable<ServiceWhereUniqueInput>
    delete?: Enumerable<ServiceWhereUniqueInput>
    connect?: Enumerable<ServiceWhereUniqueInput>
    update?: Enumerable<ServiceUpdateWithWhereUniqueWithoutVendorInput>
    updateMany?: Enumerable<ServiceUpdateManyWithWhereWithoutVendorInput>
    deleteMany?: Enumerable<ServiceScalarWhereInput>
  }

  export type ProfileCreateNestedOneWithoutDetailsInput = {
    create?: XOR<ProfileCreateWithoutDetailsInput, ProfileUncheckedCreateWithoutDetailsInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutDetailsInput
    connect?: ProfileWhereUniqueInput
  }

  export type PetSizeCreateNestedManyWithoutDetailInput = {
    create?: XOR<Enumerable<PetSizeCreateWithoutDetailInput>, Enumerable<PetSizeUncheckedCreateWithoutDetailInput>>
    connectOrCreate?: Enumerable<PetSizeCreateOrConnectWithoutDetailInput>
    createMany?: PetSizeCreateManyDetailInputEnvelope
    connect?: Enumerable<PetSizeWhereUniqueInput>
  }

  export type DetailsOnAreaCreateNestedManyWithoutDetailInput = {
    create?: XOR<Enumerable<DetailsOnAreaCreateWithoutDetailInput>, Enumerable<DetailsOnAreaUncheckedCreateWithoutDetailInput>>
    connectOrCreate?: Enumerable<DetailsOnAreaCreateOrConnectWithoutDetailInput>
    createMany?: DetailsOnAreaCreateManyDetailInputEnvelope
    connect?: Enumerable<DetailsOnAreaWhereUniqueInput>
  }

  export type PetSizeUncheckedCreateNestedManyWithoutDetailInput = {
    create?: XOR<Enumerable<PetSizeCreateWithoutDetailInput>, Enumerable<PetSizeUncheckedCreateWithoutDetailInput>>
    connectOrCreate?: Enumerable<PetSizeCreateOrConnectWithoutDetailInput>
    createMany?: PetSizeCreateManyDetailInputEnvelope
    connect?: Enumerable<PetSizeWhereUniqueInput>
  }

  export type DetailsOnAreaUncheckedCreateNestedManyWithoutDetailInput = {
    create?: XOR<Enumerable<DetailsOnAreaCreateWithoutDetailInput>, Enumerable<DetailsOnAreaUncheckedCreateWithoutDetailInput>>
    connectOrCreate?: Enumerable<DetailsOnAreaCreateOrConnectWithoutDetailInput>
    createMany?: DetailsOnAreaCreateManyDetailInputEnvelope
    connect?: Enumerable<DetailsOnAreaWhereUniqueInput>
  }

  export type ProfileUpdateOneRequiredWithoutDetailsNestedInput = {
    create?: XOR<ProfileCreateWithoutDetailsInput, ProfileUncheckedCreateWithoutDetailsInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutDetailsInput
    upsert?: ProfileUpsertWithoutDetailsInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutDetailsInput, ProfileUncheckedUpdateWithoutDetailsInput>
  }

  export type PetSizeUpdateManyWithoutDetailNestedInput = {
    create?: XOR<Enumerable<PetSizeCreateWithoutDetailInput>, Enumerable<PetSizeUncheckedCreateWithoutDetailInput>>
    connectOrCreate?: Enumerable<PetSizeCreateOrConnectWithoutDetailInput>
    upsert?: Enumerable<PetSizeUpsertWithWhereUniqueWithoutDetailInput>
    createMany?: PetSizeCreateManyDetailInputEnvelope
    set?: Enumerable<PetSizeWhereUniqueInput>
    disconnect?: Enumerable<PetSizeWhereUniqueInput>
    delete?: Enumerable<PetSizeWhereUniqueInput>
    connect?: Enumerable<PetSizeWhereUniqueInput>
    update?: Enumerable<PetSizeUpdateWithWhereUniqueWithoutDetailInput>
    updateMany?: Enumerable<PetSizeUpdateManyWithWhereWithoutDetailInput>
    deleteMany?: Enumerable<PetSizeScalarWhereInput>
  }

  export type DetailsOnAreaUpdateManyWithoutDetailNestedInput = {
    create?: XOR<Enumerable<DetailsOnAreaCreateWithoutDetailInput>, Enumerable<DetailsOnAreaUncheckedCreateWithoutDetailInput>>
    connectOrCreate?: Enumerable<DetailsOnAreaCreateOrConnectWithoutDetailInput>
    upsert?: Enumerable<DetailsOnAreaUpsertWithWhereUniqueWithoutDetailInput>
    createMany?: DetailsOnAreaCreateManyDetailInputEnvelope
    set?: Enumerable<DetailsOnAreaWhereUniqueInput>
    disconnect?: Enumerable<DetailsOnAreaWhereUniqueInput>
    delete?: Enumerable<DetailsOnAreaWhereUniqueInput>
    connect?: Enumerable<DetailsOnAreaWhereUniqueInput>
    update?: Enumerable<DetailsOnAreaUpdateWithWhereUniqueWithoutDetailInput>
    updateMany?: Enumerable<DetailsOnAreaUpdateManyWithWhereWithoutDetailInput>
    deleteMany?: Enumerable<DetailsOnAreaScalarWhereInput>
  }

  export type PetSizeUncheckedUpdateManyWithoutDetailNestedInput = {
    create?: XOR<Enumerable<PetSizeCreateWithoutDetailInput>, Enumerable<PetSizeUncheckedCreateWithoutDetailInput>>
    connectOrCreate?: Enumerable<PetSizeCreateOrConnectWithoutDetailInput>
    upsert?: Enumerable<PetSizeUpsertWithWhereUniqueWithoutDetailInput>
    createMany?: PetSizeCreateManyDetailInputEnvelope
    set?: Enumerable<PetSizeWhereUniqueInput>
    disconnect?: Enumerable<PetSizeWhereUniqueInput>
    delete?: Enumerable<PetSizeWhereUniqueInput>
    connect?: Enumerable<PetSizeWhereUniqueInput>
    update?: Enumerable<PetSizeUpdateWithWhereUniqueWithoutDetailInput>
    updateMany?: Enumerable<PetSizeUpdateManyWithWhereWithoutDetailInput>
    deleteMany?: Enumerable<PetSizeScalarWhereInput>
  }

  export type DetailsOnAreaUncheckedUpdateManyWithoutDetailNestedInput = {
    create?: XOR<Enumerable<DetailsOnAreaCreateWithoutDetailInput>, Enumerable<DetailsOnAreaUncheckedCreateWithoutDetailInput>>
    connectOrCreate?: Enumerable<DetailsOnAreaCreateOrConnectWithoutDetailInput>
    upsert?: Enumerable<DetailsOnAreaUpsertWithWhereUniqueWithoutDetailInput>
    createMany?: DetailsOnAreaCreateManyDetailInputEnvelope
    set?: Enumerable<DetailsOnAreaWhereUniqueInput>
    disconnect?: Enumerable<DetailsOnAreaWhereUniqueInput>
    delete?: Enumerable<DetailsOnAreaWhereUniqueInput>
    connect?: Enumerable<DetailsOnAreaWhereUniqueInput>
    update?: Enumerable<DetailsOnAreaUpdateWithWhereUniqueWithoutDetailInput>
    updateMany?: Enumerable<DetailsOnAreaUpdateManyWithWhereWithoutDetailInput>
    deleteMany?: Enumerable<DetailsOnAreaScalarWhereInput>
  }

  export type DetailsCreateNestedOneWithoutDetailsOnAreaInput = {
    create?: XOR<DetailsCreateWithoutDetailsOnAreaInput, DetailsUncheckedCreateWithoutDetailsOnAreaInput>
    connectOrCreate?: DetailsCreateOrConnectWithoutDetailsOnAreaInput
    connect?: DetailsWhereUniqueInput
  }

  export type AreaCreateNestedOneWithoutDetailsOnAreaInput = {
    create?: XOR<AreaCreateWithoutDetailsOnAreaInput, AreaUncheckedCreateWithoutDetailsOnAreaInput>
    connectOrCreate?: AreaCreateOrConnectWithoutDetailsOnAreaInput
    connect?: AreaWhereUniqueInput
  }

  export type DetailsUpdateOneRequiredWithoutDetailsOnAreaNestedInput = {
    create?: XOR<DetailsCreateWithoutDetailsOnAreaInput, DetailsUncheckedCreateWithoutDetailsOnAreaInput>
    connectOrCreate?: DetailsCreateOrConnectWithoutDetailsOnAreaInput
    upsert?: DetailsUpsertWithoutDetailsOnAreaInput
    connect?: DetailsWhereUniqueInput
    update?: XOR<DetailsUpdateWithoutDetailsOnAreaInput, DetailsUncheckedUpdateWithoutDetailsOnAreaInput>
  }

  export type AreaUpdateOneRequiredWithoutDetailsOnAreaNestedInput = {
    create?: XOR<AreaCreateWithoutDetailsOnAreaInput, AreaUncheckedCreateWithoutDetailsOnAreaInput>
    connectOrCreate?: AreaCreateOrConnectWithoutDetailsOnAreaInput
    upsert?: AreaUpsertWithoutDetailsOnAreaInput
    connect?: AreaWhereUniqueInput
    update?: XOR<AreaUpdateWithoutDetailsOnAreaInput, AreaUncheckedUpdateWithoutDetailsOnAreaInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type DetailsCreateNestedOneWithoutPetSizeInput = {
    create?: XOR<DetailsCreateWithoutPetSizeInput, DetailsUncheckedCreateWithoutPetSizeInput>
    connectOrCreate?: DetailsCreateOrConnectWithoutPetSizeInput
    connect?: DetailsWhereUniqueInput
  }

  export type DetailsUpdateOneRequiredWithoutPetSizeNestedInput = {
    create?: XOR<DetailsCreateWithoutPetSizeInput, DetailsUncheckedCreateWithoutPetSizeInput>
    connectOrCreate?: DetailsCreateOrConnectWithoutPetSizeInput
    upsert?: DetailsUpsertWithoutPetSizeInput
    connect?: DetailsWhereUniqueInput
    update?: XOR<DetailsUpdateWithoutPetSizeInput, DetailsUncheckedUpdateWithoutPetSizeInput>
  }

  export type DetailsOnAreaCreateNestedManyWithoutAreaInput = {
    create?: XOR<Enumerable<DetailsOnAreaCreateWithoutAreaInput>, Enumerable<DetailsOnAreaUncheckedCreateWithoutAreaInput>>
    connectOrCreate?: Enumerable<DetailsOnAreaCreateOrConnectWithoutAreaInput>
    createMany?: DetailsOnAreaCreateManyAreaInputEnvelope
    connect?: Enumerable<DetailsOnAreaWhereUniqueInput>
  }

  export type DetailsOnAreaUncheckedCreateNestedManyWithoutAreaInput = {
    create?: XOR<Enumerable<DetailsOnAreaCreateWithoutAreaInput>, Enumerable<DetailsOnAreaUncheckedCreateWithoutAreaInput>>
    connectOrCreate?: Enumerable<DetailsOnAreaCreateOrConnectWithoutAreaInput>
    createMany?: DetailsOnAreaCreateManyAreaInputEnvelope
    connect?: Enumerable<DetailsOnAreaWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DetailsOnAreaUpdateManyWithoutAreaNestedInput = {
    create?: XOR<Enumerable<DetailsOnAreaCreateWithoutAreaInput>, Enumerable<DetailsOnAreaUncheckedCreateWithoutAreaInput>>
    connectOrCreate?: Enumerable<DetailsOnAreaCreateOrConnectWithoutAreaInput>
    upsert?: Enumerable<DetailsOnAreaUpsertWithWhereUniqueWithoutAreaInput>
    createMany?: DetailsOnAreaCreateManyAreaInputEnvelope
    set?: Enumerable<DetailsOnAreaWhereUniqueInput>
    disconnect?: Enumerable<DetailsOnAreaWhereUniqueInput>
    delete?: Enumerable<DetailsOnAreaWhereUniqueInput>
    connect?: Enumerable<DetailsOnAreaWhereUniqueInput>
    update?: Enumerable<DetailsOnAreaUpdateWithWhereUniqueWithoutAreaInput>
    updateMany?: Enumerable<DetailsOnAreaUpdateManyWithWhereWithoutAreaInput>
    deleteMany?: Enumerable<DetailsOnAreaScalarWhereInput>
  }

  export type DetailsOnAreaUncheckedUpdateManyWithoutAreaNestedInput = {
    create?: XOR<Enumerable<DetailsOnAreaCreateWithoutAreaInput>, Enumerable<DetailsOnAreaUncheckedCreateWithoutAreaInput>>
    connectOrCreate?: Enumerable<DetailsOnAreaCreateOrConnectWithoutAreaInput>
    upsert?: Enumerable<DetailsOnAreaUpsertWithWhereUniqueWithoutAreaInput>
    createMany?: DetailsOnAreaCreateManyAreaInputEnvelope
    set?: Enumerable<DetailsOnAreaWhereUniqueInput>
    disconnect?: Enumerable<DetailsOnAreaWhereUniqueInput>
    delete?: Enumerable<DetailsOnAreaWhereUniqueInput>
    connect?: Enumerable<DetailsOnAreaWhereUniqueInput>
    update?: Enumerable<DetailsOnAreaUpdateWithWhereUniqueWithoutAreaInput>
    updateMany?: Enumerable<DetailsOnAreaUpdateManyWithWhereWithoutAreaInput>
    deleteMany?: Enumerable<DetailsOnAreaScalarWhereInput>
  }

  export type ProfileCreateNestedOneWithoutReviewsInput = {
    create?: XOR<ProfileCreateWithoutReviewsInput, ProfileUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutReviewsInput
    connect?: ProfileWhereUniqueInput
  }

  export type UserProfileCreateNestedOneWithoutReviewsInput = {
    create?: XOR<UserProfileCreateWithoutReviewsInput, UserProfileUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutReviewsInput
    connect?: UserProfileWhereUniqueInput
  }

  export type ProfileUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<ProfileCreateWithoutReviewsInput, ProfileUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutReviewsInput
    upsert?: ProfileUpsertWithoutReviewsInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutReviewsInput, ProfileUncheckedUpdateWithoutReviewsInput>
  }

  export type UserProfileUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<UserProfileCreateWithoutReviewsInput, UserProfileUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutReviewsInput
    upsert?: UserProfileUpsertWithoutReviewsInput
    connect?: UserProfileWhereUniqueInput
    update?: XOR<UserProfileUpdateWithoutReviewsInput, UserProfileUncheckedUpdateWithoutReviewsInput>
  }

  export type UserProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    connect?: UserProfileWhereUniqueInput
  }

  export type UserProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    connect?: UserProfileWhereUniqueInput
  }

  export type UserProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    upsert?: UserProfileUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserProfileWhereUniqueInput
    update?: XOR<UserProfileUpdateWithoutUserInput, UserProfileUncheckedUpdateWithoutUserInput>
  }

  export type UserProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    upsert?: UserProfileUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserProfileWhereUniqueInput
    update?: XOR<UserProfileUpdateWithoutUserInput, UserProfileUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type PetsCreateNestedManyWithoutOwnerInput = {
    create?: XOR<Enumerable<PetsCreateWithoutOwnerInput>, Enumerable<PetsUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<PetsCreateOrConnectWithoutOwnerInput>
    createMany?: PetsCreateManyOwnerInputEnvelope
    connect?: Enumerable<PetsWhereUniqueInput>
  }

  export type BookingCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<BookingCreateWithoutUserInput>, Enumerable<BookingUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutUserInput>
    createMany?: BookingCreateManyUserInputEnvelope
    connect?: Enumerable<BookingWhereUniqueInput>
  }

  export type ReviewsCreateNestedManyWithoutUserProfileInput = {
    create?: XOR<Enumerable<ReviewsCreateWithoutUserProfileInput>, Enumerable<ReviewsUncheckedCreateWithoutUserProfileInput>>
    connectOrCreate?: Enumerable<ReviewsCreateOrConnectWithoutUserProfileInput>
    createMany?: ReviewsCreateManyUserProfileInputEnvelope
    connect?: Enumerable<ReviewsWhereUniqueInput>
  }

  export type PetsUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<Enumerable<PetsCreateWithoutOwnerInput>, Enumerable<PetsUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<PetsCreateOrConnectWithoutOwnerInput>
    createMany?: PetsCreateManyOwnerInputEnvelope
    connect?: Enumerable<PetsWhereUniqueInput>
  }

  export type BookingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<BookingCreateWithoutUserInput>, Enumerable<BookingUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutUserInput>
    createMany?: BookingCreateManyUserInputEnvelope
    connect?: Enumerable<BookingWhereUniqueInput>
  }

  export type ReviewsUncheckedCreateNestedManyWithoutUserProfileInput = {
    create?: XOR<Enumerable<ReviewsCreateWithoutUserProfileInput>, Enumerable<ReviewsUncheckedCreateWithoutUserProfileInput>>
    connectOrCreate?: Enumerable<ReviewsCreateOrConnectWithoutUserProfileInput>
    createMany?: ReviewsCreateManyUserProfileInputEnvelope
    connect?: Enumerable<ReviewsWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutProfileNestedInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type PetsUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<Enumerable<PetsCreateWithoutOwnerInput>, Enumerable<PetsUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<PetsCreateOrConnectWithoutOwnerInput>
    upsert?: Enumerable<PetsUpsertWithWhereUniqueWithoutOwnerInput>
    createMany?: PetsCreateManyOwnerInputEnvelope
    set?: Enumerable<PetsWhereUniqueInput>
    disconnect?: Enumerable<PetsWhereUniqueInput>
    delete?: Enumerable<PetsWhereUniqueInput>
    connect?: Enumerable<PetsWhereUniqueInput>
    update?: Enumerable<PetsUpdateWithWhereUniqueWithoutOwnerInput>
    updateMany?: Enumerable<PetsUpdateManyWithWhereWithoutOwnerInput>
    deleteMany?: Enumerable<PetsScalarWhereInput>
  }

  export type BookingUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<BookingCreateWithoutUserInput>, Enumerable<BookingUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<BookingUpsertWithWhereUniqueWithoutUserInput>
    createMany?: BookingCreateManyUserInputEnvelope
    set?: Enumerable<BookingWhereUniqueInput>
    disconnect?: Enumerable<BookingWhereUniqueInput>
    delete?: Enumerable<BookingWhereUniqueInput>
    connect?: Enumerable<BookingWhereUniqueInput>
    update?: Enumerable<BookingUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<BookingUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<BookingScalarWhereInput>
  }

  export type ReviewsUpdateManyWithoutUserProfileNestedInput = {
    create?: XOR<Enumerable<ReviewsCreateWithoutUserProfileInput>, Enumerable<ReviewsUncheckedCreateWithoutUserProfileInput>>
    connectOrCreate?: Enumerable<ReviewsCreateOrConnectWithoutUserProfileInput>
    upsert?: Enumerable<ReviewsUpsertWithWhereUniqueWithoutUserProfileInput>
    createMany?: ReviewsCreateManyUserProfileInputEnvelope
    set?: Enumerable<ReviewsWhereUniqueInput>
    disconnect?: Enumerable<ReviewsWhereUniqueInput>
    delete?: Enumerable<ReviewsWhereUniqueInput>
    connect?: Enumerable<ReviewsWhereUniqueInput>
    update?: Enumerable<ReviewsUpdateWithWhereUniqueWithoutUserProfileInput>
    updateMany?: Enumerable<ReviewsUpdateManyWithWhereWithoutUserProfileInput>
    deleteMany?: Enumerable<ReviewsScalarWhereInput>
  }

  export type PetsUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<Enumerable<PetsCreateWithoutOwnerInput>, Enumerable<PetsUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<PetsCreateOrConnectWithoutOwnerInput>
    upsert?: Enumerable<PetsUpsertWithWhereUniqueWithoutOwnerInput>
    createMany?: PetsCreateManyOwnerInputEnvelope
    set?: Enumerable<PetsWhereUniqueInput>
    disconnect?: Enumerable<PetsWhereUniqueInput>
    delete?: Enumerable<PetsWhereUniqueInput>
    connect?: Enumerable<PetsWhereUniqueInput>
    update?: Enumerable<PetsUpdateWithWhereUniqueWithoutOwnerInput>
    updateMany?: Enumerable<PetsUpdateManyWithWhereWithoutOwnerInput>
    deleteMany?: Enumerable<PetsScalarWhereInput>
  }

  export type BookingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<BookingCreateWithoutUserInput>, Enumerable<BookingUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<BookingUpsertWithWhereUniqueWithoutUserInput>
    createMany?: BookingCreateManyUserInputEnvelope
    set?: Enumerable<BookingWhereUniqueInput>
    disconnect?: Enumerable<BookingWhereUniqueInput>
    delete?: Enumerable<BookingWhereUniqueInput>
    connect?: Enumerable<BookingWhereUniqueInput>
    update?: Enumerable<BookingUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<BookingUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<BookingScalarWhereInput>
  }

  export type ReviewsUncheckedUpdateManyWithoutUserProfileNestedInput = {
    create?: XOR<Enumerable<ReviewsCreateWithoutUserProfileInput>, Enumerable<ReviewsUncheckedCreateWithoutUserProfileInput>>
    connectOrCreate?: Enumerable<ReviewsCreateOrConnectWithoutUserProfileInput>
    upsert?: Enumerable<ReviewsUpsertWithWhereUniqueWithoutUserProfileInput>
    createMany?: ReviewsCreateManyUserProfileInputEnvelope
    set?: Enumerable<ReviewsWhereUniqueInput>
    disconnect?: Enumerable<ReviewsWhereUniqueInput>
    delete?: Enumerable<ReviewsWhereUniqueInput>
    connect?: Enumerable<ReviewsWhereUniqueInput>
    update?: Enumerable<ReviewsUpdateWithWhereUniqueWithoutUserProfileInput>
    updateMany?: Enumerable<ReviewsUpdateManyWithWhereWithoutUserProfileInput>
    deleteMany?: Enumerable<ReviewsScalarWhereInput>
  }

  export type UserProfileCreateNestedOneWithoutPetsInput = {
    create?: XOR<UserProfileCreateWithoutPetsInput, UserProfileUncheckedCreateWithoutPetsInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutPetsInput
    connect?: UserProfileWhereUniqueInput
  }

  export type UserProfileUpdateOneRequiredWithoutPetsNestedInput = {
    create?: XOR<UserProfileCreateWithoutPetsInput, UserProfileUncheckedCreateWithoutPetsInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutPetsInput
    upsert?: UserProfileUpsertWithoutPetsInput
    connect?: UserProfileWhereUniqueInput
    update?: XOR<UserProfileUpdateWithoutPetsInput, UserProfileUncheckedUpdateWithoutPetsInput>
  }

  export type ProfileCreateNestedOneWithoutPostInput = {
    create?: XOR<ProfileCreateWithoutPostInput, ProfileUncheckedCreateWithoutPostInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutPostInput
    connect?: ProfileWhereUniqueInput
  }

  export type ProfileUpdateOneRequiredWithoutPostNestedInput = {
    create?: XOR<ProfileCreateWithoutPostInput, ProfileUncheckedCreateWithoutPostInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutPostInput
    upsert?: ProfileUpsertWithoutPostInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutPostInput, ProfileUncheckedUpdateWithoutPostInput>
  }

  export type ProfileCreateNestedOneWithoutBookingInput = {
    create?: XOR<ProfileCreateWithoutBookingInput, ProfileUncheckedCreateWithoutBookingInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutBookingInput
    connect?: ProfileWhereUniqueInput
  }

  export type UserProfileCreateNestedOneWithoutBookingInput = {
    create?: XOR<UserProfileCreateWithoutBookingInput, UserProfileUncheckedCreateWithoutBookingInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutBookingInput
    connect?: UserProfileWhereUniqueInput
  }

  export type ServiceCreateNestedOneWithoutBookingInput = {
    create?: XOR<ServiceCreateWithoutBookingInput, ServiceUncheckedCreateWithoutBookingInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutBookingInput
    connect?: ServiceWhereUniqueInput
  }

  export type ProfileUpdateOneRequiredWithoutBookingNestedInput = {
    create?: XOR<ProfileCreateWithoutBookingInput, ProfileUncheckedCreateWithoutBookingInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutBookingInput
    upsert?: ProfileUpsertWithoutBookingInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutBookingInput, ProfileUncheckedUpdateWithoutBookingInput>
  }

  export type UserProfileUpdateOneRequiredWithoutBookingNestedInput = {
    create?: XOR<UserProfileCreateWithoutBookingInput, UserProfileUncheckedCreateWithoutBookingInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutBookingInput
    upsert?: UserProfileUpsertWithoutBookingInput
    connect?: UserProfileWhereUniqueInput
    update?: XOR<UserProfileUpdateWithoutBookingInput, UserProfileUncheckedUpdateWithoutBookingInput>
  }

  export type ServiceUpdateOneRequiredWithoutBookingNestedInput = {
    create?: XOR<ServiceCreateWithoutBookingInput, ServiceUncheckedCreateWithoutBookingInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutBookingInput
    upsert?: ServiceUpsertWithoutBookingInput
    connect?: ServiceWhereUniqueInput
    update?: XOR<ServiceUpdateWithoutBookingInput, ServiceUncheckedUpdateWithoutBookingInput>
  }

  export type ProfileCreateNestedOneWithoutServiceInput = {
    create?: XOR<ProfileCreateWithoutServiceInput, ProfileUncheckedCreateWithoutServiceInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutServiceInput
    connect?: ProfileWhereUniqueInput
  }

  export type BookingCreateNestedManyWithoutServiceInput = {
    create?: XOR<Enumerable<BookingCreateWithoutServiceInput>, Enumerable<BookingUncheckedCreateWithoutServiceInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutServiceInput>
    createMany?: BookingCreateManyServiceInputEnvelope
    connect?: Enumerable<BookingWhereUniqueInput>
  }

  export type BookingUncheckedCreateNestedManyWithoutServiceInput = {
    create?: XOR<Enumerable<BookingCreateWithoutServiceInput>, Enumerable<BookingUncheckedCreateWithoutServiceInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutServiceInput>
    createMany?: BookingCreateManyServiceInputEnvelope
    connect?: Enumerable<BookingWhereUniqueInput>
  }

  export type ProfileUpdateOneRequiredWithoutServiceNestedInput = {
    create?: XOR<ProfileCreateWithoutServiceInput, ProfileUncheckedCreateWithoutServiceInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutServiceInput
    upsert?: ProfileUpsertWithoutServiceInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutServiceInput, ProfileUncheckedUpdateWithoutServiceInput>
  }

  export type BookingUpdateManyWithoutServiceNestedInput = {
    create?: XOR<Enumerable<BookingCreateWithoutServiceInput>, Enumerable<BookingUncheckedCreateWithoutServiceInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutServiceInput>
    upsert?: Enumerable<BookingUpsertWithWhereUniqueWithoutServiceInput>
    createMany?: BookingCreateManyServiceInputEnvelope
    set?: Enumerable<BookingWhereUniqueInput>
    disconnect?: Enumerable<BookingWhereUniqueInput>
    delete?: Enumerable<BookingWhereUniqueInput>
    connect?: Enumerable<BookingWhereUniqueInput>
    update?: Enumerable<BookingUpdateWithWhereUniqueWithoutServiceInput>
    updateMany?: Enumerable<BookingUpdateManyWithWhereWithoutServiceInput>
    deleteMany?: Enumerable<BookingScalarWhereInput>
  }

  export type BookingUncheckedUpdateManyWithoutServiceNestedInput = {
    create?: XOR<Enumerable<BookingCreateWithoutServiceInput>, Enumerable<BookingUncheckedCreateWithoutServiceInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutServiceInput>
    upsert?: Enumerable<BookingUpsertWithWhereUniqueWithoutServiceInput>
    createMany?: BookingCreateManyServiceInputEnvelope
    set?: Enumerable<BookingWhereUniqueInput>
    disconnect?: Enumerable<BookingWhereUniqueInput>
    delete?: Enumerable<BookingWhereUniqueInput>
    connect?: Enumerable<BookingWhereUniqueInput>
    update?: Enumerable<BookingUpdateWithWhereUniqueWithoutServiceInput>
    updateMany?: Enumerable<BookingUpdateManyWithWhereWithoutServiceInput>
    deleteMany?: Enumerable<BookingScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type DetailsCreateWithoutProfileInput = {
    description: string
    petType: string
    petSize?: PetSizeCreateNestedManyWithoutDetailInput
    areaId: number
    DetailsOnArea?: DetailsOnAreaCreateNestedManyWithoutDetailInput
  }

  export type DetailsUncheckedCreateWithoutProfileInput = {
    id?: number
    description: string
    petType: string
    petSize?: PetSizeUncheckedCreateNestedManyWithoutDetailInput
    areaId: number
    DetailsOnArea?: DetailsOnAreaUncheckedCreateNestedManyWithoutDetailInput
  }

  export type DetailsCreateOrConnectWithoutProfileInput = {
    where: DetailsWhereUniqueInput
    create: XOR<DetailsCreateWithoutProfileInput, DetailsUncheckedCreateWithoutProfileInput>
  }

  export type DetailsCreateManyProfileInputEnvelope = {
    data: Enumerable<DetailsCreateManyProfileInput>
    skipDuplicates?: boolean
  }

  export type BookingCreateWithoutProfileInput = {
    user: UserProfileCreateNestedOneWithoutBookingInput
    service: ServiceCreateNestedOneWithoutBookingInput
    dateTime: Date | string
    status: string
  }

  export type BookingUncheckedCreateWithoutProfileInput = {
    id?: number
    dateTime: Date | string
    status: string
    userProfileId: number
    serviceId: number
  }

  export type BookingCreateOrConnectWithoutProfileInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutProfileInput, BookingUncheckedCreateWithoutProfileInput>
  }

  export type BookingCreateManyProfileInputEnvelope = {
    data: Enumerable<BookingCreateManyProfileInput>
    skipDuplicates?: boolean
  }

  export type ReviewsCreateWithoutProfileInput = {
    paws: number
    comment: string
    userProfile: UserProfileCreateNestedOneWithoutReviewsInput
  }

  export type ReviewsUncheckedCreateWithoutProfileInput = {
    id?: number
    paws: number
    comment: string
    userProfileId: number
  }

  export type ReviewsCreateOrConnectWithoutProfileInput = {
    where: ReviewsWhereUniqueInput
    create: XOR<ReviewsCreateWithoutProfileInput, ReviewsUncheckedCreateWithoutProfileInput>
  }

  export type ReviewsCreateManyProfileInputEnvelope = {
    data: Enumerable<ReviewsCreateManyProfileInput>
    skipDuplicates?: boolean
  }

  export type PostCreateWithoutProfileInput = {
    image: string
    message: string
  }

  export type PostUncheckedCreateWithoutProfileInput = {
    id?: number
    image: string
    message: string
  }

  export type PostCreateOrConnectWithoutProfileInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutProfileInput, PostUncheckedCreateWithoutProfileInput>
  }

  export type PostCreateManyProfileInputEnvelope = {
    data: Enumerable<PostCreateManyProfileInput>
    skipDuplicates?: boolean
  }

  export type ServiceCreateWithoutVendorInput = {
    title: string
    price: number
    booking?: BookingCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateWithoutVendorInput = {
    id?: number
    title: string
    price: number
    booking?: BookingUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceCreateOrConnectWithoutVendorInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutVendorInput, ServiceUncheckedCreateWithoutVendorInput>
  }

  export type ServiceCreateManyVendorInputEnvelope = {
    data: Enumerable<ServiceCreateManyVendorInput>
    skipDuplicates?: boolean
  }

  export type DetailsUpsertWithWhereUniqueWithoutProfileInput = {
    where: DetailsWhereUniqueInput
    update: XOR<DetailsUpdateWithoutProfileInput, DetailsUncheckedUpdateWithoutProfileInput>
    create: XOR<DetailsCreateWithoutProfileInput, DetailsUncheckedCreateWithoutProfileInput>
  }

  export type DetailsUpdateWithWhereUniqueWithoutProfileInput = {
    where: DetailsWhereUniqueInput
    data: XOR<DetailsUpdateWithoutProfileInput, DetailsUncheckedUpdateWithoutProfileInput>
  }

  export type DetailsUpdateManyWithWhereWithoutProfileInput = {
    where: DetailsScalarWhereInput
    data: XOR<DetailsUpdateManyMutationInput, DetailsUncheckedUpdateManyWithoutDetailsInput>
  }

  export type DetailsScalarWhereInput = {
    AND?: Enumerable<DetailsScalarWhereInput>
    OR?: Enumerable<DetailsScalarWhereInput>
    NOT?: Enumerable<DetailsScalarWhereInput>
    id?: IntFilter | number
    description?: StringFilter | string
    petType?: StringFilter | string
    profileId?: IntFilter | number
    areaId?: IntFilter | number
  }

  export type BookingUpsertWithWhereUniqueWithoutProfileInput = {
    where: BookingWhereUniqueInput
    update: XOR<BookingUpdateWithoutProfileInput, BookingUncheckedUpdateWithoutProfileInput>
    create: XOR<BookingCreateWithoutProfileInput, BookingUncheckedCreateWithoutProfileInput>
  }

  export type BookingUpdateWithWhereUniqueWithoutProfileInput = {
    where: BookingWhereUniqueInput
    data: XOR<BookingUpdateWithoutProfileInput, BookingUncheckedUpdateWithoutProfileInput>
  }

  export type BookingUpdateManyWithWhereWithoutProfileInput = {
    where: BookingScalarWhereInput
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyWithoutBookingInput>
  }

  export type BookingScalarWhereInput = {
    AND?: Enumerable<BookingScalarWhereInput>
    OR?: Enumerable<BookingScalarWhereInput>
    NOT?: Enumerable<BookingScalarWhereInput>
    id?: IntFilter | number
    dateTime?: DateTimeFilter | Date | string
    status?: StringFilter | string
    profileId?: IntFilter | number
    userProfileId?: IntFilter | number
    serviceId?: IntFilter | number
  }

  export type ReviewsUpsertWithWhereUniqueWithoutProfileInput = {
    where: ReviewsWhereUniqueInput
    update: XOR<ReviewsUpdateWithoutProfileInput, ReviewsUncheckedUpdateWithoutProfileInput>
    create: XOR<ReviewsCreateWithoutProfileInput, ReviewsUncheckedCreateWithoutProfileInput>
  }

  export type ReviewsUpdateWithWhereUniqueWithoutProfileInput = {
    where: ReviewsWhereUniqueInput
    data: XOR<ReviewsUpdateWithoutProfileInput, ReviewsUncheckedUpdateWithoutProfileInput>
  }

  export type ReviewsUpdateManyWithWhereWithoutProfileInput = {
    where: ReviewsScalarWhereInput
    data: XOR<ReviewsUpdateManyMutationInput, ReviewsUncheckedUpdateManyWithoutReviewsInput>
  }

  export type ReviewsScalarWhereInput = {
    AND?: Enumerable<ReviewsScalarWhereInput>
    OR?: Enumerable<ReviewsScalarWhereInput>
    NOT?: Enumerable<ReviewsScalarWhereInput>
    id?: IntFilter | number
    paws?: IntFilter | number
    comment?: StringFilter | string
    profileId?: IntFilter | number
    userProfileId?: IntFilter | number
  }

  export type PostUpsertWithWhereUniqueWithoutProfileInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutProfileInput, PostUncheckedUpdateWithoutProfileInput>
    create: XOR<PostCreateWithoutProfileInput, PostUncheckedCreateWithoutProfileInput>
  }

  export type PostUpdateWithWhereUniqueWithoutProfileInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutProfileInput, PostUncheckedUpdateWithoutProfileInput>
  }

  export type PostUpdateManyWithWhereWithoutProfileInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutPostInput>
  }

  export type PostScalarWhereInput = {
    AND?: Enumerable<PostScalarWhereInput>
    OR?: Enumerable<PostScalarWhereInput>
    NOT?: Enumerable<PostScalarWhereInput>
    id?: IntFilter | number
    image?: StringFilter | string
    message?: StringFilter | string
    profileId?: IntFilter | number
  }

  export type ServiceUpsertWithWhereUniqueWithoutVendorInput = {
    where: ServiceWhereUniqueInput
    update: XOR<ServiceUpdateWithoutVendorInput, ServiceUncheckedUpdateWithoutVendorInput>
    create: XOR<ServiceCreateWithoutVendorInput, ServiceUncheckedCreateWithoutVendorInput>
  }

  export type ServiceUpdateWithWhereUniqueWithoutVendorInput = {
    where: ServiceWhereUniqueInput
    data: XOR<ServiceUpdateWithoutVendorInput, ServiceUncheckedUpdateWithoutVendorInput>
  }

  export type ServiceUpdateManyWithWhereWithoutVendorInput = {
    where: ServiceScalarWhereInput
    data: XOR<ServiceUpdateManyMutationInput, ServiceUncheckedUpdateManyWithoutServiceInput>
  }

  export type ServiceScalarWhereInput = {
    AND?: Enumerable<ServiceScalarWhereInput>
    OR?: Enumerable<ServiceScalarWhereInput>
    NOT?: Enumerable<ServiceScalarWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    price?: IntFilter | number
    profileId?: IntFilter | number
  }

  export type ProfileCreateWithoutDetailsInput = {
    name: string
    address: string
    description: string
    type: string
    profilePic?: string
    start: string
    end: string
    booking?: BookingCreateNestedManyWithoutProfileInput
    Reviews?: ReviewsCreateNestedManyWithoutProfileInput
    Post?: PostCreateNestedManyWithoutProfileInput
    Service?: ServiceCreateNestedManyWithoutVendorInput
  }

  export type ProfileUncheckedCreateWithoutDetailsInput = {
    id?: number
    name: string
    address: string
    description: string
    type: string
    profilePic?: string
    start: string
    end: string
    booking?: BookingUncheckedCreateNestedManyWithoutProfileInput
    Reviews?: ReviewsUncheckedCreateNestedManyWithoutProfileInput
    Post?: PostUncheckedCreateNestedManyWithoutProfileInput
    Service?: ServiceUncheckedCreateNestedManyWithoutVendorInput
  }

  export type ProfileCreateOrConnectWithoutDetailsInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutDetailsInput, ProfileUncheckedCreateWithoutDetailsInput>
  }

  export type PetSizeCreateWithoutDetailInput = {
    weight: string
  }

  export type PetSizeUncheckedCreateWithoutDetailInput = {
    id?: number
    weight: string
  }

  export type PetSizeCreateOrConnectWithoutDetailInput = {
    where: PetSizeWhereUniqueInput
    create: XOR<PetSizeCreateWithoutDetailInput, PetSizeUncheckedCreateWithoutDetailInput>
  }

  export type PetSizeCreateManyDetailInputEnvelope = {
    data: Enumerable<PetSizeCreateManyDetailInput>
    skipDuplicates?: boolean
  }

  export type DetailsOnAreaCreateWithoutDetailInput = {
    area: AreaCreateNestedOneWithoutDetailsOnAreaInput
    assignedAt?: Date | string
    assignedBy: string
  }

  export type DetailsOnAreaUncheckedCreateWithoutDetailInput = {
    assignedAt?: Date | string
    assignedBy: string
    areaId: number
  }

  export type DetailsOnAreaCreateOrConnectWithoutDetailInput = {
    where: DetailsOnAreaWhereUniqueInput
    create: XOR<DetailsOnAreaCreateWithoutDetailInput, DetailsOnAreaUncheckedCreateWithoutDetailInput>
  }

  export type DetailsOnAreaCreateManyDetailInputEnvelope = {
    data: Enumerable<DetailsOnAreaCreateManyDetailInput>
    skipDuplicates?: boolean
  }

  export type ProfileUpsertWithoutDetailsInput = {
    update: XOR<ProfileUpdateWithoutDetailsInput, ProfileUncheckedUpdateWithoutDetailsInput>
    create: XOR<ProfileCreateWithoutDetailsInput, ProfileUncheckedCreateWithoutDetailsInput>
  }

  export type ProfileUpdateWithoutDetailsInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    profilePic?: StringFieldUpdateOperationsInput | string
    start?: StringFieldUpdateOperationsInput | string
    end?: StringFieldUpdateOperationsInput | string
    booking?: BookingUpdateManyWithoutProfileNestedInput
    Reviews?: ReviewsUpdateManyWithoutProfileNestedInput
    Post?: PostUpdateManyWithoutProfileNestedInput
    Service?: ServiceUpdateManyWithoutVendorNestedInput
  }

  export type ProfileUncheckedUpdateWithoutDetailsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    profilePic?: StringFieldUpdateOperationsInput | string
    start?: StringFieldUpdateOperationsInput | string
    end?: StringFieldUpdateOperationsInput | string
    booking?: BookingUncheckedUpdateManyWithoutProfileNestedInput
    Reviews?: ReviewsUncheckedUpdateManyWithoutProfileNestedInput
    Post?: PostUncheckedUpdateManyWithoutProfileNestedInput
    Service?: ServiceUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type PetSizeUpsertWithWhereUniqueWithoutDetailInput = {
    where: PetSizeWhereUniqueInput
    update: XOR<PetSizeUpdateWithoutDetailInput, PetSizeUncheckedUpdateWithoutDetailInput>
    create: XOR<PetSizeCreateWithoutDetailInput, PetSizeUncheckedCreateWithoutDetailInput>
  }

  export type PetSizeUpdateWithWhereUniqueWithoutDetailInput = {
    where: PetSizeWhereUniqueInput
    data: XOR<PetSizeUpdateWithoutDetailInput, PetSizeUncheckedUpdateWithoutDetailInput>
  }

  export type PetSizeUpdateManyWithWhereWithoutDetailInput = {
    where: PetSizeScalarWhereInput
    data: XOR<PetSizeUpdateManyMutationInput, PetSizeUncheckedUpdateManyWithoutPetSizeInput>
  }

  export type PetSizeScalarWhereInput = {
    AND?: Enumerable<PetSizeScalarWhereInput>
    OR?: Enumerable<PetSizeScalarWhereInput>
    NOT?: Enumerable<PetSizeScalarWhereInput>
    id?: IntFilter | number
    weight?: StringFilter | string
    detailsId?: IntFilter | number
  }

  export type DetailsOnAreaUpsertWithWhereUniqueWithoutDetailInput = {
    where: DetailsOnAreaWhereUniqueInput
    update: XOR<DetailsOnAreaUpdateWithoutDetailInput, DetailsOnAreaUncheckedUpdateWithoutDetailInput>
    create: XOR<DetailsOnAreaCreateWithoutDetailInput, DetailsOnAreaUncheckedCreateWithoutDetailInput>
  }

  export type DetailsOnAreaUpdateWithWhereUniqueWithoutDetailInput = {
    where: DetailsOnAreaWhereUniqueInput
    data: XOR<DetailsOnAreaUpdateWithoutDetailInput, DetailsOnAreaUncheckedUpdateWithoutDetailInput>
  }

  export type DetailsOnAreaUpdateManyWithWhereWithoutDetailInput = {
    where: DetailsOnAreaScalarWhereInput
    data: XOR<DetailsOnAreaUpdateManyMutationInput, DetailsOnAreaUncheckedUpdateManyWithoutDetailsOnAreaInput>
  }

  export type DetailsOnAreaScalarWhereInput = {
    AND?: Enumerable<DetailsOnAreaScalarWhereInput>
    OR?: Enumerable<DetailsOnAreaScalarWhereInput>
    NOT?: Enumerable<DetailsOnAreaScalarWhereInput>
    assignedAt?: DateTimeFilter | Date | string
    assignedBy?: StringFilter | string
    detailsId?: IntFilter | number
    areaId?: IntFilter | number
  }

  export type DetailsCreateWithoutDetailsOnAreaInput = {
    profile: ProfileCreateNestedOneWithoutDetailsInput
    description: string
    petType: string
    petSize?: PetSizeCreateNestedManyWithoutDetailInput
    areaId: number
  }

  export type DetailsUncheckedCreateWithoutDetailsOnAreaInput = {
    id?: number
    description: string
    petType: string
    petSize?: PetSizeUncheckedCreateNestedManyWithoutDetailInput
    profileId: number
    areaId: number
  }

  export type DetailsCreateOrConnectWithoutDetailsOnAreaInput = {
    where: DetailsWhereUniqueInput
    create: XOR<DetailsCreateWithoutDetailsOnAreaInput, DetailsUncheckedCreateWithoutDetailsOnAreaInput>
  }

  export type AreaCreateWithoutDetailsOnAreaInput = {
    north?: boolean
    south?: boolean
    east?: boolean
    west?: boolean
  }

  export type AreaUncheckedCreateWithoutDetailsOnAreaInput = {
    id?: number
    north?: boolean
    south?: boolean
    east?: boolean
    west?: boolean
  }

  export type AreaCreateOrConnectWithoutDetailsOnAreaInput = {
    where: AreaWhereUniqueInput
    create: XOR<AreaCreateWithoutDetailsOnAreaInput, AreaUncheckedCreateWithoutDetailsOnAreaInput>
  }

  export type DetailsUpsertWithoutDetailsOnAreaInput = {
    update: XOR<DetailsUpdateWithoutDetailsOnAreaInput, DetailsUncheckedUpdateWithoutDetailsOnAreaInput>
    create: XOR<DetailsCreateWithoutDetailsOnAreaInput, DetailsUncheckedCreateWithoutDetailsOnAreaInput>
  }

  export type DetailsUpdateWithoutDetailsOnAreaInput = {
    profile?: ProfileUpdateOneRequiredWithoutDetailsNestedInput
    description?: StringFieldUpdateOperationsInput | string
    petType?: StringFieldUpdateOperationsInput | string
    petSize?: PetSizeUpdateManyWithoutDetailNestedInput
    areaId?: IntFieldUpdateOperationsInput | number
  }

  export type DetailsUncheckedUpdateWithoutDetailsOnAreaInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    petType?: StringFieldUpdateOperationsInput | string
    petSize?: PetSizeUncheckedUpdateManyWithoutDetailNestedInput
    profileId?: IntFieldUpdateOperationsInput | number
    areaId?: IntFieldUpdateOperationsInput | number
  }

  export type AreaUpsertWithoutDetailsOnAreaInput = {
    update: XOR<AreaUpdateWithoutDetailsOnAreaInput, AreaUncheckedUpdateWithoutDetailsOnAreaInput>
    create: XOR<AreaCreateWithoutDetailsOnAreaInput, AreaUncheckedCreateWithoutDetailsOnAreaInput>
  }

  export type AreaUpdateWithoutDetailsOnAreaInput = {
    north?: BoolFieldUpdateOperationsInput | boolean
    south?: BoolFieldUpdateOperationsInput | boolean
    east?: BoolFieldUpdateOperationsInput | boolean
    west?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AreaUncheckedUpdateWithoutDetailsOnAreaInput = {
    id?: IntFieldUpdateOperationsInput | number
    north?: BoolFieldUpdateOperationsInput | boolean
    south?: BoolFieldUpdateOperationsInput | boolean
    east?: BoolFieldUpdateOperationsInput | boolean
    west?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DetailsCreateWithoutPetSizeInput = {
    profile: ProfileCreateNestedOneWithoutDetailsInput
    description: string
    petType: string
    areaId: number
    DetailsOnArea?: DetailsOnAreaCreateNestedManyWithoutDetailInput
  }

  export type DetailsUncheckedCreateWithoutPetSizeInput = {
    id?: number
    description: string
    petType: string
    profileId: number
    areaId: number
    DetailsOnArea?: DetailsOnAreaUncheckedCreateNestedManyWithoutDetailInput
  }

  export type DetailsCreateOrConnectWithoutPetSizeInput = {
    where: DetailsWhereUniqueInput
    create: XOR<DetailsCreateWithoutPetSizeInput, DetailsUncheckedCreateWithoutPetSizeInput>
  }

  export type DetailsUpsertWithoutPetSizeInput = {
    update: XOR<DetailsUpdateWithoutPetSizeInput, DetailsUncheckedUpdateWithoutPetSizeInput>
    create: XOR<DetailsCreateWithoutPetSizeInput, DetailsUncheckedCreateWithoutPetSizeInput>
  }

  export type DetailsUpdateWithoutPetSizeInput = {
    profile?: ProfileUpdateOneRequiredWithoutDetailsNestedInput
    description?: StringFieldUpdateOperationsInput | string
    petType?: StringFieldUpdateOperationsInput | string
    areaId?: IntFieldUpdateOperationsInput | number
    DetailsOnArea?: DetailsOnAreaUpdateManyWithoutDetailNestedInput
  }

  export type DetailsUncheckedUpdateWithoutPetSizeInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    petType?: StringFieldUpdateOperationsInput | string
    profileId?: IntFieldUpdateOperationsInput | number
    areaId?: IntFieldUpdateOperationsInput | number
    DetailsOnArea?: DetailsOnAreaUncheckedUpdateManyWithoutDetailNestedInput
  }

  export type DetailsOnAreaCreateWithoutAreaInput = {
    detail: DetailsCreateNestedOneWithoutDetailsOnAreaInput
    assignedAt?: Date | string
    assignedBy: string
  }

  export type DetailsOnAreaUncheckedCreateWithoutAreaInput = {
    assignedAt?: Date | string
    assignedBy: string
    detailsId: number
  }

  export type DetailsOnAreaCreateOrConnectWithoutAreaInput = {
    where: DetailsOnAreaWhereUniqueInput
    create: XOR<DetailsOnAreaCreateWithoutAreaInput, DetailsOnAreaUncheckedCreateWithoutAreaInput>
  }

  export type DetailsOnAreaCreateManyAreaInputEnvelope = {
    data: Enumerable<DetailsOnAreaCreateManyAreaInput>
    skipDuplicates?: boolean
  }

  export type DetailsOnAreaUpsertWithWhereUniqueWithoutAreaInput = {
    where: DetailsOnAreaWhereUniqueInput
    update: XOR<DetailsOnAreaUpdateWithoutAreaInput, DetailsOnAreaUncheckedUpdateWithoutAreaInput>
    create: XOR<DetailsOnAreaCreateWithoutAreaInput, DetailsOnAreaUncheckedCreateWithoutAreaInput>
  }

  export type DetailsOnAreaUpdateWithWhereUniqueWithoutAreaInput = {
    where: DetailsOnAreaWhereUniqueInput
    data: XOR<DetailsOnAreaUpdateWithoutAreaInput, DetailsOnAreaUncheckedUpdateWithoutAreaInput>
  }

  export type DetailsOnAreaUpdateManyWithWhereWithoutAreaInput = {
    where: DetailsOnAreaScalarWhereInput
    data: XOR<DetailsOnAreaUpdateManyMutationInput, DetailsOnAreaUncheckedUpdateManyWithoutDetailsOnAreaInput>
  }

  export type ProfileCreateWithoutReviewsInput = {
    name: string
    address: string
    description: string
    type: string
    profilePic?: string
    start: string
    end: string
    details?: DetailsCreateNestedManyWithoutProfileInput
    booking?: BookingCreateNestedManyWithoutProfileInput
    Post?: PostCreateNestedManyWithoutProfileInput
    Service?: ServiceCreateNestedManyWithoutVendorInput
  }

  export type ProfileUncheckedCreateWithoutReviewsInput = {
    id?: number
    name: string
    address: string
    description: string
    type: string
    profilePic?: string
    start: string
    end: string
    details?: DetailsUncheckedCreateNestedManyWithoutProfileInput
    booking?: BookingUncheckedCreateNestedManyWithoutProfileInput
    Post?: PostUncheckedCreateNestedManyWithoutProfileInput
    Service?: ServiceUncheckedCreateNestedManyWithoutVendorInput
  }

  export type ProfileCreateOrConnectWithoutReviewsInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutReviewsInput, ProfileUncheckedCreateWithoutReviewsInput>
  }

  export type UserProfileCreateWithoutReviewsInput = {
    user: UserCreateNestedOneWithoutProfileInput
    name: string
    address: string
    description: string
    pets?: PetsCreateNestedManyWithoutOwnerInput
    image: string
    booking?: BookingCreateNestedManyWithoutUserInput
  }

  export type UserProfileUncheckedCreateWithoutReviewsInput = {
    id?: number
    name: string
    address: string
    description: string
    pets?: PetsUncheckedCreateNestedManyWithoutOwnerInput
    image: string
    booking?: BookingUncheckedCreateNestedManyWithoutUserInput
    userId: number
  }

  export type UserProfileCreateOrConnectWithoutReviewsInput = {
    where: UserProfileWhereUniqueInput
    create: XOR<UserProfileCreateWithoutReviewsInput, UserProfileUncheckedCreateWithoutReviewsInput>
  }

  export type ProfileUpsertWithoutReviewsInput = {
    update: XOR<ProfileUpdateWithoutReviewsInput, ProfileUncheckedUpdateWithoutReviewsInput>
    create: XOR<ProfileCreateWithoutReviewsInput, ProfileUncheckedCreateWithoutReviewsInput>
  }

  export type ProfileUpdateWithoutReviewsInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    profilePic?: StringFieldUpdateOperationsInput | string
    start?: StringFieldUpdateOperationsInput | string
    end?: StringFieldUpdateOperationsInput | string
    details?: DetailsUpdateManyWithoutProfileNestedInput
    booking?: BookingUpdateManyWithoutProfileNestedInput
    Post?: PostUpdateManyWithoutProfileNestedInput
    Service?: ServiceUpdateManyWithoutVendorNestedInput
  }

  export type ProfileUncheckedUpdateWithoutReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    profilePic?: StringFieldUpdateOperationsInput | string
    start?: StringFieldUpdateOperationsInput | string
    end?: StringFieldUpdateOperationsInput | string
    details?: DetailsUncheckedUpdateManyWithoutProfileNestedInput
    booking?: BookingUncheckedUpdateManyWithoutProfileNestedInput
    Post?: PostUncheckedUpdateManyWithoutProfileNestedInput
    Service?: ServiceUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type UserProfileUpsertWithoutReviewsInput = {
    update: XOR<UserProfileUpdateWithoutReviewsInput, UserProfileUncheckedUpdateWithoutReviewsInput>
    create: XOR<UserProfileCreateWithoutReviewsInput, UserProfileUncheckedCreateWithoutReviewsInput>
  }

  export type UserProfileUpdateWithoutReviewsInput = {
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    pets?: PetsUpdateManyWithoutOwnerNestedInput
    image?: StringFieldUpdateOperationsInput | string
    booking?: BookingUpdateManyWithoutUserNestedInput
  }

  export type UserProfileUncheckedUpdateWithoutReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    pets?: PetsUncheckedUpdateManyWithoutOwnerNestedInput
    image?: StringFieldUpdateOperationsInput | string
    booking?: BookingUncheckedUpdateManyWithoutUserNestedInput
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserProfileCreateWithoutUserInput = {
    name: string
    address: string
    description: string
    pets?: PetsCreateNestedManyWithoutOwnerInput
    image: string
    booking?: BookingCreateNestedManyWithoutUserInput
    reviews?: ReviewsCreateNestedManyWithoutUserProfileInput
  }

  export type UserProfileUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    address: string
    description: string
    pets?: PetsUncheckedCreateNestedManyWithoutOwnerInput
    image: string
    booking?: BookingUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewsUncheckedCreateNestedManyWithoutUserProfileInput
  }

  export type UserProfileCreateOrConnectWithoutUserInput = {
    where: UserProfileWhereUniqueInput
    create: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
  }

  export type UserProfileUpsertWithoutUserInput = {
    update: XOR<UserProfileUpdateWithoutUserInput, UserProfileUncheckedUpdateWithoutUserInput>
    create: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
  }

  export type UserProfileUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    pets?: PetsUpdateManyWithoutOwnerNestedInput
    image?: StringFieldUpdateOperationsInput | string
    booking?: BookingUpdateManyWithoutUserNestedInput
    reviews?: ReviewsUpdateManyWithoutUserProfileNestedInput
  }

  export type UserProfileUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    pets?: PetsUncheckedUpdateManyWithoutOwnerNestedInput
    image?: StringFieldUpdateOperationsInput | string
    booking?: BookingUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewsUncheckedUpdateManyWithoutUserProfileNestedInput
  }

  export type UserCreateWithoutProfileInput = {
    email: string
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: number
    email: string
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type PetsCreateWithoutOwnerInput = {
    name: string
    type: string
    breed: string
    birth: Date | string
    image: string
    sterilized: boolean
  }

  export type PetsUncheckedCreateWithoutOwnerInput = {
    id?: number
    name: string
    type: string
    breed: string
    birth: Date | string
    image: string
    sterilized: boolean
  }

  export type PetsCreateOrConnectWithoutOwnerInput = {
    where: PetsWhereUniqueInput
    create: XOR<PetsCreateWithoutOwnerInput, PetsUncheckedCreateWithoutOwnerInput>
  }

  export type PetsCreateManyOwnerInputEnvelope = {
    data: Enumerable<PetsCreateManyOwnerInput>
    skipDuplicates?: boolean
  }

  export type BookingCreateWithoutUserInput = {
    profile: ProfileCreateNestedOneWithoutBookingInput
    service: ServiceCreateNestedOneWithoutBookingInput
    dateTime: Date | string
    status: string
  }

  export type BookingUncheckedCreateWithoutUserInput = {
    id?: number
    dateTime: Date | string
    status: string
    profileId: number
    serviceId: number
  }

  export type BookingCreateOrConnectWithoutUserInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutUserInput, BookingUncheckedCreateWithoutUserInput>
  }

  export type BookingCreateManyUserInputEnvelope = {
    data: Enumerable<BookingCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ReviewsCreateWithoutUserProfileInput = {
    paws: number
    comment: string
    profile: ProfileCreateNestedOneWithoutReviewsInput
  }

  export type ReviewsUncheckedCreateWithoutUserProfileInput = {
    id?: number
    paws: number
    comment: string
    profileId: number
  }

  export type ReviewsCreateOrConnectWithoutUserProfileInput = {
    where: ReviewsWhereUniqueInput
    create: XOR<ReviewsCreateWithoutUserProfileInput, ReviewsUncheckedCreateWithoutUserProfileInput>
  }

  export type ReviewsCreateManyUserProfileInputEnvelope = {
    data: Enumerable<ReviewsCreateManyUserProfileInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutProfileInput = {
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpdateWithoutProfileInput = {
    email?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
  }

  export type PetsUpsertWithWhereUniqueWithoutOwnerInput = {
    where: PetsWhereUniqueInput
    update: XOR<PetsUpdateWithoutOwnerInput, PetsUncheckedUpdateWithoutOwnerInput>
    create: XOR<PetsCreateWithoutOwnerInput, PetsUncheckedCreateWithoutOwnerInput>
  }

  export type PetsUpdateWithWhereUniqueWithoutOwnerInput = {
    where: PetsWhereUniqueInput
    data: XOR<PetsUpdateWithoutOwnerInput, PetsUncheckedUpdateWithoutOwnerInput>
  }

  export type PetsUpdateManyWithWhereWithoutOwnerInput = {
    where: PetsScalarWhereInput
    data: XOR<PetsUpdateManyMutationInput, PetsUncheckedUpdateManyWithoutPetsInput>
  }

  export type PetsScalarWhereInput = {
    AND?: Enumerable<PetsScalarWhereInput>
    OR?: Enumerable<PetsScalarWhereInput>
    NOT?: Enumerable<PetsScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    type?: StringFilter | string
    breed?: StringFilter | string
    birth?: DateTimeFilter | Date | string
    image?: StringFilter | string
    sterilized?: BoolFilter | boolean
    userProfileId?: IntFilter | number
  }

  export type BookingUpsertWithWhereUniqueWithoutUserInput = {
    where: BookingWhereUniqueInput
    update: XOR<BookingUpdateWithoutUserInput, BookingUncheckedUpdateWithoutUserInput>
    create: XOR<BookingCreateWithoutUserInput, BookingUncheckedCreateWithoutUserInput>
  }

  export type BookingUpdateWithWhereUniqueWithoutUserInput = {
    where: BookingWhereUniqueInput
    data: XOR<BookingUpdateWithoutUserInput, BookingUncheckedUpdateWithoutUserInput>
  }

  export type BookingUpdateManyWithWhereWithoutUserInput = {
    where: BookingScalarWhereInput
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyWithoutBookingInput>
  }

  export type ReviewsUpsertWithWhereUniqueWithoutUserProfileInput = {
    where: ReviewsWhereUniqueInput
    update: XOR<ReviewsUpdateWithoutUserProfileInput, ReviewsUncheckedUpdateWithoutUserProfileInput>
    create: XOR<ReviewsCreateWithoutUserProfileInput, ReviewsUncheckedCreateWithoutUserProfileInput>
  }

  export type ReviewsUpdateWithWhereUniqueWithoutUserProfileInput = {
    where: ReviewsWhereUniqueInput
    data: XOR<ReviewsUpdateWithoutUserProfileInput, ReviewsUncheckedUpdateWithoutUserProfileInput>
  }

  export type ReviewsUpdateManyWithWhereWithoutUserProfileInput = {
    where: ReviewsScalarWhereInput
    data: XOR<ReviewsUpdateManyMutationInput, ReviewsUncheckedUpdateManyWithoutReviewsInput>
  }

  export type UserProfileCreateWithoutPetsInput = {
    user: UserCreateNestedOneWithoutProfileInput
    name: string
    address: string
    description: string
    image: string
    booking?: BookingCreateNestedManyWithoutUserInput
    reviews?: ReviewsCreateNestedManyWithoutUserProfileInput
  }

  export type UserProfileUncheckedCreateWithoutPetsInput = {
    id?: number
    name: string
    address: string
    description: string
    image: string
    booking?: BookingUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewsUncheckedCreateNestedManyWithoutUserProfileInput
    userId: number
  }

  export type UserProfileCreateOrConnectWithoutPetsInput = {
    where: UserProfileWhereUniqueInput
    create: XOR<UserProfileCreateWithoutPetsInput, UserProfileUncheckedCreateWithoutPetsInput>
  }

  export type UserProfileUpsertWithoutPetsInput = {
    update: XOR<UserProfileUpdateWithoutPetsInput, UserProfileUncheckedUpdateWithoutPetsInput>
    create: XOR<UserProfileCreateWithoutPetsInput, UserProfileUncheckedCreateWithoutPetsInput>
  }

  export type UserProfileUpdateWithoutPetsInput = {
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    booking?: BookingUpdateManyWithoutUserNestedInput
    reviews?: ReviewsUpdateManyWithoutUserProfileNestedInput
  }

  export type UserProfileUncheckedUpdateWithoutPetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    booking?: BookingUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewsUncheckedUpdateManyWithoutUserProfileNestedInput
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ProfileCreateWithoutPostInput = {
    name: string
    address: string
    description: string
    type: string
    profilePic?: string
    start: string
    end: string
    details?: DetailsCreateNestedManyWithoutProfileInput
    booking?: BookingCreateNestedManyWithoutProfileInput
    Reviews?: ReviewsCreateNestedManyWithoutProfileInput
    Service?: ServiceCreateNestedManyWithoutVendorInput
  }

  export type ProfileUncheckedCreateWithoutPostInput = {
    id?: number
    name: string
    address: string
    description: string
    type: string
    profilePic?: string
    start: string
    end: string
    details?: DetailsUncheckedCreateNestedManyWithoutProfileInput
    booking?: BookingUncheckedCreateNestedManyWithoutProfileInput
    Reviews?: ReviewsUncheckedCreateNestedManyWithoutProfileInput
    Service?: ServiceUncheckedCreateNestedManyWithoutVendorInput
  }

  export type ProfileCreateOrConnectWithoutPostInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutPostInput, ProfileUncheckedCreateWithoutPostInput>
  }

  export type ProfileUpsertWithoutPostInput = {
    update: XOR<ProfileUpdateWithoutPostInput, ProfileUncheckedUpdateWithoutPostInput>
    create: XOR<ProfileCreateWithoutPostInput, ProfileUncheckedCreateWithoutPostInput>
  }

  export type ProfileUpdateWithoutPostInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    profilePic?: StringFieldUpdateOperationsInput | string
    start?: StringFieldUpdateOperationsInput | string
    end?: StringFieldUpdateOperationsInput | string
    details?: DetailsUpdateManyWithoutProfileNestedInput
    booking?: BookingUpdateManyWithoutProfileNestedInput
    Reviews?: ReviewsUpdateManyWithoutProfileNestedInput
    Service?: ServiceUpdateManyWithoutVendorNestedInput
  }

  export type ProfileUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    profilePic?: StringFieldUpdateOperationsInput | string
    start?: StringFieldUpdateOperationsInput | string
    end?: StringFieldUpdateOperationsInput | string
    details?: DetailsUncheckedUpdateManyWithoutProfileNestedInput
    booking?: BookingUncheckedUpdateManyWithoutProfileNestedInput
    Reviews?: ReviewsUncheckedUpdateManyWithoutProfileNestedInput
    Service?: ServiceUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type ProfileCreateWithoutBookingInput = {
    name: string
    address: string
    description: string
    type: string
    profilePic?: string
    start: string
    end: string
    details?: DetailsCreateNestedManyWithoutProfileInput
    Reviews?: ReviewsCreateNestedManyWithoutProfileInput
    Post?: PostCreateNestedManyWithoutProfileInput
    Service?: ServiceCreateNestedManyWithoutVendorInput
  }

  export type ProfileUncheckedCreateWithoutBookingInput = {
    id?: number
    name: string
    address: string
    description: string
    type: string
    profilePic?: string
    start: string
    end: string
    details?: DetailsUncheckedCreateNestedManyWithoutProfileInput
    Reviews?: ReviewsUncheckedCreateNestedManyWithoutProfileInput
    Post?: PostUncheckedCreateNestedManyWithoutProfileInput
    Service?: ServiceUncheckedCreateNestedManyWithoutVendorInput
  }

  export type ProfileCreateOrConnectWithoutBookingInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutBookingInput, ProfileUncheckedCreateWithoutBookingInput>
  }

  export type UserProfileCreateWithoutBookingInput = {
    user: UserCreateNestedOneWithoutProfileInput
    name: string
    address: string
    description: string
    pets?: PetsCreateNestedManyWithoutOwnerInput
    image: string
    reviews?: ReviewsCreateNestedManyWithoutUserProfileInput
  }

  export type UserProfileUncheckedCreateWithoutBookingInput = {
    id?: number
    name: string
    address: string
    description: string
    pets?: PetsUncheckedCreateNestedManyWithoutOwnerInput
    image: string
    reviews?: ReviewsUncheckedCreateNestedManyWithoutUserProfileInput
    userId: number
  }

  export type UserProfileCreateOrConnectWithoutBookingInput = {
    where: UserProfileWhereUniqueInput
    create: XOR<UserProfileCreateWithoutBookingInput, UserProfileUncheckedCreateWithoutBookingInput>
  }

  export type ServiceCreateWithoutBookingInput = {
    title: string
    price: number
    vendor: ProfileCreateNestedOneWithoutServiceInput
  }

  export type ServiceUncheckedCreateWithoutBookingInput = {
    id?: number
    title: string
    price: number
    profileId: number
  }

  export type ServiceCreateOrConnectWithoutBookingInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutBookingInput, ServiceUncheckedCreateWithoutBookingInput>
  }

  export type ProfileUpsertWithoutBookingInput = {
    update: XOR<ProfileUpdateWithoutBookingInput, ProfileUncheckedUpdateWithoutBookingInput>
    create: XOR<ProfileCreateWithoutBookingInput, ProfileUncheckedCreateWithoutBookingInput>
  }

  export type ProfileUpdateWithoutBookingInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    profilePic?: StringFieldUpdateOperationsInput | string
    start?: StringFieldUpdateOperationsInput | string
    end?: StringFieldUpdateOperationsInput | string
    details?: DetailsUpdateManyWithoutProfileNestedInput
    Reviews?: ReviewsUpdateManyWithoutProfileNestedInput
    Post?: PostUpdateManyWithoutProfileNestedInput
    Service?: ServiceUpdateManyWithoutVendorNestedInput
  }

  export type ProfileUncheckedUpdateWithoutBookingInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    profilePic?: StringFieldUpdateOperationsInput | string
    start?: StringFieldUpdateOperationsInput | string
    end?: StringFieldUpdateOperationsInput | string
    details?: DetailsUncheckedUpdateManyWithoutProfileNestedInput
    Reviews?: ReviewsUncheckedUpdateManyWithoutProfileNestedInput
    Post?: PostUncheckedUpdateManyWithoutProfileNestedInput
    Service?: ServiceUncheckedUpdateManyWithoutVendorNestedInput
  }

  export type UserProfileUpsertWithoutBookingInput = {
    update: XOR<UserProfileUpdateWithoutBookingInput, UserProfileUncheckedUpdateWithoutBookingInput>
    create: XOR<UserProfileCreateWithoutBookingInput, UserProfileUncheckedCreateWithoutBookingInput>
  }

  export type UserProfileUpdateWithoutBookingInput = {
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    pets?: PetsUpdateManyWithoutOwnerNestedInput
    image?: StringFieldUpdateOperationsInput | string
    reviews?: ReviewsUpdateManyWithoutUserProfileNestedInput
  }

  export type UserProfileUncheckedUpdateWithoutBookingInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    pets?: PetsUncheckedUpdateManyWithoutOwnerNestedInput
    image?: StringFieldUpdateOperationsInput | string
    reviews?: ReviewsUncheckedUpdateManyWithoutUserProfileNestedInput
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ServiceUpsertWithoutBookingInput = {
    update: XOR<ServiceUpdateWithoutBookingInput, ServiceUncheckedUpdateWithoutBookingInput>
    create: XOR<ServiceCreateWithoutBookingInput, ServiceUncheckedCreateWithoutBookingInput>
  }

  export type ServiceUpdateWithoutBookingInput = {
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    vendor?: ProfileUpdateOneRequiredWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateWithoutBookingInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    profileId?: IntFieldUpdateOperationsInput | number
  }

  export type ProfileCreateWithoutServiceInput = {
    name: string
    address: string
    description: string
    type: string
    profilePic?: string
    start: string
    end: string
    details?: DetailsCreateNestedManyWithoutProfileInput
    booking?: BookingCreateNestedManyWithoutProfileInput
    Reviews?: ReviewsCreateNestedManyWithoutProfileInput
    Post?: PostCreateNestedManyWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutServiceInput = {
    id?: number
    name: string
    address: string
    description: string
    type: string
    profilePic?: string
    start: string
    end: string
    details?: DetailsUncheckedCreateNestedManyWithoutProfileInput
    booking?: BookingUncheckedCreateNestedManyWithoutProfileInput
    Reviews?: ReviewsUncheckedCreateNestedManyWithoutProfileInput
    Post?: PostUncheckedCreateNestedManyWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutServiceInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutServiceInput, ProfileUncheckedCreateWithoutServiceInput>
  }

  export type BookingCreateWithoutServiceInput = {
    profile: ProfileCreateNestedOneWithoutBookingInput
    user: UserProfileCreateNestedOneWithoutBookingInput
    dateTime: Date | string
    status: string
  }

  export type BookingUncheckedCreateWithoutServiceInput = {
    id?: number
    dateTime: Date | string
    status: string
    profileId: number
    userProfileId: number
  }

  export type BookingCreateOrConnectWithoutServiceInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutServiceInput, BookingUncheckedCreateWithoutServiceInput>
  }

  export type BookingCreateManyServiceInputEnvelope = {
    data: Enumerable<BookingCreateManyServiceInput>
    skipDuplicates?: boolean
  }

  export type ProfileUpsertWithoutServiceInput = {
    update: XOR<ProfileUpdateWithoutServiceInput, ProfileUncheckedUpdateWithoutServiceInput>
    create: XOR<ProfileCreateWithoutServiceInput, ProfileUncheckedCreateWithoutServiceInput>
  }

  export type ProfileUpdateWithoutServiceInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    profilePic?: StringFieldUpdateOperationsInput | string
    start?: StringFieldUpdateOperationsInput | string
    end?: StringFieldUpdateOperationsInput | string
    details?: DetailsUpdateManyWithoutProfileNestedInput
    booking?: BookingUpdateManyWithoutProfileNestedInput
    Reviews?: ReviewsUpdateManyWithoutProfileNestedInput
    Post?: PostUpdateManyWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    profilePic?: StringFieldUpdateOperationsInput | string
    start?: StringFieldUpdateOperationsInput | string
    end?: StringFieldUpdateOperationsInput | string
    details?: DetailsUncheckedUpdateManyWithoutProfileNestedInput
    booking?: BookingUncheckedUpdateManyWithoutProfileNestedInput
    Reviews?: ReviewsUncheckedUpdateManyWithoutProfileNestedInput
    Post?: PostUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type BookingUpsertWithWhereUniqueWithoutServiceInput = {
    where: BookingWhereUniqueInput
    update: XOR<BookingUpdateWithoutServiceInput, BookingUncheckedUpdateWithoutServiceInput>
    create: XOR<BookingCreateWithoutServiceInput, BookingUncheckedCreateWithoutServiceInput>
  }

  export type BookingUpdateWithWhereUniqueWithoutServiceInput = {
    where: BookingWhereUniqueInput
    data: XOR<BookingUpdateWithoutServiceInput, BookingUncheckedUpdateWithoutServiceInput>
  }

  export type BookingUpdateManyWithWhereWithoutServiceInput = {
    where: BookingScalarWhereInput
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyWithoutBookingInput>
  }

  export type DetailsCreateManyProfileInput = {
    id?: number
    description: string
    petType: string
    areaId: number
  }

  export type BookingCreateManyProfileInput = {
    id?: number
    dateTime: Date | string
    status: string
    userProfileId: number
    serviceId: number
  }

  export type ReviewsCreateManyProfileInput = {
    id?: number
    paws: number
    comment: string
    userProfileId: number
  }

  export type PostCreateManyProfileInput = {
    id?: number
    image: string
    message: string
  }

  export type ServiceCreateManyVendorInput = {
    id?: number
    title: string
    price: number
  }

  export type DetailsUpdateWithoutProfileInput = {
    description?: StringFieldUpdateOperationsInput | string
    petType?: StringFieldUpdateOperationsInput | string
    petSize?: PetSizeUpdateManyWithoutDetailNestedInput
    areaId?: IntFieldUpdateOperationsInput | number
    DetailsOnArea?: DetailsOnAreaUpdateManyWithoutDetailNestedInput
  }

  export type DetailsUncheckedUpdateWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    petType?: StringFieldUpdateOperationsInput | string
    petSize?: PetSizeUncheckedUpdateManyWithoutDetailNestedInput
    areaId?: IntFieldUpdateOperationsInput | number
    DetailsOnArea?: DetailsOnAreaUncheckedUpdateManyWithoutDetailNestedInput
  }

  export type DetailsUncheckedUpdateManyWithoutDetailsInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    petType?: StringFieldUpdateOperationsInput | string
    areaId?: IntFieldUpdateOperationsInput | number
  }

  export type BookingUpdateWithoutProfileInput = {
    user?: UserProfileUpdateOneRequiredWithoutBookingNestedInput
    service?: ServiceUpdateOneRequiredWithoutBookingNestedInput
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type BookingUncheckedUpdateWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    userProfileId?: IntFieldUpdateOperationsInput | number
    serviceId?: IntFieldUpdateOperationsInput | number
  }

  export type BookingUncheckedUpdateManyWithoutBookingInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    userProfileId?: IntFieldUpdateOperationsInput | number
    serviceId?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewsUpdateWithoutProfileInput = {
    paws?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    userProfile?: UserProfileUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewsUncheckedUpdateWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    paws?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    userProfileId?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewsUncheckedUpdateManyWithoutReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    paws?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    userProfileId?: IntFieldUpdateOperationsInput | number
  }

  export type PostUpdateWithoutProfileInput = {
    image?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type PostUncheckedUpdateWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type PostUncheckedUpdateManyWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type ServiceUpdateWithoutVendorInput = {
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    booking?: BookingUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateWithoutVendorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    booking?: BookingUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateManyWithoutServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
  }

  export type PetSizeCreateManyDetailInput = {
    id?: number
    weight: string
  }

  export type DetailsOnAreaCreateManyDetailInput = {
    assignedAt?: Date | string
    assignedBy: string
    areaId: number
  }

  export type PetSizeUpdateWithoutDetailInput = {
    weight?: StringFieldUpdateOperationsInput | string
  }

  export type PetSizeUncheckedUpdateWithoutDetailInput = {
    id?: IntFieldUpdateOperationsInput | number
    weight?: StringFieldUpdateOperationsInput | string
  }

  export type PetSizeUncheckedUpdateManyWithoutPetSizeInput = {
    id?: IntFieldUpdateOperationsInput | number
    weight?: StringFieldUpdateOperationsInput | string
  }

  export type DetailsOnAreaUpdateWithoutDetailInput = {
    area?: AreaUpdateOneRequiredWithoutDetailsOnAreaNestedInput
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type DetailsOnAreaUncheckedUpdateWithoutDetailInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
    areaId?: IntFieldUpdateOperationsInput | number
  }

  export type DetailsOnAreaUncheckedUpdateManyWithoutDetailsOnAreaInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
    areaId?: IntFieldUpdateOperationsInput | number
  }

  export type DetailsOnAreaCreateManyAreaInput = {
    assignedAt?: Date | string
    assignedBy: string
    detailsId: number
  }

  export type DetailsOnAreaUpdateWithoutAreaInput = {
    detail?: DetailsUpdateOneRequiredWithoutDetailsOnAreaNestedInput
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type DetailsOnAreaUncheckedUpdateWithoutAreaInput = {
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedBy?: StringFieldUpdateOperationsInput | string
    detailsId?: IntFieldUpdateOperationsInput | number
  }

  export type PetsCreateManyOwnerInput = {
    id?: number
    name: string
    type: string
    breed: string
    birth: Date | string
    image: string
    sterilized: boolean
  }

  export type BookingCreateManyUserInput = {
    id?: number
    dateTime: Date | string
    status: string
    profileId: number
    serviceId: number
  }

  export type ReviewsCreateManyUserProfileInput = {
    id?: number
    paws: number
    comment: string
    profileId: number
  }

  export type PetsUpdateWithoutOwnerInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    sterilized?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PetsUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    sterilized?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PetsUncheckedUpdateManyWithoutPetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    sterilized?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BookingUpdateWithoutUserInput = {
    profile?: ProfileUpdateOneRequiredWithoutBookingNestedInput
    service?: ServiceUpdateOneRequiredWithoutBookingNestedInput
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type BookingUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    profileId?: IntFieldUpdateOperationsInput | number
    serviceId?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewsUpdateWithoutUserProfileInput = {
    paws?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    profile?: ProfileUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewsUncheckedUpdateWithoutUserProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    paws?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    profileId?: IntFieldUpdateOperationsInput | number
  }

  export type BookingCreateManyServiceInput = {
    id?: number
    dateTime: Date | string
    status: string
    profileId: number
    userProfileId: number
  }

  export type BookingUpdateWithoutServiceInput = {
    profile?: ProfileUpdateOneRequiredWithoutBookingNestedInput
    user?: UserProfileUpdateOneRequiredWithoutBookingNestedInput
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type BookingUncheckedUpdateWithoutServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    profileId?: IntFieldUpdateOperationsInput | number
    userProfileId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}