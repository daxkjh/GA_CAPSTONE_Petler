// This is yo r Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Vendor {
  id       String   @id @default(uuid())
  email    String   @unique
  password String
  profile  Profile?

}

model Profile {
  id         Int        @id @default(autoincrement())
  name       String?
  address    String?
  phone      String?
  intro      String?
  type       String?
  profilePic String     @default("https://i.imgur.com/aeW3aDj.png%22")
  start      String?
  end        String?
  details    Details?
  bookings   Bookings[]
  reviews    Reviews[]
  posts      Posts[]
  services   Services[]
  vendor     Vendor     @relation(fields: [vendorId], references: [id])
  vendorId   String     @unique
}

model Details {
  id        Int      @id @default(autoincrement())
  profile   Profile  @relation(fields: [profileId], references: [id])
  svcdsc    String?
  petType   String?
  petSize   PetSize?
  profileId Int      @unique
  area      Area?
  // petSizeId Int
  // areaId    Int
}

model PetSize {
  id        Int     @id @default(autoincrement())
  xs        Boolean @default(false)
  s         Boolean @default(false)
  m         Boolean @default(false)
  l         Boolean @default(false)
  xl        Boolean @default(false)
  details   Details @relation(fields: [detailsId], references: [id])
  detailsId Int     @unique
}

model Area {
  id        Int     @id @default(autoincrement())
  north     Boolean @default(false)
  south     Boolean @default(false)
  east      Boolean @default(false)
  west      Boolean @default(false)
  details   Details @relation(fields: [detailsId], references: [id])
  detailsId Int     @unique
}

model Reviews {
  id            Int         @id @default(autoincrement())
  paws          Int?
  comment       String?
  profile       Profile     @relation(fields: [profileId], references: [id])
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id])
  profileId     Int
  userProfileId Int
}

model User {
  id       String       @id @default(uuid())
  email    String       @unique
  password String
  profile  UserProfile?
}

model UserProfile {
  id          Int        @id @default(autoincrement())
  user        User       @relation(fields: [userId], references: [id])
  name        String?
  address     String?
  description String?
  pets        Pets[]
  image       String?    @default("https://i.imgur.com/aeW3aDj.png%22")
  booking     Bookings[]
  reviews     Reviews[]
  userId      String     @unique
}

model Pets {
  id            Int         @id @default(autoincrement())
  name          String?
  type          String?
  breed         String?
  birth         DateTime?
  image         String?
  sterilized    Boolean?
  size          String?
  owner         UserProfile @relation(fields: [userProfileId], references: [id])
  userProfileId Int
}

model Posts {
  id        Int     @id @default(autoincrement())
  image     String?
  message   String?
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId Int
}

model Bookings {
  id            Int         @id @default(autoincrement())
  profile       Profile     @relation(fields: [profileId], references: [id])
  user          UserProfile @relation(fields: [userProfileId], references: [id])
  services      Services    @relation(fields: [servicesId], references: [id])
  startDateTime DateTime?
  endDateTime   DateTime?
  status        String?     @default("pending")
  bookingdesc   String?
  profileId     Int
  userProfileId Int
  servicesId    Int
}

model Services {
  id         Int        @id @default(autoincrement())
  title      String?
  price      Int?
  dayService Boolean?   @default(false)
  vendor     Profile    @relation(fields: [profileId], references: [id])
  bookings   Bookings[]
  active     Boolean    @default(true)
  profileId  Int
}
