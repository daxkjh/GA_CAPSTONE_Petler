// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Vendor {
  id       String   @id @default(uuid())
  email    String   @unique
  password String
  profile  Profile?

}

model Profile {
  id          Int        @id @default(autoincrement())
  name        String?
  address     String?
  phone       String?
  description String?
  type        String?
  profilePic  String     @default("https://i.imgur.com/aeW3aDj.png%22")
  start       String?
  end         String?
  details     Details[]
  bookings    Bookings[]
  reviews     Reviews[]
  posts       Posts[]
  services    Services[]
  vendor      Vendor     @relation(fields: [vendorId], references: [id])
  vendorId    String     @unique
}

model Details {
  id          Int       @id @default(autoincrement())
  profile     Profile   @relation(fields: [profileId], references: [id])
  description String?
  petType     String?
  petSize     PetSize[]
  profileId   Int
  area        Area[]
  // areaId      Int
  // detailsOnArea DetailsOnArea[]
}

// model DetailsOnArea {
//   detail     Details  @relation(fields: [detailsId], references: [id])
//   area       Area     @relation(fields: [areaId], references: [id])
//   assignedAt DateTime @default(now())
//   assignedBy String
//   detailsId  Int
//   areaId     Int

//   @@id([detailsId, areaId])
// }

model PetSize {
  id        Int     @id @default(autoincrement())
  weight    String?
  details   Details @relation(fields: [detailsId], references: [id])
  detailsId Int
}

model Area {
  id      Int       @id @default(autoincrement())
  north   Boolean   @default(false)
  south   Boolean   @default(false)
  east    Boolean   @default(false)
  west    Boolean   @default(false)
  // detailsOnArea DetailsOnArea[]
  details Details[]
}

model Reviews {
  id            Int         @id @default(autoincrement())
  paws          Int?
  comment       String?
  profile       Profile     @relation(fields: [profileId], references: [id])
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id])
  profileId     Int
  userProfileId Int
}

model User {
  id       Int          @id @default(autoincrement())
  email    String       @unique
  password String
  profile  UserProfile?
}

model UserProfile {
  id          Int        @id @default(autoincrement())
  user        User       @relation(fields: [userId], references: [id])
  name        String?
  address     String?
  description String?
  pets        Pets[]
  image       String?
  booking     Bookings[]
  reviews     Reviews[]
  userId      Int        @unique
}

model Pets {
  id            Int         @id @default(autoincrement())
  name          String?
  type          String?
  breed         String?
  birth         DateTime?
  image         String?
  sterilized    Boolean?
  owner         UserProfile @relation(fields: [userProfileId], references: [id])
  userProfileId Int
}

model Posts {
  id        Int     @id @default(autoincrement())
  image     String?
  message   String?
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId Int
}

model Bookings {
  id            Int         @id @default(autoincrement())
  profile       Profile     @relation(fields: [profileId], references: [id])
  user          UserProfile @relation(fields: [userProfileId], references: [id])
  services      Services    @relation(fields: [servicesId], references: [id])
  dateTime      DateTime?
  status        String?
  profileId     Int
  userProfileId Int
  servicesId    Int
}

model Services {
  id        Int        @id @default(autoincrement())
  title     String?
  price     Int?
  vendor    Profile    @relation(fields: [profileId], references: [id])
  bookings  Bookings[]
  profileId Int
}
