// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Vendor {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String

}

model Profile {
  id          Int       @id @default(autoincrement())
  name        String
  address     String
  description String
  type        String
  profilePic  String    @default("https://i.imgur.com/aeW3aDj.png%22")
  details     Details[]
  booking     Booking[]
  Reviews     Reviews[]
  Post        Post[]
  Service     Service[]
}

model Details {
  id            Int             @id @default(autoincrement())
  profile       Profile         @relation(fields: [profileId], references: [id])
  description   String
  petType       String
  petSize       PetSize[]
  profileId     Int
  areaId        Int
  DetailsOnArea DetailsOnArea[]
}

model DetailsOnArea {
  detail     Details  @relation(fields: [detailsId], references: [id])
  area       Area     @relation(fields: [areaId], references: [id])
  assignedAt DateTime @default(now())
  assignedBy String
  detailsId  Int
  areaId     Int

  @@id([detailsId, areaId])
}

model PetSize {
  id        Int     @id @default(autoincrement())
  weight    String
  detail    Details @relation(fields: [detailsId], references: [id])
  detailsId Int
}

model Area {
  id            Int             @id @default(autoincrement())
  north         Boolean         @default(false)
  south         Boolean         @default(false)
  east          Boolean         @default(false)
  west          Boolean         @default(false)
  DetailsOnArea DetailsOnArea[]
}

model Reviews {
  id            Int         @id @default(autoincrement())
  paws          Int
  comment       String
  profile       Profile     @relation(fields: [profileId], references: [id])
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id])
  profileId     Int
  userProfileId Int
}

model User {
  id      Int          @id @default(autoincrement())
  email   String       @unique
  profile UserProfile?
}

model UserProfile {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  name        String
  address     String
  description String
  pets        Pets[]
  image       String
  start       String
  end         String
  booking     Booking[]
  reviews     Reviews[]
  userId      Int       @unique
}

model Pets {
  id            Int         @id @default(autoincrement())
  name          String
  type          String
  breed         String
  birth         DateTime
  image         String
  sterilized    Boolean
  owner         UserProfile @relation(fields: [userProfileId], references: [id])
  userProfileId Int
}

model Post {
  id        Int     @id @default(autoincrement())
  image     String
  message   String
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId Int
}

model Booking {
  id            Int         @id @default(autoincrement())
  profile       Profile     @relation(fields: [profileId], references: [id])
  user          UserProfile @relation(fields: [userProfileId], references: [id])
  service       Service     @relation(fields: [serviceId], references: [id])
  dateTime      DateTime
  status        String
  profileId     Int
  userProfileId Int
  serviceId     Int
}

model Service {
  id        Int       @id @default(autoincrement())
  title     String
  price     Int
  vendor    Profile   @relation(fields: [profileId], references: [id])
  booking   Booking[]
  profileId Int
}
